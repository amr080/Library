openapi: 3.0.1
info:
  title: Orum API
  description: Orum API.
  version: v2022-09-21
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
servers:
  - url: https://api-sandbox.orum.io
  - url: https://vault.api-sandbox.orum.io
paths:
  /oauth/token:
    post:
      summary: Request an access token
      tags:
        - Authentication
      operationId: post-oauth-token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OauthTokenBody'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OauthTokenBody'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OauthTokenResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: unauthorized request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: forbidden request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: too many requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: service unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
  /deliver/reports/recon:
    post:
      tags:
        - Reports
      operationId: post-reports-recon
      summary: Create a reconciliation report
      description: Create a reconciliation report for the requested start and end date.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReconReportRequest'
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReconReportResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:reports
    get:
      tags:
        - Reports
      operationId: get-reports-recon
      summary: Get all reconciliation reports
      description: Get all reconciliation reports.
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportsResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:reports
  /deliver/reports/recon/{id}:
    get:
      tags:
        - Reports
      operationId: get-recon-report
      summary: Get a reconciliation report
      description: Get a single reconciliation report by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReconReportResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:reports
  /deliver/reports/{id}:
    delete:
      tags:
        - Reports
      operationId: delete-report
      summary: Delete a report
      description: Delete a single report.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
      responses:
        '204':
          description: 204 response.
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:reports
  /deliver/reports/{id}/download:
    get:
      tags:
        - Reports
      operationId: get-report-download
      summary: Download a report
      description: Download a single report.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique id for the resource.
          schema:
            $ref: '#/components/schemas/OrumId'
      responses:
        '200':
          description: CSV file containing the report data.
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:reports
  /deliver/reports/balances:
    get:
      tags:
        - Reports
      operationId: get-reports-balances
      summary: Get a balance statement summary report
      description: Get a balance statement summary report for the requested start and end date.
      parameters:
        - name: start_time
          in: query
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/StartTime'
          x-orum-error-missing:
            message: start_time is required
            code: missing_start_time
          x-orum-error-invalid:
            message: start_time must be a valid timestamp
            code: invalid_start_time
        - name: end_time
          in: query
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/EndTime'
          x-orum-error-missing:
            message: end_time is required
            code: missing_end_time
          x-orum-error-invalid:
            message: end_time must be a valid timestamp
            code: invalid_end_time
        - name: report_scope
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ReportScope'
          x-orum-error-invalid:
            message: 'report_scope must be one of the following: total, enterprise, subledger'
            code: invalid_report_scope
        - name: subledger_reference_id
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SubledgerReferenceId'
          x-orum-error-invalid:
            message: subledger_reference_id must be a valid string
            code: invalid_subledger_reference_id
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceReportResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:reports
  /deliver/persons:
    post:
      tags:
        - Persons
      operationId: post-person
      summary: Create a person
      description: Create a person object to represent a human customer.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:persons
    get:
      tags:
        - Persons
      operationId: get-persons
      summary: Get all persons
      description: Get all persons objects.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: index
          description: Index for paginated results
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
          x-orum-error-invalid:
            known-error: index
        - name: size
          description: Max number of results to return
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 500
          x-orum-error-invalid:
            known-error: size
        - name: customer_reference_id
          description: Filter by customer reference id
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/CustomerReferenceId'
        - name: status
          description: Filter by customer statuses (multiple allowed)
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PersonStatus'
          explode: true
          x-orum-error-invalid:
            known-error: invalid_person_status
        - name: start_time
          description: Filter results created at or after this time
          in: query
          required: false
          schema:
            type: string
            format: date-time
          x-orum-error-invalid:
            known-error: invalid_start_time
        - name: end_time
          description: Filter results created before this time
          in: query
          required: false
          schema:
            type: string
            format: date-time
          x-orum-error-invalid:
            known-error: invalid_end_time
        - name: first_name
          in: query
          description: The first name to filter persons by (case-insensitive, exact match).
          required: false
          schema:
            type: string
        - name: last_name
          in: query
          description: The last name to filter persons by (case-insensitive, exact match).
          required: false
          schema:
            type: string
        - name: account_number
          in: query
          description: Filter by account number
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/UsBankAccountNumber'
          x-orum-error-invalid:
            known-error: invalid_account_number
        - name: id
          description: Filter results by the person id
          in: query
          required: false
          schema:
            type: string
            format: uuid
          x-orum-error-invalid:
            message: Orum ID is invalid. Pass in a valid uuid
            code: invalid_orum_id
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonsResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:persons
    put:
      tags:
        - Persons
      operationId: put-person-using-reference-id
      summary: Update a person by customer reference id
      description: Update a person object using its reference id.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPersonRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutPersonResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:persons
  /deliver/persons/{id}:
    get:
      tags:
        - Persons
      operationId: get-person
      summary: Get a person by id
      description: Get a person object.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          in: path
          description: Orum generated unique id for the person resource you are fetching.
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_person
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:persons
    put:
      tags:
        - Persons
      operationId: put-person
      summary: Update a person by id
      description: Update a person object by its id.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          in: path
          required: true
          description: Orum generated unique id for the person resource you are updating.
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_person
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPersonRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutPersonResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:persons
    patch:
      tags:
        - Persons
      operationId: patch-person
      summary: Partial update a person by id
      description: Update individual fields on person object.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          in: path
          required: true
          description: Orum generated unique id for the resource for the person resource you are updating.
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_person
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPersonRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:persons
    delete:
      tags:
        - Persons
      operationId: delete-person
      summary: Closes a person by id
      description: Close a person object so they are unable to transact.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          in: path
          required: true
          description: Orum generated unique id for the resource for the person resource you are updating.
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_person
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:persons
  /deliver/businesses:
    post:
      tags:
        - Businesses
      operationId: post-business
      summary: Create a business
      description: Create a business object to represent a business customer.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:businesses
    get:
      tags:
        - Businesses
      operationId: get-businesses
      summary: Get all businesses
      description: Get all business objects.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: index
          description: Index for paginated results
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
          x-orum-error-invalid:
            known-error: index
        - name: size
          description: Max number of results to return
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 500
          x-orum-error-invalid:
            known-error: size
        - name: customer_reference_id
          description: Filter by customer reference id
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/CustomerReferenceId'
        - name: status
          description: Filter by customer statuses (multiple allowed)
          in: query
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BusinessStatus'
          explode: true
          x-orum-error-invalid:
            known-error: invalid_business_status
        - name: start_time
          description: Filter results created at or after this time
          in: query
          required: false
          schema:
            type: string
            format: date-time
          x-orum-error-invalid:
            known-error: invalid_start_time
        - name: end_time
          description: Filter results created before this time
          in: query
          required: false
          schema:
            type: string
            format: date-time
          x-orum-error-invalid:
            known-error: invalid_end_time
        - name: legal_name
          description: Filter by legal name
          in: query
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/LegalName'
          x-orum-error-invalid:
            known-error: invalid_legal_name
        - name: account_number
          in: query
          description: Filter by account number
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/UsBankAccountNumber'
          x-orum-error-invalid:
            known-error: invalid_account_number
        - name: id
          description: Filter results by the business id
          in: query
          required: false
          schema:
            type: string
            format: uuid
          x-orum-error-invalid:
            message: Orum ID is invalid. Pass in a valid uuid
            code: invalid_orum_id
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessesResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:businesses
    put:
      tags:
        - Businesses
      operationId: put-business-using-reference-id
      summary: Update a business by reference id
      description: Update a business object using reference id.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutBusinessRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutBusinessResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:businesses
  /deliver/businesses/{id}:
    get:
      tags:
        - Businesses
      operationId: get-business
      summary: Get a business by id
      description: Get a business object.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          description: Orum generated unique id for the business you are fetching.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_business
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:businesses
    put:
      tags:
        - Businesses
      operationId: put-business
      summary: Update a business by id
      description: Update a business object by id.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          description: Orum generated unique id for the business you are updating.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_business
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutBusinessRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutBusinessResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:businesses
    patch:
      tags:
        - Businesses
      operationId: patch-business
      summary: Partial update a business by id
      description: Update individual fields on a business object.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          description: Orum generated unique id for the business you are updating.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_business
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBusinessRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:businesses
    delete:
      tags:
        - Businesses
      operationId: delete-business
      summary: Closes a business by id
      description: Close a business object so they are unable to transact.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          description: Orum generated unique id for the business you are updating.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_business
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:businesses
  /deliver/external/accounts:
    post:
      tags:
        - External Accounts
      operationId: post-external-account
      summary: Create an external account
      description: Create an external account object.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalAccountRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccountResponse'
        '400':
          description: duplicate external account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DuplicateAccountError'
        default:
          description: invalid or unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:external-accounts
    get:
      tags:
        - External Accounts
      operationId: get-external-accounts
      summary: Get all external accounts
      description: Get all external account objects.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: index
          description: Index for paginated results
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
          x-orum-error-invalid:
            known-error: index
        - name: size
          description: Max number of results to return
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 500
          x-orum-error-invalid:
            known-error: size
        - name: account_reference_id
          description: Filter by account reference id
          in: query
          required: false
          allowEmptyValue: true
          schema:
            $ref: '#/components/schemas/AccountReferenceId'
          x-orum-error-invalid:
            known-error: invalid_query_account_reference_id
        - name: customer_reference_id
          description: Filter by customer reference id
          in: query
          required: false
          allowEmptyValue: true
          schema:
            $ref: '#/components/schemas/CustomerReferenceId'
          x-orum-error-invalid:
            known-error: invalid_query_customer_reference_id
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccountsResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:external-accounts
    put:
      tags:
        - External Accounts
      operationId: put-external-account-using-reference-id
      summary: Update an external account by reference id
      description: Update an external account object using its reference id.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutExternalAccountRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccountResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:external-accounts
  /deliver/external/accounts/{id}:
    get:
      tags:
        - External Accounts
      operationId: get-external-account
      summary: Get an external account by id
      description: Get an external account object.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          in: path
          description: Orum generated unique id for the resource for the external account you are fetching.
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_external_account
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccountResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:external-accounts
    put:
      tags:
        - External Accounts
      operationId: put-external-account
      summary: Update an external account by id
      description: Update an external account object.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          description: Orum generated unique id for the resource for the external account you are updating.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_external_account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutExternalAccountRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccountResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:external-accounts
    patch:
      tags:
        - External Accounts
      operationId: patch-external-account
      summary: Partial update an external account by id
      description: Update individual fields on an external account object.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          description: Orum generated unique id for the resource for the external account you are updating.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_external_account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchExternalAccountRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccountResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:external-accounts
    delete:
      tags:
        - External Accounts
      operationId: delete-external-account
      summary: Closes an external account by id
      description: Close an external account object so they are unable to transact.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          description: Orum generated unique id for the resource for the external account you are updating.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_external_account
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccountResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:external-accounts
  /deliver/persons/{id}/external/accounts:
    get:
      tags:
        - External Accounts
      operationId: get-person-external-accounts
      summary: Get all external accounts for a specific person
      description: Get all external account objects, associated with a specific person
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          description: Orum generated unique id for the person you are requesting accounts for
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_person
        - name: index
          description: Index for paginated results
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
          x-orum-error-invalid:
            known-error: index
        - name: size
          description: Max number of results to return
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 500
          x-orum-error-invalid:
            known-error: size
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccountsResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:external-accounts
  /deliver/businesses/{id}/external/accounts:
    get:
      tags:
        - External Accounts
      operationId: get-business-external-accounts
      summary: Get all external accounts for a specific business
      description: Get all external account objects, associated with a specific business
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          description: Orum generated unique id for the business you are requesting accounts for
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_business
        - name: index
          description: Index for paginated results
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
          x-orum-error-invalid:
            known-error: index
        - name: size
          description: Max number of results to return
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 500
          x-orum-error-invalid:
            known-error: size
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccountsResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:external-accounts
  /deliver/cards:
    post:
      tags:
        - Cards
      operationId: post-card
      summary: Create a card
      description: Create a card object.
      servers:
        - url: https://vault.api-sandbox.orum.io
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:cards
    get:
      tags:
        - Cards
      operationId: get-cards
      summary: Get all cards
      description: Get all cards by filter.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: index
          description: Index for paginated results
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
          x-orum-error-invalid:
            known-error: index
        - name: size
          description: Max number of results to return
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 500
          x-orum-error-invalid:
            known-error: size
        - name: customer_reference_id
          description: Filter by customer reference id
          in: query
          required: false
          allowEmptyValue: true
          schema:
            $ref: '#/components/schemas/CustomerReferenceId'
          x-orum-error-invalid:
            known-error: invalid_query_customer_reference_id
        - name: status
          description: Filter by card statuses (multiple allowed)
          in: query
          required: false
          explode: true
          schema:
            $ref: '#/components/schemas/CardStatusFilter'
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardsResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:cards
  /deliver/cards/{id}:
    get:
      tags:
        - Cards
      operationId: get-card
      summary: Get a card by id
      description: Get a card object by id.
      parameters:
        - name: id
          in: path
          description: Orum generated unique id for the resource for the card you are fetching.
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_card
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:cards
    delete:
      tags:
        - Cards
      operationId: delete-card
      summary: Closes a card by id
      description: Close a card object so they are unable to transact.
      parameters:
        - name: id
          in: path
          description: Orum generated unique id for the resource for the card you are fetching.
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_card
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:cards
  /deliver/subledgers:
    post:
      tags:
        - Subledgers
      operationId: post-subledger
      summary: Create a subledger
      description: Create a subledger object to represent a separate pool of funds attached to an existing customer
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubledgerRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubledgerResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:subledgers
    get:
      tags:
        - Subledgers
      operationId: get-subledgers
      summary: Get all subledgers
      description: Get all subledger objects.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: index
          description: Index for paginated results
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
          x-orum-error-invalid:
            known-error: index
        - name: size
          description: Max number of results to return
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 500
          x-orum-error-invalid:
            known-error: size
        - name: subledger_reference_id
          description: Filter results by subledger reference id
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SubledgerReferenceId'
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubledgersResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:subledgers
  /deliver/subledgers/{id}:
    get:
      tags:
        - Subledgers
      operationId: get-subledger
      summary: Get a subledger
      description: Get a subledger by id
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          in: path
          required: true
          description: Subledger ID
          schema:
            type: string
            format: uuid
            description: The unique identifier for the subledger in UUID format.
          x-orum-error-invalid:
            known-error: unknown_id_subledger
      responses:
        '200':
          description: successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubledgerResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:subledgers
  /deliver/schedules:
    post:
      tags:
        - Schedules
      operationId: post-schedule
      summary: Create a schedule
      description: Schedule recurring transfers.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:schedules
    get:
      tags:
        - Schedules
      operationId: get-schedules
      summary: Get all schedules
      description: Get all schedule objects.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: index
          description: Index for paginated results
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
          x-orum-error-invalid:
            known-error: index
        - name: size
          description: Max number of results to return
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 500
          x-orum-error-invalid:
            known-error: size
        - name: status
          description: Filter results by schedule status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ScheduleStatus'
          x-orum-error-invalid:
            message: Invalid schedule status. It must be either active or inactive.
            code: invalid_schedule_status
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchedulesResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:schedules
  /deliver/schedules/rrule:
    post:
      tags:
        - Schedules
      operationId: post-validate-rrule
      summary: Validate and parse RRULE string
      description: Validates an RRULE string and returns its human readable form along with next occurrence dates.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RruleValidationRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RruleValidationResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:schedules
  /deliver/schedules/{id}:
    get:
      tags:
        - Schedules
      operationId: get-schedule
      summary: Get schedule by id
      description: Retrieve a single schedule
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          description: Orum generated unique id for the schedule you are fetching.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: invalid_schedule_id
          x-orum-error-missing:
            known-error: missing_schedule_id
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:schedules
    delete:
      tags:
        - Schedules
      operationId: delete-schedule
      summary: delete a schedule that matches the id
      description: Delete a single schedule
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          description: Orum generated unique id for the schedule you are deleting.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: invalid_schedule_id
          x-orum-error-missing:
            known-error: missing_schedule_id
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:schedules
  /deliver/transfers:
    post:
      tags:
        - Transfers
      operationId: post-transfer
      summary: Create a transfer
      description: Initiate a transfer between a source party and destination party.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:transfers
    get:
      tags:
        - Transfers
      operationId: get-transfers
      summary: Get all transfers
      description: Get all transfer objects.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: index
          description: Index for paginated results
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
          x-orum-error-invalid:
            known-error: index
        - name: size
          description: Max number of results to return
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 500
          x-orum-error-invalid:
            known-error: size
        - name: transfer_reference_id
          description: Filter results by transfer reference id
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransferReferenceId'
        - name: status
          description: Filter results by transfer status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/TransferStatus'
          x-orum-error-invalid:
            known-error: invalid_status
        - name: transfer_group_id
          description: Filter results by transfer group id
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/OrumId'
        - name: schedule_id
          description: Filter results by schedule id
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: invalid_schedule_id
        - name: subledger_reference_id
          description: Filter results by subledger reference id
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SubledgerReferenceId'
          x-orum-error-invalid:
            known-error: invalid_subledger_reference_id
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransfersResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:transfers
  /deliver/transfers/{id}:
    get:
      tags:
        - Transfers
      operationId: get-transfer
      summary: Get a transfer by id
      description: Get a transfer object.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          description: Orum generated unique id for the transfer you are fetching.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_transfer
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:transfers
    patch:
      tags:
        - Transfers
      operationId: patch-transfer-metadata
      summary: Update transfer metadata by id
      description: Update the metadata on a transfer.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          description: Orum generated unique id for the transfer you are fetching.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_transfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferPatchMetadataRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:transfers
  /deliver/transfers/{id}/cancel:
    post:
      tags:
        - Transfers
      operationId: post-transfer-cancel
      summary: Cancel a transfer by id
      description: Initiates a transfer cancellation request if the transfer is eligible.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          description: Orum generated unique id for the transfer you are canceling.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_transfer
      responses:
        '202':
          description: 202 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferCancelResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:transfers
  /deliver/transfers/{id}/history:
    get:
      tags:
        - Transfers
      operationId: get-transfer-history
      summary: Get transfer history by id
      description: Get the history of status changes for a transfer.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          description: Orum generated unique id for the transfer.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id_transfer
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferHistoryResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:transfers
  /deliver/eligibility:
    post:
      tags:
        - Eligibility
      operationId: post-eligibility
      summary: Check if a routing number is eligible for RTP or FedNow
      description: Returns routing number eligibility
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EligibilityRequest'
        required: true
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EligibilityResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:routing-number-eligibility
    get:
      tags:
        - Eligibility
      operationId: get-eligibility
      summary: A list of RTP and FedNow Eligible Routing Numbers
      description: Returns all routing numbers that are eligible for RTP and FedNow
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEligibilityResponse'
        '401':
          description: unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:routing-number-eligibility
  /deliver/transfer-groups:
    post:
      tags:
        - Transfer Groups
      operationId: post-transfer-group
      summary: Create a Transfer Group
      description: Create a Transfer Group object.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferGroupRequest'
        required: true
      responses:
        '200':
          description: successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferGroupResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:transfer-groups
    get:
      tags:
        - Transfer Groups
      operationId: get-transfer-groups
      summary: Get all Transfer Groups
      description: Get all Transfer Group objects, sorted by most recently created transfer groups
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: index
          description: Index for paginated results
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          x-orum-error-invalid:
            known-error: index
        - name: size
          description: Max number of results to return
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 500
            default: 100
          x-orum-error-invalid:
            known-error: size
        - name: transfer_group_reference_id
          description: Filter results by reference id.
          in: query
          required: false
          schema:
            type: string
          x-orum-error-missing:
            known-error: invalid_transfer_group_reference_id
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferGroupsResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:transfer-groups
  /deliver/transfer-groups/{id}:
    get:
      tags:
        - Transfer Groups
      operationId: get-transfer-group
      summary: Get a Transfer Group
      description: Get a Transfer Group object by ID
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          in: path
          required: true
          description: Transfer Group ID
          schema:
            type: string
            format: uuid
            description: The unique identifier for the transfer group in UUID format.
          x-orum-error-invalid:
            known-error: unknown_id_transfer_group
      responses:
        '200':
          description: successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferGroupResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:transfer-groups
  /deliver/booktransfers:
    post:
      tags:
        - Book Transfers
      operationId: post-book-transfer
      summary: Create a book transfer
      description: Create a book transfer
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookTransferRequest'
        required: true
      responses:
        '200':
          description: successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookTransferResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:booktransfers
    get:
      tags:
        - Book Transfers
      operationId: get-book-transfers
      summary: Get all book transfers
      description: Get all book transfer objects.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: index
          description: Index for paginated results
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
          x-orum-error-invalid:
            known-error: index
        - name: size
          description: Max number of results to return
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 500
          x-orum-error-invalid:
            known-error: size
        - name: book_transfer_reference_id
          description: Filter results by book transfer reference id
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/BookTransferReferenceId'
        - name: status
          description: Filter results by book transfer status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/BookTransferStatus'
          x-orum-error-invalid:
            known-error: invalid_status
        - name: subledger_reference_id
          description: Filter results by subledger reference id
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SubledgerReferenceId'
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookTransfersResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:booktransfers
  /deliver/booktransfers/{id}:
    get:
      tags:
        - Book Transfers
      operationId: get-book-transfer
      summary: Get a book transfer
      description: Get a book transfer by id
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          in: path
          required: true
          description: Book Transfer ID
          schema:
            type: string
            format: uuid
            description: The unique identifier for the book transfer in UUID format.
          x-orum-error-invalid:
            known-error: unknown_id_book_transfer
      responses:
        '200':
          description: successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookTransferResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:booktransfers
  /deliver/balance:
    get:
      tags:
        - Balance
      operationId: get-balance
      summary: Get balance
      description: Get balance object.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      responses:
        '200':
          description: The requested enterprise account balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
        '401':
          description: unauthorized request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:balances
  /deliver/balance/subledgers/{id}:
    get:
      tags:
        - Balance
      operationId: get-subledger-balance
      summary: Get subledger account balance
      description: Get subledger account balance object.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          x-orum-error-invalid:
            known-error: unknown_id_subledger
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      responses:
        '200':
          description: The requested subledger account balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubledgerBalanceResponse'
        '401':
          description: unauthorized request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:balances
  /deliver/balance/subledgers:
    get:
      tags:
        - Balance
      operationId: get-all-subledger-balance
      summary: Gets all subledger account balances
      description: Gets all subledger account balance object.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: index
          description: Index for paginated results
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
          x-orum-error-invalid:
            known-error: index
        - name: size
          description: Max number of results to return
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 500
          x-orum-error-invalid:
            known-error: size
      responses:
        '200':
          description: The requested subledger account balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubledgerBalancesResponse'
        '401':
          description: unauthorized request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:balances
  /verify/accounts:
    post:
      tags:
        - Verify
      operationId: post-verify-accounts
      summary: Post verify accounts
      description: Request account verification.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyAccountRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyAccountResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:verify-accounts
    get:
      tags:
        - Verify
      operationId: get-verify-accounts
      summary: Get all verify accounts
      description: Get all verify accounts, sorted by most recently created.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: index
          description: Index for paginated results
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
          x-orum-error-invalid:
            known-error: index
        - name: size
          description: Max number of results to return
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 500
          x-orum-error-invalid:
            known-error: size
        - name: id
          description: Filter results by the account id
          in: query
          required: false
          schema:
            type: string
            format: uuid
          x-orum-error-invalid:
            message: Account ID is invalid. Pass in a valid uuid
            code: invalid_account_id
        - name: start_time
          description: Filter results created at or after this time
          in: query
          required: false
          schema:
            type: string
            format: date-time
          x-orum-error-invalid:
            message: Start time is invalid. Pass in a valid date-time that conforms to the RFC3339 format.
            code: invalid_start_time
        - name: end_time
          description: Filter results created before this time
          in: query
          required: false
          schema:
            type: string
            format: date-time
          x-orum-error-invalid:
            message: End time is invalid. Pass in a valid date-time that conforms to the RFC3339 format.
            code: invalid_end_time
        - name: account_number
          description: Filter results by account number
          in: query
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/UsBankAccountNumber'
          x-orum-error-invalid:
            message: Account Number is invalid. Please enter a valid US bank account number.
            code: invalid_account_number
        - name: verification_status
          description: Filter results by account status
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/VerificationStatus'
            x-orum-error-invalid:
              message: Verification Status is invalid. Please use a valid verification status.
              code: invalid_verification_status
        - name: ownership_status
          description: Filter results by account ownership status
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/OwnershipStatus'
            x-orum-error-invalid:
              message: Ownership Status is invalid. Please use a valid ownership status.
              code: invalid_ownership_status
        - name: control_status
          description: Filter results by account control status
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/ControlStatus'
            x-orum-error-invalid:
              message: Control Status is invalid. Please use a valid control status.
              code: invalid_control_status
        - name: debit_status
          description: Filter results by account debit status
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/DebitStatus'
            x-orum-error-invalid:
              message: Debit Status is invalid. Please use a valid debit status.
              code: invalid_debit_status
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyAccountsResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:verify-accounts
  /verify/accounts/{id}:
    get:
      tags:
        - Verify
      operationId: get-verify-account
      summary: Get a verify account
      description: Get a single verify account.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          in: path
          description: Orum generated unique id for the account you are fetching.
          required: true
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyAccountResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:verify-accounts
  /verify/accounts/{id}/control:
    post:
      tags:
        - Verify
      operationId: post-verify-account-control
      summary: Verify account control
      description: Verify control for a single verify account.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          in: path
          required: true
          description: Orum generated unique id for the account you are verifying.
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyAccountControlRequest'
        required: true
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyAccountResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ControlErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: too many requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:verify-accounts
  /verify/accounts/{id}/debits:
    post:
      tags:
        - Verify
      operationId: post-verify-account-debit
      summary: Verify account debit status
      description: Verify debit status for a single verify account.
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
        - name: id
          in: path
          required: true
          description: Orum generated unique id for the account you are verifying.
          schema:
            $ref: '#/components/schemas/OrumId'
          x-orum-error-invalid:
            known-error: unknown_id
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyAccountResponse'
        '400':
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: too many requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:verify-accounts
  /webhooks/configurations:
    post:
      tags:
        - Configure webhooks
      operationId: post-webhook-configuration
      summary: Create webhook configuration
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationRequest'
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationResponse'
        '401':
          description: unauthorized request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:webhook-configurations
    get:
      tags:
        - Configure webhooks
      operationId: get-webhook-configurations
      summary: Retrieve list of webhook configurations
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationsResponse'
        '401':
          description: unauthorized request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:webhook-configurations
  /webhooks/configurations/{id}:
    put:
      tags:
        - Configure webhooks
      operationId: put-webhook-configurations
      summary: Update webhook configuration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: Orum generated unique id for the webhook resource you are updating.
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationRequest'
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationResponse'
        '401':
          description: unauthorized request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:webhook-configurations
    delete:
      tags:
        - Configure webhooks
      operationId: delete-webhook-configurations
      summary: Delete webhook configuration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: Orum generated unique id for the webhook resource you are deleting.
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      responses:
        '204':
          description: 204 response.
        '401':
          description: unauthorized request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:webhook-configurations
  /webhooks/secret:
    post:
      tags:
        - Secure webhooks
      operationId: post-webhook-secret
      summary: Initialize public-private key pair
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretResponse'
        '401':
          description: unauthorized request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - write:webhook-secret
    get:
      tags:
        - Secure webhooks
      operationId: get-webhook-secret
      summary: Retrieve public-private key pair
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      responses:
        '200':
          description: 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretResponse'
        '401':
          description: unauthorized request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - read:webhook-secret
  /webhooks/invoke:
    post:
      operationId: post-invoke
      tags:
        - Trigger webhooks
      summary: Invoke a test webhook event
      parameters:
        - name: Orum-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/OrumVersion'
          x-orum-error-invalid:
            known-error: version_invalid
          x-orum-error-missing:
            known-error: version_missing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PersonTestRequest'
                - $ref: '#/components/schemas/BusinessTestRequest'
                - $ref: '#/components/schemas/ExternalAccountTestRequest'
                - $ref: '#/components/schemas/TransferTestRequest'
                - $ref: '#/components/schemas/VerifyAccountTestRequest'
                - $ref: '#/components/schemas/SubledgerTestRequest'
                - $ref: '#/components/schemas/BookTransferTestRequest'
      responses:
        '201':
          description: 201 response.
        '401':
          description: unauthorized request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - oauth2:
            - invoke:webhook
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api-sandbox.orum.io/oauth/token
          scopes:
            read:persons: Read persons
            write:persons: Write persons
            read:businesses: Read businesses
            write:businesses: Write businesses
            read:external-accounts: Read external accounts
            write:external-accounts: Write external accounts
            read:cards: Read cards
            write:cards: Write cards
            read:transfers: Read transfers
            write:transfers: Write transfers
            read:transfer-groups: Read transfer groups
            write:transfer-groups: Write transfer groups
            read:schedules: Read schedules
            write:schedules: Write schedules
            read:routing-number-eligibility: Read routing number eligibility
            read:balances: Read balances
            read:reports: Read reports
            write:reports: Write reports
            read:booktransfers: Read book transfers
            write:booktransfers: Write book transfers
            read:subledgers: Read subledgers
            write:subledgers: Write subledgers
            read:verify-accounts: Read verify accounts
            write:verify-accounts: Write verify accounts
            read:webhook-configurations: Read webhook configurations
            write:webhook-configurations: Write webhook configurations
            read:webhook-secret: Read webhook secret
            write:webhook-secret: Write webhook secret
            invoke:webhook: Invoke webhook
  schemas:
    ErrorResponse:
      type: object
      properties:
        error_code:
          type: string
        message:
          type: string
        details:
          type: object
          description: additional details about the error.
          nullable: true
      required:
        - error_code
        - message
    DuplicateAccountError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            error_code:
              type: string
              enum:
                - duplicate_account_details
            details:
              type: object
              nullable: true
              description: fields for duplicate account case.
              properties:
                customer_resource_type:
                  type: string
                  description: The type of customer resource that caused the error.
                  enum:
                    - person
                    - business
                customer_reference_id:
                  type: string
                  description: The attempted customer_reference_id that already exists with this account.
                customer_resource_id:
                  $ref: '#/components/schemas/OrumId'
    OrumId:
      type: string
      description: Orum generated unique id for the resource.
      format: uuid
    CreatedAt:
      type: string
      description: Timestamp when the resource was created.
      format: date-time
    OauthTokenBody:
      type: object
      required:
        - client_id
        - client_secret
      properties:
        client_id:
          type: string
          description: ID returned when generating API Credentials.
          x-orum-error-missing:
            message: client_id is required
            code: missing_client_id
          x-orum-error-invalid:
            message: client_id must be a string
            code: invalid_client_id
            status: '400'
        client_secret:
          type: string
          description: Secret returned when generating API Credentials.
          x-orum-error-missing:
            message: client_secret is required
            code: missing_client_secret
          x-orum-error-invalid:
            message: client_secret must be a string
            code: invalid_client_secret
            status: '400'
    OauthTokenResponse:
      title: OauthTokenResponse
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          description: Short-lived auth (access) token that you will pass in the Authorization header of all Deliver and Verify calls.
        token_type:
          type: string
          description: The type of token returned. This will always be "Bearer".
        expires_in:
          type: number
          description: The time in seconds until the token expires.
    BalanceReportResponse:
      title: BalanceReportResponse
      type: object
      required:
        - balance_statement_summary_report
      properties:
        balance_statement_summary_report:
          $ref: '#/components/schemas/BalanceReportResponseBase'
    BalanceReportResponseBase:
      title: BalanceReportResponseBase
      type: object
      required:
        - start_time
        - end_time
        - account_balances
        - ledger_entry_balances
      properties:
        start_time:
          $ref: '#/components/schemas/StartTime'
        end_time:
          $ref: '#/components/schemas/EndTime'
        account_balances:
          $ref: '#/components/schemas/ReportAccountBalances'
        ledger_entry_balances:
          type: array
          items:
            $ref: '#/components/schemas/LedgerEntryBalance'
    StartTime:
      type: string
      description: The start time of the report range in ISO-8601 format.
      format: date-time
      example: '2023-07-13T00:00:00.000Z'
    EndTime:
      type: string
      description: The end time of the report range in ISO-8601 format.
      format: date-time
      example: '2023-07-13T00:00:00.000Z'
    ReportAccountBalances:
      title: ReportAccountBalances
      type: object
      description: Open and close balances for an account.
      required:
        - opening
        - closing
      properties:
        opening:
          $ref: '#/components/schemas/ReportBalanceAmounts'
        closing:
          $ref: '#/components/schemas/ReportBalanceAmounts'
    ReportBalanceAmounts:
      type: object
      description: Pending and available amounts.
      required:
        - pending_amount
        - available_amount
      properties:
        pending_amount:
          $ref: '#/components/schemas/Amount'
        available_amount:
          $ref: '#/components/schemas/Amount'
    LedgerEntryBalance:
      type: object
      description: Ledger entries with type and debit/credit balances.
      required:
        - type
        - debit
        - credit
      properties:
        type:
          $ref: '#/components/schemas/LedgerEntryBalanceType'
        debit:
          $ref: '#/components/schemas/Amount'
        credit:
          $ref: '#/components/schemas/Amount'
    LedgerEntryBalanceType:
      type: string
      description: Type of ledger entry.
      enum:
        - rtp
        - ach
        - sdach
        - ach_return
        - wire
        - wire_return
        - outbound_funds
        - inbound_funds
        - balance_top_up
    Amount:
      type: integer
      description: Amount in integral cents.
      format: int64
      example: 4295
    ReconReportRequest:
      title: ReconReportRequest
      type: object
      required:
        - start_time
        - end_time
      properties:
        start_time:
          allOf:
            - $ref: '#/components/schemas/StartTime'
          x-orum-error-missing:
            message: start_time is required
            code: missing_start_time
          x-orum-error-invalid:
            message: start_time must be a valid timestamp
            code: invalid_start_time
        end_time:
          allOf:
            - $ref: '#/components/schemas/EndTime'
          x-orum-error-missing:
            message: end_time is required
            code: missing_end_time
          x-orum-error-invalid:
            message: end_time must be a valid timestamp
            code: invalid_end_time
        report_scope:
          allOf:
            - $ref: '#/components/schemas/ReportScope'
          x-orum-error-invalid:
            message: 'report_scope must be one of the following: total, enterprise, subledger'
            code: invalid_report_scope
        subledger_reference_id:
          allOf:
            - $ref: '#/components/schemas/SubledgerReferenceId'
          x-orum-error-invalid:
            message: subledger_reference_id must be a valid string
            code: invalid_subledger_reference_id
    ReconReportResponse:
      title: ReconReportResponse
      type: object
      required:
        - report
      properties:
        report:
          allOf:
            - $ref: '#/components/schemas/ReportResponseBase'
    ReportsResponse:
      title: ReportsResponse
      type: object
      required:
        - reports
      properties:
        reports:
          type: array
          description: A collection of reports.
          items:
            $ref: '#/components/schemas/ReportResponseBase'
    ReportResponseBase:
      title: ReportResponseBase
      type: object
      required:
        - id
        - created_at
        - start_time
        - end_time
        - status
        - report_scope
      properties:
        id:
          $ref: '#/components/schemas/OrumId'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        start_time:
          $ref: '#/components/schemas/StartTime'
        end_time:
          $ref: '#/components/schemas/EndTime'
        status:
          $ref: '#/components/schemas/ReportStatusResponse'
        report_scope:
          $ref: '#/components/schemas/ReportScope'
        subledger_reference_id:
          $ref: '#/components/schemas/SubledgerReferenceId'
    ReportStatusResponse:
      title: ReportStatus
      type: string
      description: Status of the report.
      enum:
        - created
        - pending
        - completed
        - failed
    ReportScope:
      title: ReportScope
      type: string
      description: The scope of the report.
      enum:
        - total
        - enterprise
        - subledger
      default: total
    Metadata:
      type: object
      description: Additional data you would like to provide on the resource. The field supports valid JSON of up to 5 key-value pairs with a maximum of 20 characters for the key and 50 characters for the value. Do not include any sensitive information.
    MetadataPut:
      type: object
      description: Additional data you would like to provide on the resource. The field supports valid JSON of up to 5 key-value pairs with a maximum of 20 characters for the key and 50 characters for the value. Do not include any sensitive information.
    PersonRequest:
      title: PersonRequest
      type: object
      required:
        - customer_reference_id
        - first_name
        - last_name
      properties:
        customer_reference_id:
          allOf:
            - $ref: '#/components/schemas/CustomerReferenceId'
          x-orum-error-missing:
            known-error: missing_customer_reference_id
          x-orum-error-invalid:
            known-error: invalid_customer_reference_id
        first_name:
          allOf:
            - $ref: '#/components/schemas/FirstName'
          x-orum-error-invalid:
            known-error: invalid_first_name
          x-orum-error-missing:
            known-error: missing_first_name
        middle_name:
          allOf:
            - $ref: '#/components/schemas/MiddleName'
          type: string
          nullable: true
          x-orum-error-invalid:
            known-error: invalid_middle_name
        last_name:
          allOf:
            - $ref: '#/components/schemas/LastName'
          x-orum-error-invalid:
            known-error: invalid_last_name
          x-orum-error-missing:
            known-error: missing_last_name
        date_of_birth:
          allOf:
            - $ref: '#/components/schemas/DateOfBirth'
          type: string
          nullable: true
          x-orum-error-invalid:
            message: Date of birth is invalid. Valid format is YYYY-MM-DD.
            code: invalid_date_of_birth
        social_security_number:
          allOf:
            - $ref: '#/components/schemas/SocialSecurityNumber'
          x-orum-error-invalid:
            message: Social Security Number is invalid.
            code: invalid_social_security_number
        addresses:
          type: array
          nullable: true
          description: 'Address information for the person. Note: This field is required for payouts, deposits, or account-to-account transfers.'
          items:
            $ref: '#/components/schemas/PersonPostalAddressRequest'
          minItems: 1
          maxItems: 1
          x-orum-error-invalid:
            message: Addresses array is invalid. Pass an array containing an address object.
            code: invalid_addresses
        contacts:
          type: array
          nullable: true
          description: Optional list of contact information for the person. If object is present, either phone and/or email contact types are accepted.  A maximum of three persons or businesses can have the same phone number.
          items:
            $ref: '#/components/schemas/ContactRequestPerson'
          minItems: 1
          maxItems: 2
          x-orum-error-invalid:
            message: Contacts array is invalid. Pass an array of contact information containing phone and/or email contact types.
            code: invalid_contacts
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          type: object
          nullable: true
          x-orum-error-invalid:
            message: Metadata must be a valid JSON object.
            code: invalid_metadata
    PutPersonRequest:
      title: PutPersonRequest
      type: object
      allOf:
        - $ref: '#/components/schemas/PersonRequest'
        - type: object
          properties:
            metadata:
              allOf:
                - $ref: '#/components/schemas/MetadataPut'
              type: object
              nullable: true
              x-orum-error-invalid:
                message: Metadata must be a valid JSON object.
                code: invalid_metadata
    PatchPersonRequest:
      title: PatchPersonRequest
      type: object
      properties:
        first_name:
          allOf:
            - $ref: '#/components/schemas/FirstName'
          type: string
          nullable: true
          x-orum-error-invalid:
            known-error: invalid_first_name
        middle_name:
          allOf:
            - $ref: '#/components/schemas/MiddleName'
          type: string
          nullable: true
          x-orum-error-invalid:
            known-error: invalid_middle_name
        last_name:
          allOf:
            - $ref: '#/components/schemas/LastName'
          type: string
          nullable: true
          x-orum-error-invalid:
            known-error: invalid_last_name
        date_of_birth:
          allOf:
            - $ref: '#/components/schemas/DateOfBirth'
          type: string
          nullable: true
          x-orum-error-invalid:
            message: Date of birth is invalid. Valid format is YYYY-MM-DD.
            code: invalid_date_of_birth
        social_security_number:
          allOf:
            - $ref: '#/components/schemas/SocialSecurityNumber'
          type: string
          nullable: true
        addresses:
          type: array
          description: 'Address information for the person. "type" is required if you are updating other address fields. Note: This field is required for payouts, deposits, or account-to-account transfers.'
          items:
            $ref: '#/components/schemas/PersonPatchPostalAddressRequest'
          maxItems: 1
          nullable: true
        contacts:
          type: array
          description: Optional list of contact information for the person. If object is present, either phone and/or email contact types are accepted.  A maximum of three persons or businesses can have the same phone number.
          items:
            $ref: '#/components/schemas/PatchContactRequestPerson'
          minItems: 0
          maxItems: 2
          nullable: true
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          type: object
          nullable: true
          x-orum-error-invalid:
            message: Metadata must be a valid JSON object.
            code: invalid_metadata
    PersonResponseBase:
      type: object
      required:
        - id
        - customer_reference_id
        - first_name
        - last_name
        - status
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/OrumId'
        customer_reference_id:
          $ref: '#/components/schemas/CustomerReferenceId'
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        date_of_birth:
          type: string
          description: 'Date of birth in YYYY-MM-DD format. Note: This field is required for payouts, deposits, or account-to-account transfers. Age must be less than 100 years and greater than 18 years to be verified.'
        status:
          $ref: '#/components/schemas/PersonStatus'
        addresses:
          type: array
          description: 'Address information for the person. Note: This field is required for payouts, deposits, or account-to-account transfers.'
          items:
            $ref: '#/components/schemas/PostalAddressResponse'
          minItems: 1
          maxItems: 1
        contacts:
          type: array
          description: List of contact information for the person.
          items:
            $ref: '#/components/schemas/ContactResponsePerson'
          minItems: 1
          maxItems: 2
        status_reasons:
          type: array
          description: Array that explains why the person failed verification.
          items:
            $ref: '#/components/schemas/StatusReason'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        closed_at:
          $ref: '#/components/schemas/ClosedAt'
        metadata:
          type: object
          description: Additional data you would like to provide on the resource. The field supports valid JSON of up to 5 key-value pairs with a maximum of 20 characters for the key and 50 characters for the value. Do not include any sensitive information.
    PutPersonResponseBase:
      title: PutPersonResponseBase
      allOf:
        - $ref: '#/components/schemas/PersonResponseBase'
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/MetadataPut'
    PersonResponse:
      title: PersonResponse
      type: object
      required:
        - person
      properties:
        person:
          allOf:
            - $ref: '#/components/schemas/PersonResponseBase'
    PutPersonResponse:
      title: PutPersonResponse
      type: object
      required:
        - person
      properties:
        person:
          $ref: '#/components/schemas/PutPersonResponseBase'
    PersonsResponse:
      title: PersonsResponse
      type: object
      required:
        - persons
      properties:
        persons:
          type: array
          description: List of person objects.
          items:
            allOf:
              - $ref: '#/components/schemas/PersonResponseBase'
    PersonStatus:
      title: PersonStatus
      type: string
      description: Status of person in Orum system.
      enum:
        - created
        - verified
        - rejected
        - restricted
        - closed
    SubledgerStatus:
      title: SubledgerStatus
      type: string
      description: Status of subledger in Orum system.
      enum:
        - created
    PersonPostalAddressRequest:
      title: PersonPostalAddressRequest
      type: object
      required:
        - type
        - address1
        - city
        - state
        - country
        - zip5
      description: Address.
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/AddressTypePerson'
          x-orum-error-invalid:
            message: Address type is invalid. Valid type for person is "home".
            code: invalid_addresses_type
          x-orum-error-missing:
            message: Address type is required. Pass type "home" for a person resource.
            code: missing_addresses_type
        address1:
          allOf:
            - $ref: '#/components/schemas/Address1'
          x-orum-error-invalid:
            known-error: invalid_address1
          x-orum-error-missing:
            message: Address1 is required.
            code: missing_address1
        address2:
          allOf:
            - $ref: '#/components/schemas/Address2'
          x-orum-error-invalid:
            known-error: invalid_address2
        city:
          allOf:
            - $ref: '#/components/schemas/City'
          x-orum-error-invalid:
            known-error: invalid_city
          x-orum-error-missing:
            known-error: missing_city
        state:
          allOf:
            - $ref: '#/components/schemas/State'
          x-orum-error-invalid:
            known-error: invalid_state
          x-orum-error-missing:
            known-error: missing_state
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
          x-orum-error-invalid:
            known-error: invalid_country
          x-orum-error-missing:
            known-error: missing_country
        zip5:
          allOf:
            - $ref: '#/components/schemas/Zip5'
          x-orum-error-invalid:
            known-error: invalid_zip5
          x-orum-error-missing:
            known-error: missing_zip5
    PersonPatchPostalAddressRequest:
      title: PersonPatchPostalAddressRequest
      type: object
      required:
        - type
      description: Address.
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/AddressTypePerson'
          x-orum-error-invalid:
            message: Address type is invalid. Valid type for person is "home".
            code: invalid_addresses_type
        address1:
          $ref: '#/components/schemas/Address1'
        address2:
          $ref: '#/components/schemas/Address2'
        city:
          $ref: '#/components/schemas/City'
        state:
          allOf:
            - $ref: '#/components/schemas/State'
          x-orum-error-invalid:
            known-error: invalid_state
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
          x-orum-error-invalid:
            known-error: invalid_country
        zip5:
          allOf:
            - $ref: '#/components/schemas/Zip5'
          x-orum-error-invalid:
            known-error: invalid_zip5
    BusinessPatchPostalAddressRequest:
      title: BusinessPatchPostalAddressRequest
      type: object
      required:
        - type
      description: Address.
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/AddressTypeBusiness'
          x-orum-error-invalid:
            known-error: invalid_addresses_type
          x-orum-error-missing:
            known-error: missing_addresses_type
        address1:
          allOf:
            - $ref: '#/components/schemas/Address1'
          x-orum-error-invalid:
            known-error: invalid_address1
        address2:
          allOf:
            - $ref: '#/components/schemas/Address2'
          x-orum-error-invalid:
            known-error: invalid_address2
        city:
          allOf:
            - $ref: '#/components/schemas/City'
          x-orum-error-invalid:
            known-error: invalid_city
        state:
          allOf:
            - $ref: '#/components/schemas/State'
          x-orum-error-invalid:
            known-error: invalid_state
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
          x-orum-error-invalid:
            known-error: invalid_country
        zip5:
          allOf:
            - $ref: '#/components/schemas/Zip5'
          x-orum-error-invalid:
            known-error: invalid_zip
    BusinessPostalAddressRequest:
      title: BusinessPostalAddressRequest
      type: object
      required:
        - type
        - address1
        - city
        - state
        - country
        - zip5
      description: Address.
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/AddressTypeBusiness'
          x-orum-error-invalid:
            known-error: invalid_addresses_type
          x-orum-error-missing:
            known-error: missing_addresses_type
        address1:
          allOf:
            - $ref: '#/components/schemas/Address1'
          x-orum-error-invalid:
            known-error: invalid_address1
          x-orum-error-missing:
            message: Address1 is required.
            code: missing_address1
        address2:
          allOf:
            - $ref: '#/components/schemas/Address2'
          x-orum-error-invalid:
            known-error: invalid_address2
        city:
          allOf:
            - $ref: '#/components/schemas/City'
          x-orum-error-invalid:
            known-error: invalid_city
          x-orum-error-missing:
            known-error: missing_city
        state:
          allOf:
            - $ref: '#/components/schemas/State'
          x-orum-error-invalid:
            known-error: invalid_state
          x-orum-error-missing:
            known-error: missing_state
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
          x-orum-error-invalid:
            known-error: invalid_country
          x-orum-error-missing:
            known-error: missing_country
        zip5:
          allOf:
            - $ref: '#/components/schemas/Zip5'
          x-orum-error-invalid:
            known-error: invalid_zip5
          x-orum-error-missing:
            known-error: missing_zip5
    ContactRequestPerson:
      allOf:
        - $ref: '#/components/schemas/ContactPostBasePerson'
        - type: object
          required:
            - value
    PatchContactRequestPerson:
      allOf:
        - $ref: '#/components/schemas/ContactBasePerson'
    ContactPostBasePerson:
      title: ContactBasePerson
      required:
        - type
        - value
      description: Contact information.
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/ContactTypePerson'
          x-orum-error-invalid:
            message: Contact type is invalid. Valid contact type for person is "email" or "phone".
            code: invalid_contacts_type
          x-orum-error-missing:
            message: Type field is required. Valid types are "email", or "phone".
            code: missing_contacts_type
        value:
          type: string
          description: Email or phone number.
          maxLength: 255
          x-orum-error-invalid:
            message: Value for contact type is invalid. Pass a string value.
            code: invalid_contacts_value
          x-orum-error-missing:
            message: 'Value for contact type is missing. For type "phone", pass a valid 10-digit US phone number. For type "email", pass a valid email. Example: hello@orum.io'
            code: missing_contacts_value
    ContactBasePerson:
      title: ContactBasePerson
      required:
        - type
      description: Contact information.
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/ContactTypePerson'
          x-orum-error-invalid:
            message: Contact type is invalid. Valid contact type for person is "email" or "phone".
            code: invalid_contacts_type
          x-orum-error-missing:
            message: Type field is required. Valid types are "email", or "phone".
            code: missing_contacts_type
        value:
          type: string
          description: Email or phone number.
          maxLength: 255
          x-orum-error-invalid:
            message: Value for contact type is invalid. Pass a string value.
            code: invalid_contacts_value
    ContactRequestBusiness:
      title: ContactRequestBusiness
      type: object
      required:
        - type
        - value
      description: Contact information.
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/ContactTypeBusiness'
          x-orum-error-invalid:
            message: Type field is invalid. Valid type is "phone", "website" or "email".
            code: invalid_contacts_type
          x-orum-error-missing:
            message: Type field is required. Valid types are "phone", "website" or "email".
            code: missing_contacts_type
        value:
          type: string
          description: Email, phone number or website.
          maxLength: 255
          x-orum-error-invalid:
            message: Value for contact type is invalid. Pass a string value.
            code: invalid_contacts_value
          x-orum-error-missing:
            message: 'Value for contact type is missing. For type "phone", pass a valid 10-digit US phone number. For type "website", pass a website with a valid top-level domain. For type "email", pass a valid email. Example: hello@orum.io'
            code: missing_contacts_value
    PatchContactRequestBusiness:
      title: PatchContactRequestBusiness
      type: object
      required:
        - type
      description: Contact information.
      properties:
        type:
          $ref: '#/components/schemas/ContactTypeBusiness'
        value:
          type: string
          description: Email, phone number or website.
          maxLength: 255
    ContactResponsePerson:
      title: ContactResponse
      type: object
      required:
        - id
        - type
        - value
        - created_at
        - updated_at
      description: Contact information.
      properties:
        id:
          $ref: '#/components/schemas/OrumId'
        type:
          $ref: '#/components/schemas/ContactTypePerson'
        value:
          type: string
          description: Email or phone number.
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
    ContactResponseBusiness:
      title: ContactResponse
      type: object
      required:
        - id
        - type
        - value
        - created_at
        - updated_at
      description: Contact information.
      properties:
        id:
          $ref: '#/components/schemas/OrumId'
        type:
          $ref: '#/components/schemas/ContactTypeBusiness'
        value:
          type: string
          description: A standard set of values that indicate the contact type.
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
    PostalAddressResponse:
      title: PostalAddressResponse
      type: object
      required:
        - id
        - type
        - address1
        - city
        - state
        - country
        - zip5
        - created_at
        - updated_at
      description: Address.
      properties:
        id:
          $ref: '#/components/schemas/OrumId'
        type:
          $ref: '#/components/schemas/AddressType'
        address1:
          $ref: '#/components/schemas/Address1'
        address2:
          $ref: '#/components/schemas/Address2'
        city:
          $ref: '#/components/schemas/City'
        state:
          $ref: '#/components/schemas/State'
        country:
          $ref: '#/components/schemas/Country'
        zip5:
          $ref: '#/components/schemas/Zip5'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
    ExternalAccountRequest:
      title: ExternalAccountRequest
      type: object
      required:
        - account_reference_id
        - customer_reference_id
        - customer_resource_type
        - account_type
        - account_number
        - routing_number
        - account_holder_name
      properties:
        account_reference_id:
          allOf:
            - $ref: '#/components/schemas/AccountReferenceId'
          x-orum-error-missing:
            message: Account reference id is required. Pass a unique account reference id.
            code: missing_account_reference_id
          x-orum-error-invalid:
            message: Account reference id is invalid. Pass a string value.
            code: invalid_account_reference_id
        customer_reference_id:
          allOf:
            - $ref: '#/components/schemas/ExternalAccountCustomerReferenceId'
          x-orum-error-missing:
            message: Customer reference id for the external account's associated person or business is required.
            code: missing_customer_reference_id
          x-orum-error-invalid:
            message: Customer reference id is invalid. Pass a string value.
            code: invalid_customer_reference_id
        customer_resource_type:
          allOf:
            - $ref: '#/components/schemas/EndCustomerResourceType'
          x-orum-error-missing:
            message: Customer resource type is required. Valid customer resource type is "person", "business" or "enterprise".
            code: missing_customer_resource_type
          x-orum-error-invalid:
            message: Customer resource type is invalid. Valid customer resource type is "person", "business" or "enterprise".
            code: invalid_customer_resource_type
        account_type:
          allOf:
            - $ref: '#/components/schemas/AccountType'
          x-orum-error-missing:
            message: Account type is required. Valid account type is "checking" or "savings".
            code: missing_account_type
          x-orum-error-invalid:
            message: Account type is invalid. Valid account type is "checking" or "savings".
            code: invalid_account_type
        account_number:
          allOf:
            - $ref: '#/components/schemas/UsBankAccountNumber'
          x-orum-error-missing:
            message: Account number is required. Pass an account number with 17 digits or fewer.
            code: missing_account_number
          x-orum-error-invalid:
            known-error: invalid_account_number
        routing_number:
          allOf:
            - $ref: '#/components/schemas/AbaRoutingNumber'
          x-orum-error-missing:
            message: Routing number is required. Pass a valid 9-digit routing number.
            code: missing_routing_number
          x-orum-error-invalid:
            message: Routing number is invalid. Pass a valid 9-digit routing number.
            code: invalid_routing_number
        account_holder_name:
          allOf:
            - $ref: '#/components/schemas/AccountHolderName'
          x-orum-error-missing:
            message: Account holder name is required.
            code: missing_account_holder_name
          x-orum-error-invalid:
            message: Account holder name is invalid. Accepted values are letters, spaces, hyphens, apostrophes, periods and diacritics.
            code: invalid_account_holder_name
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          type: object
          nullable: true
          x-orum-error-invalid:
            message: Metadata must be a valid JSON object.
            code: invalid_metadata
    PutExternalAccountRequest:
      title: PutExternalAccountRequest
      allOf:
        - $ref: '#/components/schemas/ExternalAccountRequest'
        - type: object
          properties:
            metadata:
              allOf:
                - $ref: '#/components/schemas/MetadataPut'
              type: object
              nullable: true
              x-orum-error-invalid:
                message: Metadata must be a valid JSON object.
                code: invalid_metadata
    PatchExternalAccountRequest:
      title: PatchExternalAccountRequest
      type: object
      properties:
        account_type:
          allOf:
            - $ref: '#/components/schemas/AccountType'
          type: string
          nullable: true
          x-orum-error-invalid:
            message: Account type is invalid. Valid account type is "checking" or "savings".
            code: invalid_account_type
        account_number:
          allOf:
            - $ref: '#/components/schemas/UsBankAccountNumber'
          type: string
          nullable: true
          x-orum-error-invalid:
            known-error: invalid_account_number
        routing_number:
          allOf:
            - $ref: '#/components/schemas/AbaRoutingNumber'
          type: string
          nullable: true
          x-orum-error-invalid:
            message: Routing number is invalid. Pass a valid 9-digit routing number.
            code: invalid_routing_number
        account_holder_name:
          allOf:
            - $ref: '#/components/schemas/AccountHolderName'
          type: string
          nullable: true
          x-orum-error-invalid:
            message: Account holder name is invalid. Accepted values are letters, spaces, hyphens, apostrophes, periods and diacritics.
            code: invalid_account_holder_name
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          type: object
          nullable: true
          x-orum-error-invalid:
            message: Metadata must be a valid JSON object.
            code: invalid_metadata
    ExternalAccountResponseBase:
      title: ExternalAccountResponseBase
      type: object
      description: A single object of External Account.
      required:
        - id
        - account_reference_id
        - customer_reference_id
        - customer_resource_type
        - account_type
        - account_number
        - routing_number
        - account_holder_name
        - status
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/OrumId'
        account_reference_id:
          $ref: '#/components/schemas/AccountReferenceId'
        customer_reference_id:
          $ref: '#/components/schemas/ExternalAccountCustomerReferenceId'
        customer_resource_type:
          $ref: '#/components/schemas/EndCustomerResourceType'
        account_type:
          $ref: '#/components/schemas/AccountType'
        account_number:
          $ref: '#/components/schemas/UsBankAccountNumber'
        routing_number:
          $ref: '#/components/schemas/AbaRoutingNumber'
        account_holder_name:
          type: string
          description: Name of account holder.
        status:
          $ref: '#/components/schemas/ExternalAccountStatus'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        closed_at:
          $ref: '#/components/schemas/ClosedAt'
        metadata:
          $ref: '#/components/schemas/Metadata'
    ExternalAccountResponse:
      title: ExternalAccountResponse
      type: object
      required:
        - external_account
      properties:
        external_account:
          $ref: '#/components/schemas/ExternalAccountResponseBase'
    ExternalAccountsResponse:
      title: ExternalAccountsResponse
      type: object
      required:
        - external_accounts
      properties:
        external_accounts:
          type: array
          description: List of External Accounts.
          items:
            $ref: '#/components/schemas/ExternalAccountResponseBase'
    BusinessRequest:
      title: BusinessRequest
      type: object
      required:
        - customer_reference_id
        - legal_name
      properties:
        customer_reference_id:
          allOf:
            - $ref: '#/components/schemas/CustomerReferenceId'
          x-orum-error-missing:
            known-error: missing_customer_reference_id
          x-orum-error-invalid:
            known-error: invalid_customer_reference_id
        legal_name:
          allOf:
            - $ref: '#/components/schemas/LegalName'
          x-orum-error-missing:
            message: Legal name is required. Accepted values are alphanumeric characters, spaces, hyphens, apostrophes, periods and diacritics.
            code: missing_legal_name
          x-orum-error-invalid:
            known-error: invalid_legal_name
        business_name:
          allOf:
            - $ref: '#/components/schemas/BusinessName'
          type: string
          nullable: true
        entity_type:
          allOf:
            - $ref: '#/components/schemas/BusinessEntityType'
          type: string
          nullable: true
        tax_id:
          allOf:
            - $ref: '#/components/schemas/TaxId'
          type: string
          nullable: true
        tax_id_type:
          allOf:
            - $ref: '#/components/schemas/TaxIdType'
          type: string
          nullable: true
        account_holder_name:
          allOf:
            - $ref: '#/components/schemas/OptionalAccountHolderName'
          type: string
          nullable: true
        incorporation_date:
          allOf:
            - $ref: '#/components/schemas/IncorporationDate'
          type: string
          nullable: true
        addresses:
          type: array
          description: 'Incorporated address information for the business. Note: This field is required for payouts, deposits, or account-to-account transfers. Orum requires a physical address for all registered businesses; aligned with standards mandated by FinCEN and the FDIC. A physical address is a tangible building address, such as a home, office, or office suite. A PO Box is a mailing address, but not a physical address.'
          items:
            $ref: '#/components/schemas/BusinessPostalAddressRequest'
          minItems: 1
          maxItems: 1
          nullable: true
          x-orum-error-invalid:
            message: Addresses array is invalid. Pass an array containing an address object.
            code: invalid_addresses
        contacts:
          type: array
          description: List of contact information for the business. 'email', 'phone', or 'website' are required. A maximum of three persons or businesses can have the same phone number.
          items:
            $ref: '#/components/schemas/ContactRequestBusiness'
          minItems: 1
          maxItems: 3
          nullable: true
          x-orum-error-invalid:
            message: Contacts array is invalid. Pass an array of contact information containing phone, website, and/or email contact types.
            code: invalid_contacts
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          type: object
          nullable: true
          x-orum-error-invalid:
            message: Metadata must be a valid JSON object.
            code: invalid_metadata
    PutBusinessRequest:
      title: PutBusinessBase
      allOf:
        - $ref: '#/components/schemas/BusinessRequest'
        - type: object
          properties:
            metadata:
              allOf:
                - $ref: '#/components/schemas/MetadataPut'
              type: object
              nullable: true
              x-orum-error-invalid:
                message: Metadata must be a valid JSON object.
                code: invalid_metadata
    PatchBusinessRequest:
      title: PatchBusinessRequest
      type: object
      properties:
        legal_name:
          allOf:
            - $ref: '#/components/schemas/LegalName'
          type: string
          nullable: true
          x-orum-error-invalid:
            known-error: invalid_legal_name
        business_name:
          allOf:
            - $ref: '#/components/schemas/BusinessName'
          type: string
          nullable: true
        entity_type:
          allOf:
            - $ref: '#/components/schemas/BusinessEntityType'
          type: string
          nullable: true
        tax_id:
          allOf:
            - $ref: '#/components/schemas/TaxId'
          type: string
          nullable: true
        tax_id_type:
          allOf:
            - $ref: '#/components/schemas/TaxIdType'
          type: string
          nullable: true
        account_holder_name:
          allOf:
            - $ref: '#/components/schemas/OptionalAccountHolderName'
          type: string
          nullable: true
        incorporation_date:
          allOf:
            - $ref: '#/components/schemas/IncorporationDate'
          type: string
          nullable: true
        addresses:
          type: array
          description: 'Incorporated address information for the business. "type" is required if you are updating other address fields. Note: This field is required for payouts, deposits, or account-to-account transfers. Orum requires a physical address for all registered businesses; aligned with standards mandated by FinCEN and the FDIC. A physical address is a tangible building address, such as a home, office, or office suite. A PO Box is a mailing address, but not a physical address.'
          items:
            $ref: '#/components/schemas/BusinessPatchPostalAddressRequest'
          maxItems: 1
          nullable: true
          x-orum-error-invalid:
            message: Addresses array is invalid. Pass an array containing an address object.
            code: invalid_addresses
        contacts:
          type: array
          description: List of contact information for the business. 'email', 'phone', or 'website' are required. A maximum of three persons or businesses can have the same phone number.
          items:
            $ref: '#/components/schemas/PatchContactRequestBusiness'
          minItems: 0
          maxItems: 3
          nullable: true
          x-orum-error-invalid:
            message: Contacts array is invalid. Pass an array of contact information containing phone, website, and/or email contact types.
            code: invalid_contacts
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          type: object
          nullable: true
          x-orum-error-invalid:
            message: Metadata must be a valid JSON object.
            code: invalid_metadata
    BusinessResponseBase:
      title: BusinessResponseBase
      type: object
      required:
        - id
        - customer_reference_id
        - legal_name
        - status
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/OrumId'
        customer_reference_id:
          $ref: '#/components/schemas/CustomerReferenceId'
        legal_name:
          type: string
          description: The legal name of the business as it appears on official registration forms. Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, hashes, colons, forward slashes, and diacritics.
        business_name:
          type: string
          description: A trade name or pseudonym used by the business that is not its officially registered company name. Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, hashes, colons, forward slashes, and diacritics.
        entity_type:
          type: string
          description: Describes the type of business entity.
        tax_id_type:
          type: string
          description: 'The type of tax ID number associated with the business. Note: This field is required for payouts, deposits, or account-to-account transfers.'
        account_holder_name:
          type: string
          description: Name of the owner or primary person associated with the business.
        incorporation_date:
          type: string
          description: Date the business was incorporated, in YYYY-MM-DD format.
        status:
          $ref: '#/components/schemas/BusinessStatus'
        addresses:
          type: array
          description: 'Incorporated address information for the business. Note: This field is required for payouts, deposits, or account-to-account transfers. Orum requires a physical address for all registered businesses; aligned with standards mandated by FinCEN and the FDIC. A physical address is a tangible building address, such as a home, office, or office suite. A PO Box is a mailing address, but not a physical address.'
          items:
            $ref: '#/components/schemas/PostalAddressResponse'
          minItems: 1
          maxItems: 1
        contacts:
          type: array
          description: List of contact information for the business.
          items:
            $ref: '#/components/schemas/ContactResponseBusiness'
          minItems: 1
          maxItems: 3
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        closed_at:
          $ref: '#/components/schemas/ClosedAt'
        metadata:
          type: object
          description: Additional data you would like to provide on the resource. The field supports valid JSON of up to 5 key-value pairs with a maximum of 20 characters for the key and 50 characters for the value. Do not include any sensitive information.
    PutBusinessResponseBase:
      title: PutBusinessResponseBase
      allOf:
        - $ref: '#/components/schemas/BusinessResponseBase'
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/MetadataPut'
    BusinessResponse:
      title: BusinessResponse
      type: object
      required:
        - business
      properties:
        business:
          allOf:
            - $ref: '#/components/schemas/BusinessResponseBase'
    PutBusinessResponse:
      title: PutBusinessResponse
      type: object
      required:
        - business
      properties:
        business:
          $ref: '#/components/schemas/PutBusinessResponseBase'
    BusinessesResponse:
      title: BusinessesResponse
      type: object
      required:
        - businesses
      properties:
        businesses:
          type: array
          description: List of businesses.
          items:
            allOf:
              - $ref: '#/components/schemas/BusinessResponseBase'
    BusinessStatus:
      title: BusinessStatus
      type: string
      description: Status of Business.
      enum:
        - created
        - verified
        - rejected
        - restricted
        - closed
    AccountReferenceId:
      title: AccountReferenceId
      type: string
      description: Unique reference id for the external account. Generated by you.
      minLength: 1
      maxLength: 255
    CustomerReferenceId:
      title: CustomerReferenceId
      type: string
      description: Unique reference id for the customer (business or person) resource. Generated by you.
      minLength: 1
      maxLength: 255
    SubledgerReferenceId:
      title: SubledgerReferenceId
      type: string
      description: Unique reference id for the subledger resource. Generated by you.
      minLength: 1
      maxLength: 255
    ExternalAccountCustomerReferenceId:
      title: ExternalAccountCustomerReferenceId
      type: string
      description: Unique customer_reference_id that you passed when creating the associated customer (business or person) resource.
      maxLength: 255
    FirstName:
      title: FirstName
      type: string
      description: Accepts latin characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics.
      pattern: ^[ ’!"#$%&'()*+,-./:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]+$
      minLength: 1
      maxLength: 255
    MiddleName:
      title: MiddleName
      type: string
      description: Accepts latin characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics.
      pattern: ^[ ’!"#$%&'()*+,-./:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]*$
      maxLength: 255
    LastName:
      title: LastName
      type: string
      description: Accepts latin characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics.
      pattern: ^[ ’!"#$%&'()*+,-./:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]+$
      minLength: 1
      maxLength: 255
    DateOfBirth:
      title: DateOfBirth
      type: string
      pattern: ^((19|20)\d\d)-(0[1-9]|1[0-2])-(([01])[0-9]|2[0-9]|3[0-1])$
      description: 'Date of birth in YYYY-MM-DD format. Note: This field is required for payouts, deposits, or account-to-account transfers. Age must be less than 100 years and greater than 18 years to be verified.'
    SocialSecurityNumber:
      title: SocialSecurityNumber
      type: string
      nullable: true
      description: 'Social Security Number (SSN) or Individual Taxpayer Identification Number (ITIN) in XXX-XX-XXXX format. An example dummy value is 123-45-6789. Note: This field is required for payouts, deposits, or account-to-account transfers.'
    ContactTypePerson:
      title: ContactTypePerson
      type: string
      description: Type of contact information associated with a person - 'email' or 'phone'.
      enum:
        - email
        - phone
    ContactTypeBusiness:
      title: ContactTypeBusiness
      type: string
      description: Type of contact information associated with a business - 'email', 'phone' or 'website'.
      enum:
        - email
        - phone
        - website
    AddressType:
      title: AddressType
      type: string
      description: Type of address.
      enum:
        - home
        - legal
    AddressTypePerson:
      title: AddressTypePerson
      type: string
      description: Type of address. Always 'home' for person object.
      enum:
        - home
    AddressTypeBusiness:
      title: AddressTypeBusiness
      type: string
      description: Type of address. Always 'legal' for business object.
      enum:
        - legal
    AddressTypeCard:
      title: AddressTypeCard
      type: string
      description: Type of address. Always 'billing' for card object.
      enum:
        - billing
    Address1:
      title: Address1
      type: string
      description: Address line 1.
      maxLength: 255
      x-orum-error-invalid:
        message: Address1 is invalid. Ensure it is a string with a maximum length of 255 characters.
        code: invalid_address1
    Address2:
      title: Address2
      type: string
      description: Address line 2.
      maxLength: 255
      x-orum-error-invalid:
        message: Address2 is invalid. Ensure it is a string with a maximum length of 255 characters.
        code: invalid_address2
    City:
      title: City
      type: string
      description: City.
      maxLength: 255
    State:
      title: State
      type: string
      pattern: ^[A-Z]{2}$
      description: Uppercase two-character state code of the address.
    Country:
      title: Country
      type: string
      description: 2-character ISO country code.
      enum:
        - US
    Zip5:
      title: Zip5
      type: string
      description: 5-digit ZIP Code. Numeric values (0-9) only.
      pattern: ^\d{5}$
    UsBankAccountNumber:
      title: UsBankAccountNumber
      type: string
      pattern: ^(?:\d-{0,1}){3,16}\d$
      description: Account number for US bank account. 4 to 17 digits are acceptable.
    AbaRoutingNumber:
      title: AbaRoutingNumber
      type: string
      pattern: ^\d{9}$
      description: 9-digit American Bankers Association (ABA) routing number.
    EndCustomerResourceType:
      type: string
      description: Type of customer resource - business, person, or enterprise.
      enum:
        - business
        - person
        - enterprise
    AccountType:
      type: string
      description: Type of bank account - checking or savings.
      enum:
        - checking
        - savings
    ExternalAccountStatus:
      type: string
      description: Status of the external account.
      enum:
        - created
        - verified
        - rejected
        - restricted
        - closed
    BusinessEntityType:
      title: BusinessEntityType
      type: string
      nullable: true
      description: Describes the type of business entity.
      enum:
        - sole_proprietorship
        - partnership
        - limited_liability_partnership
        - limited_liability_company
        - c_corporation
        - s_corporation
        - b_corporation
        - nonprofit_corporation
      x-orum-error-invalid:
        message: Entity type is invalid. Valid entity type is "sole_proprietorship", "partnership", "limited_liability_partnership", "limited_liability_company", "c_corporation", "s_corporation", "b_corporation", or "nonprofit_corporation".
        code: invalid_entity_type
    LegalName:
      title: LegalName
      type: string
      description: The legal name of the business as it appears on official registration forms. Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, hashes, colons, forward slashes, and diacritics.
      pattern: ^[^\s][ ’!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]+$
      maxLength: 255
    BusinessName:
      title: BusinessName
      type: string
      description: A trade name or pseudonym used by the business that is not its officially registered company name. Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, hashes, colons, forward slashes, and diacritics.
      pattern: ^([ ’!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]*|)$
      maxLength: 255
      x-orum-error-invalid:
        message: Business name is invalid. Accepted values are alphanumeric characters, spaces, hyphens, apostrophes, periods and diacritics.
        code: invalid_business_name
    TaxId:
      title: TaxId
      type: string
      pattern: ^\d{9}$
      description: '9-digit corporate tax id of business - can be Taxpayer Identification Number (TIN) or Employer Identification Number (EIN). Note: This field is required for payouts, deposits, or account-to-account transfers.'
      x-orum-error-invalid:
        message: Invalid tax id. Expecting 9-digit numeric id.
        code: invalid_tax_id
    TaxIdType:
      title: TaxIdType
      type: string
      description: 'The type of tax ID number associated with the business. Note: This field is required for payouts, deposits, or account-to-account transfers.'
      enum:
        - tin
        - ein
      x-orum-error-invalid:
        message: Tax id type is invalid. Valid tax id type is "tin" or "ein".
        code: invalid_tax_id_type
    IncorporationDate:
      title: IncorporationDate
      type: string
      pattern: ^((16|17|18|19|20)\d\d)-(0[1-9]|1[0-2])-(([01])[0-9]|2[0-9]|3[0-1])$
      description: Date the business was incorporated, in YYYY-MM-DD format.
      x-orum-error-invalid:
        message: Incorporation date is invalid. Expecting format YYYY-MM-DD.
        code: invalid_incorporation_date
    UpdatedAt:
      type: string
      description: Timestamp when the resource was last updated.
      format: date-time
    ClosedAt:
      type: string
      description: Timestamp when the status of the resource was set to "closed".
      format: date-time
    OrumVersion:
      type: string
      description: Version of Deliver and Verify APIs. Use v2022-09-21.
      enum:
        - v2022-09-21
    StatusReason:
      type: object
      required:
        - reason_code
        - reason_code_message
      properties:
        reason_code:
          $ref: '#/components/schemas/ReasonCode'
        reason_code_message:
          $ref: '#/components/schemas/ReasonCodeMessage'
    ReasonCode:
      type: string
      description: A word-based code that describes the verification failure.
      example: invalid_address
    ReasonCodeMessage:
      type: string
      description: A human-readable description of the reason code.
      example: Address submitted is a non-supported address type
    AccountHolderName:
      type: string
      description: Name of account holder. Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics.
      pattern: ^([ ’!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]*|)$
      maxLength: 255
      minLength: 1
    OptionalAccountHolderName:
      type: string
      description: Name of account holder. Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics.
      pattern: ^([ ’!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]*|)$
      maxLength: 255
    CardAccountReferenceId:
      title: CardAccountReferenceId
      type: string
      description: Unique reference id for the card. Generated by you.
      minLength: 1
      maxLength: 255
    CardAccountHolderNamePerson:
      type: object
      title: Person Name
      required:
        - first_name
        - last_name
      description: Name of account holder.
      properties:
        first_name:
          allOf:
            - $ref: '#/components/schemas/FirstName'
          x-orum-error-invalid:
            known-error: invalid_first_name
          x-orum-error-missing:
            known-error: missing_first_name
        middle_name:
          allOf:
            - $ref: '#/components/schemas/MiddleName'
          type: string
          nullable: true
          x-orum-error-invalid:
            known-error: invalid_middle_name
          x-omitempty: true
        last_name:
          allOf:
            - $ref: '#/components/schemas/LastName'
          x-orum-error-invalid:
            known-error: invalid_last_name
          x-orum-error-missing:
            known-error: missing_last_name
        suffix:
          type: string
          nullable: true
          description: Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics.
          pattern: ^([ ’!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]*)$
          maxLength: 255
          x-orum-error-invalid:
            message: suffix is invalid. Accepted values are letters, spaces, hyphens, apostrophes, periods, and diacritics.
            code: invalid_suffix
          x-omitempty: true
      x-orum-error-invalid:
        message: Account holder name is invalid. Accepted values are letters, spaces, hyphens, apostrophes, periods and diacritics.
        code: invalid_account_holder_name
    CardAccountHolderNameBusiness:
      type: object
      title: Business Name
      description: Business name of account holder. Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics.
      required:
        - company_name
      properties:
        company_name:
          type: string
          description: Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics.
          pattern: ^[^\s][ ’!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]+$
          maxLength: 255
          x-orum-error-invalid:
            message: Company name is invalid. Accepted values are letters, spaces, hyphens, apostrophes, periods, and diacritics.
            code: invalid_company_name
          x-orum-error-missing:
            message: Company name is required. Accepted values are letters, spaces, hyphens, apostrophes, periods, and diacritics.
            code: missing_company_name
    CardAddressRequestZipOnly:
      type: object
      additionalProperties: false
      title: Zip Code
      required:
        - zip5
      description: Zip code of card holder
      properties:
        zip5:
          allOf:
            - $ref: '#/components/schemas/Zip5'
          x-orum-error-invalid:
            known-error: invalid_zip5
    CardAddressRequest:
      type: object
      title: Full Address
      required:
        - address1
        - city
        - state
        - country
        - zip5
      description: Full address of card holder
      properties:
        address1:
          $ref: '#/components/schemas/Address1'
        address2:
          $ref: '#/components/schemas/Address2'
        city:
          $ref: '#/components/schemas/City'
        state:
          allOf:
            - $ref: '#/components/schemas/State'
          x-orum-error-invalid:
            known-error: invalid_state
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
          x-orum-error-invalid:
            known-error: invalid_country
        zip5:
          allOf:
            - $ref: '#/components/schemas/Zip5'
          x-orum-error-invalid:
            known-error: invalid_zip5
    CardLastFourDigits:
      type: string
      description: The last four digits of the card number supplied by the customer.
      pattern: ^[xX]+\d{4}$
    CardExpirationMonth:
      type: integer
      description: The month in which the card expires.
      minimum: 1
      maximum: 12
    CardExpirationYear:
      type: integer
      description: The year in which the card expires.
      minimum: 2024
    CardRequest:
      title: CardRequest
      type: object
      required:
        - account_reference_id
        - customer_reference_id
        - customer_resource_type
        - account_holder_name
        - address
        - number
        - expiration_month
        - expiration_year
      properties:
        account_reference_id:
          allOf:
            - $ref: '#/components/schemas/CardAccountReferenceId'
          x-orum-error-missing:
            message: Account reference id is required. Pass a unique account reference id.
            code: missing_account_reference_id
          x-orum-error-invalid:
            message: Account reference id is invalid. Pass a string value.
            code: invalid_account_reference_id
        customer_reference_id:
          allOf:
            - $ref: '#/components/schemas/CardCustomerReferenceId'
          x-orum-error-missing:
            message: Customer reference id for the card's associated person or business is required.
            code: missing_customer_reference_id
          x-orum-error-invalid:
            message: Customer reference id is invalid. Pass a string value.
            code: invalid_customer_reference_id
        customer_resource_type:
          allOf:
            - $ref: '#/components/schemas/EndCustomerResourceType'
          x-orum-error-missing:
            message: Customer resource type is required. Valid customer resource type is "person", "business" or "enterprise".
            code: missing_customer_resource_type
          x-orum-error-invalid:
            message: Customer resource type is invalid. Valid customer resource type is "person", "business" or "enterprise".
            code: invalid_customer_resource_type
        account_holder_name:
          oneOf:
            - $ref: '#/components/schemas/CardAccountHolderNamePerson'
            - $ref: '#/components/schemas/CardAccountHolderNameBusiness'
          x-orum-error-missing:
            message: Account holder name is required.
            code: missing_account_holder_name
          x-orum-error-invalid:
            message: Account holder name is invalid.
            code: invalid_account_holder_name
        address:
          anyOf:
            - $ref: '#/components/schemas/CardAddressRequestZipOnly'
            - $ref: '#/components/schemas/CardAddressRequest'
          x-orum-error-missing:
            message: Address is required.
            code: missing_address
          x-orum-error-invalid:
            message: Address is invalid.
            code: invalid_address
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          type: object
          nullable: true
          x-orum-error-invalid:
            message: Metadata must be a valid JSON object.
            code: invalid_metadata
        number:
          type: string
          description: The card's number
          minLength: 8
          maxLength: 19
          x-orum-error-missing:
            message: Card number is required.
            code: missing_number
          x-orum-error-invalid:
            message: Card number is invalid.
            code: invalid_number
        expiration_month:
          allOf:
            - $ref: '#/components/schemas/CardExpirationMonth'
          x-orum-error-missing:
            message: Card's expiration month is required.
            code: missing_expiration_month
          x-orum-error-invalid:
            message: Card's expiration month is invalid.
            code: invalid_expiration_month
        expiration_year:
          allOf:
            - $ref: '#/components/schemas/CardExpirationYear'
          x-orum-error-missing:
            message: Card's expiration year is required.
            code: missing_expiration_year
          x-orum-error-invalid:
            message: Card's expiration year is invalid.
            code: invalid_expiration_year
    CardResponseBase:
      type: object
      required:
        - id
        - account_reference_id
        - customer_reference_id
        - customer_resource_type
        - account_holder_name
        - status
        - address
        - last4
        - expiration_month
        - expiration_year
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/OrumId'
        account_reference_id:
          allOf:
            - $ref: '#/components/schemas/CardAccountReferenceId'
        customer_reference_id:
          $ref: '#/components/schemas/CustomerReferenceId'
        customer_resource_type:
          allOf:
            - $ref: '#/components/schemas/EndCustomerResourceType'
        account_holder_name:
          oneOf:
            - $ref: '#/components/schemas/CardAccountHolderNamePerson'
            - $ref: '#/components/schemas/CardAccountHolderNameBusiness'
        status:
          $ref: '#/components/schemas/CardStatus'
        pull_eligible:
          type: boolean
          description: Indicates that the card can be used for pull transactions.
        push_eligible:
          type: boolean
          description: Indicates that the card can be used for push transactions.
        address:
          $ref: '#/components/schemas/CardAddressResponse'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        closed_at:
          $ref: '#/components/schemas/ClosedAt'
        metadata:
          type: object
          description: Additional data you would like to provide on the resource. The field supports valid JSON of up to 5 key-value pairs with a maximum of 20 characters for the key and 50 characters for the value. Do not include any sensitive information.
        last4:
          $ref: '#/components/schemas/CardLastFourDigits'
        expiration_month:
          $ref: '#/components/schemas/CardExpirationMonth'
        expiration_year:
          $ref: '#/components/schemas/CardExpirationYear'
        status_reasons:
          type: array
          description: Array that explains why the person failed verification.
          items:
            $ref: '#/components/schemas/StatusReason'
    CardsResponse:
      title: CardsResponse
      type: object
      required:
        - cards
      properties:
        cards:
          type: array
          description: List of card objects.
          items:
            allOf:
              - $ref: '#/components/schemas/CardResponseBase'
    CardResponse:
      title: CardResponse
      type: object
      required:
        - card
      properties:
        card:
          allOf:
            - $ref: '#/components/schemas/CardResponseBase'
    CardStatus:
      title: CardStatus
      type: string
      description: Status of card in Orum system.
      enum:
        - created
        - verified
        - rejected
        - closed
    CardCustomerReferenceId:
      title: CardCustomerReferenceId
      type: string
      description: Unique customer_reference_id that you passed when creating the associated customer (business or person) resource.
      maxLength: 255
    CardStatusFilter:
      title: CardStatusFilter
      description: Filter by status of card in Orum system.
      type: array
      items:
        $ref: '#/components/schemas/CardStatus'
    CardAddressResponse:
      title: CardAddressResponse
      type: object
      required:
        - id
        - type
        - zip5
        - created_at
        - updated_at
      description: Address.
      properties:
        id:
          $ref: '#/components/schemas/OrumId'
        type:
          $ref: '#/components/schemas/AddressTypeCard'
        address1:
          $ref: '#/components/schemas/Address1'
        address2:
          $ref: '#/components/schemas/Address2'
        city:
          $ref: '#/components/schemas/City'
        state:
          $ref: '#/components/schemas/State'
        country:
          $ref: '#/components/schemas/Country'
        zip5:
          $ref: '#/components/schemas/Zip5'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
    SubledgerRequest:
      title: SubledgerRequest
      type: object
      required:
        - subledger_reference_id
        - customer_reference_id
      properties:
        subledger_reference_id:
          allOf:
            - $ref: '#/components/schemas/SubledgerReferenceId'
          x-orum-error-missing:
            known-error: missing_subledger_reference_id
          x-orum-error-invalid:
            known-error: invalid_subledger_reference_id
        customer_reference_id:
          allOf:
            - $ref: '#/components/schemas/CustomerReferenceId'
          x-orum-error-missing:
            known-error: missing_customer_reference_id
          x-orum-error-invalid:
            known-error: invalid_customer_reference_id
    SubledgerResponse:
      title: SubledgerResponse
      type: object
      required:
        - subledger
      properties:
        subledger:
          allOf:
            - $ref: '#/components/schemas/SubledgerResponseBase'
    SubledgersResponse:
      title: SubledgersResponse
      type: object
      required:
        - subledgers
      properties:
        subledgers:
          type: array
          description: List of subledgers.
          items:
            $ref: '#/components/schemas/SubledgerResponseBase'
    SubledgerResponseBase:
      type: object
      required:
        - id
        - subledger_reference_id
        - customer_reference_id
        - customer_resource_type
        - status
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/OrumId'
        subledger_reference_id:
          $ref: '#/components/schemas/SubledgerReferenceId'
        customer_reference_id:
          $ref: '#/components/schemas/CustomerReferenceId'
        customer_resource_type:
          $ref: '#/components/schemas/EndCustomerResourceType'
        status:
          $ref: '#/components/schemas/SubledgerStatus'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        closed_at:
          $ref: '#/components/schemas/ClosedAt'
    ScheduleRequest:
      title: ScheduleRequest
      type: object
      properties:
        schedule_reference_id:
          allOf:
            - $ref: '#/components/schemas/ScheduleReferenceId'
          x-orum-error-missing:
            known-error: missing_schedule_reference_id
          x-orum-error-invalid:
            known-error: invalid_schedule_reference_id
        amount:
          allOf:
            - $ref: '#/components/schemas/TransferAmount'
          x-orum-error-missing:
            known-error: missing_amount
          x-orum-error-invalid:
            known-error: invalid_amount
        currency:
          allOf:
            - $ref: '#/components/schemas/Currency'
          x-orum-error-missing:
            known-error: missing_currency
          x-orum-error-invalid:
            known-error: invalid_currency
        speed:
          allOf:
            - $ref: '#/components/schemas/TransferSpeed'
          x-orum-error-missing:
            known-error: missing_speed
          x-orum-error-invalid:
            known-error: invalid_speed
        source:
          allOf:
            - $ref: '#/components/schemas/SourceTransferParty'
          nullable: true
          type: object
        destination:
          allOf:
            - $ref: '#/components/schemas/DestinationTransferParty'
          type: object
          nullable: true
        start_date:
          allOf:
            - $ref: '#/components/schemas/ScheduleStartDate'
          x-orum-error-missing:
            known-error: missing_schedule_start_date
          x-orum-error-invalid:
            known-error: invalid_schedule_start_date
        recurrence:
          allOf:
            - $ref: '#/components/schemas/ScheduleRecurrence'
          x-orum-error-missing:
            known-error: missing_schedule_recurrence
          x-orum-error-invalid:
            known-error: invalid_schedule_recurrence
      required:
        - schedule_reference_id
        - amount
        - currency
        - speed
        - start_date
        - recurrence
    ScheduleResponseBaseObject:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/OrumId'
        schedule_reference_id:
          $ref: '#/components/schemas/ScheduleReferenceId'
        status:
          $ref: '#/components/schemas/ScheduleStatus'
        amount:
          $ref: '#/components/schemas/TransferAmount'
        currency:
          $ref: '#/components/schemas/Currency'
        speed:
          $ref: '#/components/schemas/TransferSpeed'
        source:
          $ref: '#/components/schemas/SourceTransferParty'
        destination:
          $ref: '#/components/schemas/DestinationTransferParty'
        start_date:
          $ref: '#/components/schemas/ScheduleStartDate'
        recurrence:
          $ref: '#/components/schemas/ScheduleRecurrence'
        next_payment_date:
          $ref: '#/components/schemas/ScheduleNextPaymentDate'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        rrule_readable:
          $ref: '#/components/schemas/ScheduleHumanReadableCadence'
      required:
        - id
        - schedule_reference_id
        - status
        - amount
        - currency
        - speed
        - start_date
        - recurrence
        - next_payment_date
        - created_at
        - updated_at
        - rrule_readable
    ScheduleResponse:
      title: ScheduleResponse
      type: object
      required:
        - schedule
      properties:
        schedule:
          $ref: '#/components/schemas/ScheduleResponseBaseObject'
    SchedulesResponse:
      title: SchedulesResponse
      type: object
      required:
        - schedules
      properties:
        schedules:
          type: array
          description: List of schedules.
          items:
            $ref: '#/components/schemas/ScheduleResponseBaseObject'
    ScheduleHumanReadableCadence:
      title: ScheduleHumanReadableCadence
      type: string
      description: The human-readable cadence of the schedule.
      example: Weekly on Monday, Wednesday, and Friday
    RruleValidationRequest:
      title: RruleValidationRequest
      type: object
      properties:
        start_date:
          allOf:
            - $ref: '#/components/schemas/ScheduleStartDate'
          x-orum-error-missing:
            known-error: missing_schedule_start_date
          x-orum-error-invalid:
            known-error: invalid_schedule_start_date
        recurrence:
          allOf:
            - $ref: '#/components/schemas/ScheduleRecurrence'
          x-orum-error-missing:
            known-error: missing_schedule_recurrence
          x-orum-error-invalid:
            known-error: invalid_schedule_recurrence
        occurrence_count:
          type: integer
          minimum: 1
          maximum: 5
          description: Number of occurrences to return. Defaults to 2 if not specified.
          x-orum-error-invalid:
            known-error: invalid_occurrence_count
      required:
        - start_date
        - recurrence
    RruleValidationResponse:
      title: RruleValidationResponse
      type: object
      properties:
        start_date:
          $ref: '#/components/schemas/ScheduleStartDate'
        rrule_string:
          type: string
          description: The original RRULE string
        rrule_readable:
          type: string
          description: Human readable form of the RRULE
        occurrences:
          type: array
          description: List of next occurrence dates
          items:
            type: string
            format: date
      required:
        - start_date
        - recurrence
        - occurrences
        - rrule_string
        - rrule_readable
    TransferRequest:
      title: TransferRequest
      type: object
      properties:
        transfer_reference_id:
          allOf:
            - $ref: '#/components/schemas/TransferReferenceId'
          x-orum-error-missing:
            known-error: missing_transfer_reference_id
          x-orum-error-invalid:
            known-error: invalid_transfer_reference_id
        amount:
          allOf:
            - $ref: '#/components/schemas/TransferAmount'
          x-orum-error-missing:
            known-error: missing_amount
          x-orum-error-invalid:
            known-error: invalid_amount
        currency:
          allOf:
            - $ref: '#/components/schemas/Currency'
          x-orum-error-missing:
            known-error: missing_currency
          x-orum-error-invalid:
            known-error: invalid_currency
        speed:
          allOf:
            - $ref: '#/components/schemas/TransferSpeed'
          x-orum-error-missing:
            known-error: missing_speed
          x-orum-error-invalid:
            known-error: invalid_speed
        source:
          allOf:
            - $ref: '#/components/schemas/SourceTransferParty'
          type: object
          nullable: true
        destination:
          allOf:
            - $ref: '#/components/schemas/DestinationTransferParty'
          type: object
          nullable: true
        account_statement_descriptor:
          type: string
          description: Banks can display additional information to help the end user understand why they received funds. This information will appear on both the source and destination bank account statements. The field supports 10 alphanumeric characters for ACH and 140 for RTP.
          nullable: true
          x-orum-error-invalid:
            known-error: invalid_account_statement_descriptor
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          type: object
          nullable: true
          x-orum-error-invalid:
            message: Metadata must be a valid JSON object.
            code: invalid_metadata
        transfer_group_id:
          allOf:
            - $ref: '#/components/schemas/OrumId'
          type: string
          nullable: true
          x-orum-error-invalid:
            known-error: invalid_transfer_group_id
        subledger_reference_id:
          allOf:
            - $ref: '#/components/schemas/SubledgerReferenceId'
          x-orum-error-invalid:
            known-error: invalid_subledger_reference_id
      required:
        - transfer_reference_id
        - amount
        - currency
        - speed
    TransferPatchMetadataRequest:
      title: TransferPatchMetadata
      type: object
      properties:
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          x-orum-error-missing:
            message: Metadata is required
            code: missing_metadata
          x-orum-error-invalid:
            message: Metadata must be a valid JSON object.
            code: invalid_metadata
      required:
        - metadata
    TransferResponseBaseObject:
      title: TransferResponseBaseObject
      type: object
      properties:
        id:
          $ref: '#/components/schemas/OrumId'
        transfer_reference_id:
          $ref: '#/components/schemas/TransferReferenceId'
        amount:
          $ref: '#/components/schemas/TransferAmount'
        currency:
          $ref: '#/components/schemas/Currency'
        speed:
          $ref: '#/components/schemas/TransferSpeed'
        source:
          $ref: '#/components/schemas/SourceTransferPartyResponse'
        destination:
          $ref: '#/components/schemas/DestinationTransferPartyResponse'
        status:
          $ref: '#/components/schemas/TransferStatus'
        status_reasons:
          type: array
          description: Array that explains why the transfer failed.
          items:
            $ref: '#/components/schemas/TransferStatusReason'
        account_statement_descriptor:
          type: string
          description: Banks can display additional information to help the end user understand why they received funds. This information will appear on both the source and destination bank account statements. The field supports 10 alphanumeric characters for ACH and 140 for RTP.
        estimated_funds_delivery_date:
          type: string
          format: date-time
          description: Estimated date that funds will arrive in destination account. Time will always be midnight and should be ignored.
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        metadata:
          $ref: '#/components/schemas/Metadata'
        transfer_group_id:
          $ref: '#/components/schemas/OrumId'
        schedule_id:
          $ref: '#/components/schemas/OrumId'
        subledger_reference_id:
          $ref: '#/components/schemas/SubledgerReferenceId'
      required:
        - id
        - transfer_reference_id
        - amount
        - currency
        - speed
        - status
        - created_at
        - updated_at
    TransferResponse:
      title: TransferResponse
      type: object
      required:
        - transfer
      properties:
        transfer:
          $ref: '#/components/schemas/TransferResponseBaseObject'
    TransfersResponse:
      title: TransfersResponse
      type: object
      required:
        - transfers
      properties:
        transfers:
          type: array
          description: List of transfers.
          items:
            $ref: '#/components/schemas/TransferResponseBaseObject'
    TransferCancelResponse:
      title: TransferCancelResponse
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: An explanation for the status of the transfer cancellation request.
    TransferHistoryResponse:
      title: TransferHistoryResponse
      type: object
      required:
        - statuses
      properties:
        statuses:
          type: array
          description: List of transfer status history entries.
          items:
            $ref: '#/components/schemas/TransferHistoryEntry'
    TransferHistoryEntry:
      title: TransferHistoryEntry
      type: object
      required:
        - status
        - updated_at
      properties:
        status:
          $ref: '#/components/schemas/TransferStatus'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
    TransferReferenceId:
      title: TransferReferenceId
      type: string
      description: Unique reference id for the transfer. Generated by you.
      minLength: 1
    ScheduleReferenceId:
      title: ScheduleReferenceId
      type: string
      description: Unique reference id for the Schedule. Generated by you.
      minLength: 1
    PostEligibilityAbaRoutingNumber:
      title: PostEligibilityAbaRoutingNumber
      type: string
      pattern: ^\d{9}$
      description: 9-digit American Bankers Association (ABA) routing number.
      x-orum-error-invalid:
        known-error: invalid_routing_numbers
    TransferAmount:
      title: TransferAmount
      type: integer
      description: 'Transfer amount in integral cents (example: 100 = $1). Must be greater than zero.'
      minimum: 1
    Currency:
      title: Currency
      type: string
      description: Currency code in ISO 4217 format. Only USD is supported.
      enum:
        - USD
    TransferSpeed:
      title: TransferSpeed
      type: string
      description: Speed of transfer.
      enum:
        - asap
        - standard
        - same_day
        - wire
    SourceTransferParty:
      title: Source
      type: object
      description: For use cases that require a Source, information about the transfer funding source, which will be debited.
      properties:
        customer_reference_id:
          type: string
          description: Unique reference ID for the customer (person or business) associated with the external account being debited.
          minLength: 1
          x-orum-error-missing:
            known-error: missing_source_customer_reference_id
          x-orum-error-invalid:
            known-error: invalid_source_customer_reference_id
        account_reference_id:
          type: string
          description: Unique reference ID for the external account being debited.
          minLength: 1
          x-orum-error-missing:
            known-error: missing_source_account_reference_id
          x-orum-error-invalid:
            known-error: invalid_source_account_reference_id
        statement_display_name:
          type: string
          description: The name that will appear on the bank account statement of the account being debited. The field supports 16 alphanumeric characters for ACH, and 140 for RTP.
          nullable: true
      required:
        - account_reference_id
        - customer_reference_id
    DestinationTransferParty:
      title: TransferDestination
      type: object
      description: Information about the transfer funds destination, which will be credited.
      properties:
        customer_reference_id:
          type: string
          description: Unique reference ID for the customer (person or business) associated with the external account being credited.
          minLength: 1
          x-orum-error-missing:
            known-error: missing_destination_customer_reference_id
          x-orum-error-invalid:
            known-error: invalid_destination_customer_reference_id
        account_reference_id:
          type: string
          description: Unique reference ID for the account being credited.
          minLength: 1
          x-orum-error-missing:
            known-error: missing_destination_account_reference_id
          x-orum-error-invalid:
            known-error: invalid_destination_account_reference_id
        statement_display_name:
          type: string
          description: The name that will appear on the bank account statement of the account being credited. The field supports 16 alphanumeric characters for ACH, and 140 for RTP.
          nullable: true
      required:
        - account_reference_id
        - customer_reference_id
    SourceTransferPartyResponse:
      title: SourceTransferPartyResponse
      type: object
      description: For use cases that require a Source, information about the transfer funding source, which will be debited.
      properties:
        customer_reference_id:
          type: string
          description: Unique reference ID for the customer (person or business) associated with the external account being debited.
        account_reference_id:
          type: string
          description: Unique reference ID for the external account being debited.
        statement_display_name:
          allOf:
            - $ref: '#/components/schemas/PartyStatementDisplayName'
        trace_number:
          allOf:
            - $ref: '#/components/schemas/TraceNumber'
        return_trace_number:
          allOf:
            - $ref: '#/components/schemas/ReturnTraceNumber'
      required:
        - account_reference_id
        - customer_reference_id
    DestinationTransferPartyResponse:
      title: DestinationTransferPartyResponse
      type: object
      description: Information about the transfer funds destination, which will be credited.
      properties:
        customer_reference_id:
          type: string
          description: Unique reference ID for the customer (person or business) associated with the external account being credited.
        account_reference_id:
          type: string
          description: Unique reference ID for the account being credited.
        statement_display_name:
          allOf:
            - $ref: '#/components/schemas/PartyStatementDisplayName'
        trace_number:
          allOf:
            - $ref: '#/components/schemas/TraceNumber'
        return_trace_number:
          allOf:
            - $ref: '#/components/schemas/ReturnTraceNumber'
      required:
        - account_reference_id
        - customer_reference_id
    PartyStatementDisplayName:
      title: PartyStatementDisplayName
      type: string
      description: The name that will appear on the bank account statement of the account being debited. The field supports 16 alphanumeric characters for ACH, and 140 for RTP.
    TraceNumber:
      title: TraceNumber
      type: string
      description: Unique tracking number of the payment assigned by its origination FI. This number can be used to track the lifecycle of the payment at the FI.
    ReturnTraceNumber:
      title: ReturnTraceNumber
      type: string
      description: Unique tracking number assigned to a return to associate it back with its original trace number for reconciliation.
    TransferStatus:
      title: TransferStatus
      type: string
      description: Describes the current status of the transfer.
      enum:
        - completed
        - created
        - failed
        - pending
        - settled
    ScheduleStatus:
      title: ScheduleStatus
      type: string
      description: Describes the current status of the schedule.
      enum:
        - active
        - inactive
    TransferStatusReason:
      title: Transfer Status Reason
      type: object
      description: For failed transfers - details on why the transfer is in a failed state.
      properties:
        source:
          description: Present if transfer failed due to an issue with the transfer source.
          $ref: '#/components/schemas/ReasonCodes'
        destination:
          description: Present if transfer failed due to an issue with the transfer destination.
          $ref: '#/components/schemas/ReasonCodes'
    ReasonCodes:
      title: ReasonCode
      type: object
      required:
        - reason_code
        - reason_code_message
      properties:
        reason_code:
          type: string
          description: A word-based code created by Orum to describe the reason for the failure. Orum reason codes are rail-agnostic.
          example: insufficient_funds
        reason_code_message:
          type: string
          description: A human-readable description of the reason code.
        network_reason_code:
          type: string
          description: The reason code sent by the network (ex R01).
        network_reason_code_message:
          type: string
          description: The message sent by the network.
        network_reason_code_rail_type:
          type: string
          description: The payment rail used in the transfer. Either RTP or ACH.
    ScheduleStartDate:
      type: string
      description: The date when the schedule starts, in YYYY-MM-DD format.
      format: date
      example: '2025-01-01'
    ScheduleNextPaymentDate:
      type: string
      description: The date when the schedule will execute
      format: date
      example: '2025-01-01'
    ScheduleRecurrence:
      type: string
      description: Recurrence of the schedule in iCalendar RRULE format
      example: RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,WE,FR
    EligibilityRequest:
      title: EligibilityRequest
      type: object
      required:
        - routing_numbers
      properties:
        routing_numbers:
          type: array
          x-orum-error-missing:
            message: Routing numbers is required
            code: missing_routing_numbers
          x-orum-error-invalid:
            known-error: invalid_routing_numbers
          items:
            $ref: '#/components/schemas/PostEligibilityAbaRoutingNumber'
    EligibilityResponse:
      title: EligibilityResponse
      type: object
      required:
        - routing_numbers
      properties:
        routing_numbers:
          type: array
          items:
            $ref: '#/components/schemas/EligibilityRoutingNumber'
    EligibilityRoutingNumber:
      title: EligibilityRoutingNumber
      type: object
      required:
        - routing_number
        - eligible
        - rtp
        - fednow
      properties:
        routing_number:
          $ref: '#/components/schemas/AbaRoutingNumber'
        eligible:
          $ref: '#/components/schemas/Eligible'
        rtp:
          $ref: '#/components/schemas/RTPEligible'
        fednow:
          $ref: '#/components/schemas/FednowEligible'
    RtpAndFedNow:
      type: object
      required:
        - rtp
        - fednow
      properties:
        rtp:
          type: boolean
        fednow:
          type: boolean
    GetEligibilityResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/RtpAndFedNow'
      example:
        '011000138':
          rtp: true
          fednow: true
    Eligible:
      type: boolean
      description: Describes if the routing number is RTP or Fednow eligible or not
    RTPEligible:
      type: boolean
      description: Describes if the routing number is RTP eligible or not
    FednowEligible:
      type: boolean
      description: Describes if the routing number is Fednow eligible or not
    TransferGroupRequest:
      title: TransferGroupRequest
      type: object
      properties:
        transfer_group_reference_id:
          allOf:
            - $ref: '#/components/schemas/TransferGroupReferenceID'
          x-orum-error-missing:
            known-error: missing_transfer_group_reference_id
          x-orum-error-invalid:
            known-error: invalid_transfer_group_reference_id
        source:
          allOf:
            - $ref: '#/components/schemas/TransferGroupSourceObject'
          type: object
          nullable: true
        destination:
          allOf:
            - $ref: '#/components/schemas/TransferGroupDestinationObject'
          type: object
          nullable: true
      required:
        - transfer_group_reference_id
    TransferGroup:
      title: TransferGroup
      type: object
      properties:
        id:
          $ref: '#/components/schemas/OrumId'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        transfer_group_reference_id:
          $ref: '#/components/schemas/TransferGroupReferenceID'
        source:
          $ref: '#/components/schemas/TransferGroupSourceObject'
        destination:
          $ref: '#/components/schemas/TransferGroupDestinationObject'
      required:
        - id
        - created_at
        - updated_at
        - transfer_group_reference_id
    TransferGroupResponse:
      title: TransferGroupResponse
      type: object
      properties:
        transfer_group:
          $ref: '#/components/schemas/TransferGroup'
      required:
        - transfer_group
    TransferGroupsResponse:
      title: TransferGroupsResponse
      type: object
      properties:
        transfer_groups:
          type: array
          items:
            $ref: '#/components/schemas/TransferGroup'
      required:
        - transfer_groups
    TransferGroupReferenceID:
      title: TransferGroupReferenceID
      type: string
      minLength: 1
      description: Unique reference id for the transfer group
      x-orum-error-invalid:
        known-error: invalid_transfer_group_reference_id
    TransferGroupSourceObject:
      title: Source
      type: object
      description: Information about the ultimate source of the transfer group.
      properties:
        account_reference_id:
          type: string
          minLength: 1
          description: Unique id of the account on the Enterprise platform
          x-orum-error-missing:
            known-error: missing_transfer_group_source_account_reference_id
          x-orum-error-invalid:
            known-error: invalid_transfer_group_source_account_reference_id
        customer_reference_id:
          type: string
          minLength: 1
          description: Unique id of the customer on the Enterprise platform
          x-orum-error-missing:
            known-error: missing_transfer_group_source_customer_reference_id
          x-orum-error-invalid:
            known-error: invalid_transfer_group_source_customer_reference_id
      required:
        - account_reference_id
        - customer_reference_id
    TransferGroupDestinationObject:
      title: Destination
      type: object
      description: Information about the ultimate destination of the transfer group.
      properties:
        account_reference_id:
          type: string
          minLength: 1
          description: Unique id of the account on the Enterprise platform
          x-orum-error-missing:
            known-error: missing_transfer_group_destination_account_reference_id
          x-orum-error-invalid:
            known-error: invalid_transfer_group_destination_account_reference_id
        customer_reference_id:
          type: string
          minLength: 1
          description: Unique id of the customer on the Enterprise platform
          x-orum-error-missing:
            known-error: missing_transfer_group_destination_customer_reference_id
          x-orum-error-invalid:
            known-error: invalid_transfer_group_destination_customer_reference_id
      required:
        - account_reference_id
        - customer_reference_id
    BookTransfer:
      title: BookTransfer
      type: object
      properties:
        id:
          $ref: '#/components/schemas/OrumId'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        book_transfer_reference_id:
          $ref: '#/components/schemas/BookTransferReferenceId'
        amount:
          allOf:
            - $ref: '#/components/schemas/TransferAmount'
          x-orum-error-missing:
            known-error: missing_amount
          x-orum-error-invalid:
            known-error: invalid_amount
        currency:
          $ref: '#/components/schemas/Currency'
        status:
          $ref: '#/components/schemas/BookTransferStatus'
        status_reasons:
          type: array
          description: Array that explains why the transfer failed.
          items:
            $ref: '#/components/schemas/BookTransferStatusReason'
        metadata:
          $ref: '#/components/schemas/Metadata'
        source:
          $ref: '#/components/schemas/BookTransferSourceObject'
        destination:
          $ref: '#/components/schemas/BookTransferDestinationObject'
      required:
        - id
        - created_at
        - updated_at
        - book_transfer_reference_id
        - amount
        - currency
        - status
    BookTransferRequest:
      title: BookTransferRequest
      type: object
      properties:
        book_transfer_reference_id:
          $ref: '#/components/schemas/TransferGroupReferenceID'
        amount:
          allOf:
            - $ref: '#/components/schemas/TransferAmount'
          x-orum-error-missing:
            known-error: missing_amount
          x-orum-error-invalid:
            known-error: invalid_amount
        currency:
          $ref: '#/components/schemas/Currency'
        metadata:
          $ref: '#/components/schemas/Metadata'
        source:
          $ref: '#/components/schemas/BookTransferSourceObject'
        destination:
          $ref: '#/components/schemas/BookTransferDestinationObject'
      required:
        - book_transfer_reference_id
        - amount
        - currency
    BookTransferStatus:
      title: BookTransferStatus
      type: string
      description: Describes the current status of the book transfer.
      enum:
        - created
        - completed
        - failed
    BookTransferStatusReason:
      title: BookTransfer Status Reason
      type: object
      description: For failed book transfers - details on why the book transfer is in a failed state.
      properties:
        source:
          $ref: '#/components/schemas/BookTransferReasonCode'
        destination:
          $ref: '#/components/schemas/BookTransferReasonCode'
    BookTransferSourceObject:
      title: Source
      type: object
      description: Information about the ultimate source of the book transfer
      properties:
        subledger_reference_id:
          type: string
          minLength: 1
          description: Unique id of the account on the Enterprise platform
          x-orum-error-missing:
            known-error: missing_book_transfer_source_subledger_reference_id
          x-orum-error-invalid:
            known-error: invalid_book_transfer_source_subledger_reference_id
      required:
        - subledger_reference_id
    BookTransferDestinationObject:
      title: Destination
      type: object
      description: Information about the ultimate destination of the book transfer.
      properties:
        subledger_reference_id:
          type: string
          minLength: 1
          description: Unique id of the account on the Enterprise platform
          x-orum-error-missing:
            known-error: missing_book_transfer_destination_subledger_reference_id
          x-orum-error-invalid:
            known-error: invalid_book_transfer_destination_subledger_reference_id
      required:
        - subledger_reference_id
    BookTransferResponse:
      title: BookTransferResponse
      type: object
      properties:
        book_transfer:
          $ref: '#/components/schemas/BookTransfer'
      required:
        - book_transfer
    BookTransfersResponse:
      title: BookTransfersResponse
      type: object
      required:
        - book_transfers
      properties:
        book_transfers:
          type: array
          description: List of book transfers.
          items:
            $ref: '#/components/schemas/BookTransfer'
    BookTransferReasonCode:
      title: BookTransferReasonCode
      type: object
      required:
        - reason_code
        - reason_code_message
      properties:
        reason_code:
          type: string
          description: A word-based code created by Orum to describe the reason for the failure. Orum reason codes are rail-agnostic.
          example: insufficient_funds
        reason_code_message:
          type: string
          description: A human-readable description of the reason code.
    BookTransferReferenceId:
      title: BookTransferReferenceId
      type: string
      minLength: 1
      description: Unique reference id for the book tranfer
      x-orum-error-invalid:
        known-error: invalid_book_transfer_reference_id
    BalanceResponse:
      title: BalanceResponse
      type: object
      required:
        - balance
        - total_balance
      properties:
        balance:
          $ref: '#/components/schemas/Balance'
        total_balance:
          $ref: '#/components/schemas/Balance'
    Balance:
      title: Balance
      type: object
      required:
        - pending
        - available
        - currency
        - updated_at
      properties:
        pending:
          type: integer
          format: int64
          description: 'Pending amount of the balance in integral cents (example: 100 = $1).'
        available:
          type: integer
          format: int64
          description: 'Available amount of the balance in integral cents (example: 100 = $1).'
        currency:
          $ref: '#/components/schemas/Currency'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
    SubledgerBalanceResponse:
      title: BalanceResponse
      type: object
      required:
        - balance
      properties:
        balance:
          $ref: '#/components/schemas/SubledgerBalance'
    SubledgerBalancesResponse:
      title: BalancesResponse
      type: object
      required:
        - balances
      properties:
        balances:
          type: array
          description: List of balance objects.
          items:
            allOf:
              - $ref: '#/components/schemas/SubledgerBalance'
    SubledgerBalance:
      title: SubledgerBalance
      type: object
      required:
        - subledger_id
        - pending
        - available
        - currency
        - updated_at
        - subledger_reference_id
      properties:
        subledger_id:
          type: string
          format: uuid
          description: The subledger ID associated with the balance
        pending:
          type: integer
          format: int64
          description: 'Pending amount of the balance in integral cents (example: 100 = $1).'
        available:
          type: integer
          format: int64
          description: 'Available amount of the balance in integral cents (example: 100 = $1).'
        currency:
          $ref: '#/components/schemas/Currency'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        subledger_reference_id:
          type: string
          description: The subledger reference id associated with the balance
    ControlErrorResponse:
      type: object
      properties:
        error_code:
          type: string
        message:
          type: string
        attempts_remaining:
          type: integer
    SenderName:
      type: string
      description: Name of sender initiating the verification request. This name will appear on the statement and should be recognizable to the account holder. Accepts alphanumeric characters and hyphens, dashes, periods, apostrophes, spaces, and diacritics.
      pattern: ^([ ’!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſ]*|)$
      maxLength: 255
      minLength: 1
    VerifyAccountRequest:
      title: VerifyAccountRequest
      type: object
      required:
        - account_number
        - routing_number
        - account_holder_name
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/VerifyAccountType'
          x-orum-error-invalid:
            message: Type is invalid. Pass in either 'status', 'control', 'status_ownership' or 'control_ownership'.
            code: invalid_type
          x-oapi-codegen-extra-tags:
            csv: type,omitempty
        account_number:
          allOf:
            - $ref: '#/components/schemas/UsBankAccountNumber'
          x-orum-error-missing:
            message: Account number is required. Pass an account number with 4 to 17 digits.
            code: missing_account_number
          x-orum-error-invalid:
            message: Account number is invalid. Pass an account number with 4 to 17 digits.
            code: invalid_account_number
          x-oapi-codegen-extra-tags:
            csv: account_number
          example: '00101044595'
        routing_number:
          allOf:
            - $ref: '#/components/schemas/AbaRoutingNumber'
          x-orum-error-missing:
            message: Routing number is required. Pass a valid 9-digit routing number.
            code: missing_routing_number
          x-orum-error-invalid:
            message: Routing number is invalid. Pass a valid 9-digit routing number.
            code: invalid_routing_number
          x-oapi-codegen-extra-tags:
            csv: routing_number
          example: '021000021'
        account_holder_name:
          allOf:
            - $ref: '#/components/schemas/AccountHolderName'
          x-orum-error-missing:
            message: Account holder name is required.
            code: missing_account_holder_name
          x-orum-error-invalid:
            message: Account holder name is invalid. Accepted values are letters, numbers, spaces, hyphens, apostrophes, periods and diacritics.
            code: invalid_account_holder_name
          x-oapi-codegen-extra-tags:
            csv: account_holder_name
          example: John Doe
        email:
          allOf:
            - $ref: '#/components/schemas/Email'
          x-orum-error-missing:
            message: Email is required.
            code: missing_email
          x-orum-error-invalid:
            message: Email address provided is invalid.
            code: invalid_email
          x-oapi-codegen-extra-tags:
            csv: email,omitempty
        person:
          allOf:
            - $ref: '#/components/schemas/OwnershipPersonRequest'
          x-orum-error-invalid:
            message: Person is invalid.
            code: invalid_person
          example:
            first_name: John
            last_name: Doe
            ssn: '123121234'
            phone_number: '+11234567890'
        business:
          allOf:
            - $ref: '#/components/schemas/OwnershipBusinessRequest'
          x-orum-error-invalid:
            message: Business is invalid.
            code: invalid_business
          example:
            business_name: Acme
            tax_id: '123456789'
            phone_number: '+11234567890'
        sender_name:
          allOf:
            - $ref: '#/components/schemas/SenderName'
          x-orum-error-invalid:
            message: Sender name is invalid.
            code: invalid_sender_name
          example: Acme
    VerifyAccountControlRequest:
      title: VerifyAccountControlRequest
      type: object
      required:
        - statement_code
      properties:
        statement_code:
          allOf:
            - $ref: '#/components/schemas/StatementCode'
          x-orum-error-missing:
            message: Statement code is required. Pass the statement code from the account statement descriptor.
            code: missing_statement_code
          x-orum-error-invalid:
            message: Statement code is invalid. Pass the statement code from the account statement descriptor.
            code: invalid_statement_code
    VerifyAccountResponseBase:
      title: VerifyAccountResponseBase
      type: object
      required:
        - id
        - created_at
        - updated_at
        - account_number
        - routing_number
        - account_holder_name
        - verification_status
      properties:
        id:
          $ref: '#/components/schemas/OrumId'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        account_number:
          $ref: '#/components/schemas/UsBankAccountNumber'
        routing_number:
          $ref: '#/components/schemas/AbaRoutingNumber'
        account_holder_name:
          $ref: '#/components/schemas/AccountHolderName'
        email:
          $ref: '#/components/schemas/Email'
        verification_status:
          $ref: '#/components/schemas/VerificationStatus'
        status_reason:
          $ref: '#/components/schemas/VerificationStatusReason'
        ownership_status:
          $ref: '#/components/schemas/OwnershipStatus'
        person:
          $ref: '#/components/schemas/OwnershipPerson'
        business:
          $ref: '#/components/schemas/OwnershipBusiness'
        control_status:
          $ref: '#/components/schemas/ControlStatus'
        debit_status:
          $ref: '#/components/schemas/DebitStatus'
        debit_status_reason:
          $ref: '#/components/schemas/DebitStatusReason'
        estimated_verification_date:
          $ref: '#/components/schemas/EstimatedVerificationDate'
        sender_name:
          $ref: '#/components/schemas/SenderName'
    VerifyAccountResponse:
      title: VerifyAccountResponse
      type: object
      required:
        - account
      properties:
        account:
          $ref: '#/components/schemas/VerifyAccountResponseBase'
    VerifyAccountsResponse:
      title: VerifyAccountsResponse
      type: object
      required:
        - accounts
      properties:
        accounts:
          type: array
          description: An array of verify accounts.
          items:
            $ref: '#/components/schemas/VerifyAccountResponseBase'
    VerificationStatus:
      type: string
      description: Status of account verification.
      enum:
        - pending
        - valid
        - closed
        - invalid
        - failed
    DebitStatus:
      type: string
      description: Status of account debit.
      enum:
        - pending
        - valid
        - blocked
        - failed
    OwnershipStatus:
      type: string
      description: Status of account ownership.
      enum:
        - pending
        - full
        - partial
        - not_a_match
        - not_found
    OwnershipPersonRequest:
      description: Ownership details for a person
      type: object
      required:
        - first_name
        - last_name
      properties:
        first_name:
          type: string
          maxLength: 255
          minLength: 1
          x-orum-error-missing:
            message: First name is required.
            code: missing_first_name
          x-orum-error-invalid:
            message: First name is invalid.
            code: invalid_first_name
          example: John
        last_name:
          type: string
          maxLength: 255
          minLength: 1
          x-orum-error-missing:
            message: Last name is required.
            code: missing_last_name
          x-orum-error-invalid:
            message: Last name is invalid.
            code: invalid_last_name
          example: Doe
        phone_number:
          type: string
          maxLength: 12
          minLength: 1
          pattern: ^\+1[0-9]{10}$
          x-orum-error-invalid:
            message: Phone number is invalid.
            code: invalid_phone_number
          example: '+12125551212'
        ssn:
          type: string
          maxLength: 9
          minLength: 4
          pattern: ^\d+$
          x-orum-error-invalid:
            message: SSN is invalid
            code: invalid_ssn
          example: '123121234'
    OwnershipPerson:
      description: Ownership details for a person
      type: object
      required:
        - first_name
        - last_name
      properties:
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        first_name_match:
          $ref: '#/components/schemas/OwnershipResult'
        last_name_match:
          $ref: '#/components/schemas/OwnershipResult'
        phone_number_match:
          $ref: '#/components/schemas/OwnershipResult'
        ssn_match:
          $ref: '#/components/schemas/OwnershipResult'
    OwnershipBusinessRequest:
      description: Ownership details for a business
      type: object
      required:
        - business_name
      properties:
        business_name:
          type: string
          maxLength: 512
          minLength: 1
          x-orum-error-missing:
            message: Business name is required.
            code: missing_business_name
          x-orum-error-invalid:
            message: Business name is invalid.
            code: invalid_business_name
        tax_id:
          type: string
          maxLength: 9
          minLength: 4
          pattern: ^\d+$
          x-orum-error-invalid:
            message: Tax ID is invalid.
            code: invalid_tax_id
        phone_number:
          type: string
          maxLength: 12
          minLength: 1
          pattern: ^\+1[0-9]{10}$
          x-orum-error-invalid:
            message: Phone number is invalid.
            code: invalid_phone_number
    OwnershipBusiness:
      description: Ownership details for a business
      type: object
      required:
        - business_name
      properties:
        business_name:
          type: string
        phone_number:
          type: string
        business_name_match:
          $ref: '#/components/schemas/OwnershipResult'
        phone_number_match:
          $ref: '#/components/schemas/OwnershipResult'
        tax_id_match:
          $ref: '#/components/schemas/OwnershipResult'
    OwnershipResult:
      type: string
      description: Result of Ownership match
      enum:
        - match
        - not_a_match
        - not_found
    ControlStatus:
      type: string
      description: Status of account control.
      enum:
        - pending
        - valid
        - canceled
    VerificationStatusReason:
      type: string
      description: Status reason for failed, invalid, and closed accounts.
      enum:
        - blocked_account
        - closed_account
        - deceased_party
        - duplicated_transfer
        - invalid_account
        - invalid_field
        - invalid_routing
        - regulatory_error
        - unavailable_financial_institution
        - unexpected_error
        - unsupported_transfer
    DebitStatusReason:
      type: string
      description: Status reason for failed and blocked accounts.
      enum:
        - blocked_account
        - closed_account
        - deceased_party
        - duplicated_transfer
        - invalid_account
        - invalid_field
        - invalid_routing
        - regulatory_error
        - unavailable_financial_institution
        - unexpected_error
        - unsupported_transfer
        - debit_blocked
        - unauthorized_transfer
    EstimatedVerificationDate:
      type: string
      description: Estimated date that the account verification will be complete. Time will always be midnight and should be ignored.
      format: date-time
      example: '2023-07-13T00:00:00.000Z'
    StatementCode:
      title: StatementCode
      type: string
      pattern: ^[a-zA-Z0-9]{4}$
      description: Text from the account statement descriptor to verify account control.
    Email:
      type: string
      format: email
      description: Email address to notify once the statement code is sent to the account to verify account control.
    VerifyAccountType:
      type: string
      description: The type of verify request to make. If not provided, we will default to "status".
      enum:
        - status
        - control
        - status_ownership
        - control_ownership
    EventTypes:
      type: array
      description: The types of events for which you would like to receive a webhook e.g. transfer_created. Use subscribe_all to receive webhooks for all events.
      items:
        $ref: '#/components/schemas/EventType'
    EventType:
      type: string
      description: The type of event you want to invoke a webhook for.
      enum:
        - subscribe_all
        - person_created
        - person_verified
        - person_rejected
        - person_restricted
        - person_unverified
        - person_closed
        - person_all
        - business_created
        - business_verified
        - business_rejected
        - business_restricted
        - business_unverified
        - business_closed
        - business_all
        - external_account_created
        - external_account_verified
        - external_account_rejected
        - external_account_restricted
        - external_account_unverified
        - external_account_closed
        - external_account_all
        - transfer_updated
        - transfer_all
        - verify_account_updated
        - subledger_all
        - subledger_created
        - book_transfer_all
        - book_transfer_updated
    ConfigurationRequest:
      title: ConfigurationRequest
      type: object
      required:
        - event_types
        - url
        - enabled
      properties:
        event_types:
          $ref: '#/components/schemas/EventTypes'
        url:
          type: string
          description: The URL where you would like the webhook to be sent.
        enabled:
          type: boolean
          description: A boolean to determine whether the configuration is enabled. Acts as an on/off switch for that particular webhook.
    ConfigurationResponse:
      title: ConfigurationResponse
      type: object
      required:
        - webhook_configuration
      properties:
        webhook_configuration:
          $ref: '#/components/schemas/WebhookConfiguration'
    ConfigurationsResponse:
      title: ConfigurationsResponse
      type: object
      required:
        - webhook_configurations
      properties:
        webhook_configurations:
          type: array
          description: An array of webhook configurations.
          items:
            $ref: '#/components/schemas/WebhookConfiguration'
    WebhookConfiguration:
      title: WebhookConfiguration
      type: object
      required:
        - id
        - enterprise_name
        - event_types
        - enabled
        - url
        - data_version
        - created_at
        - created_by
        - updated_at
        - updated_by
      properties:
        id:
          type: string
        enterprise_name:
          type: string
        data_version:
          $ref: '#/components/schemas/DataVersion'
        event_types:
          $ref: '#/components/schemas/EventTypes'
        enabled:
          type: boolean
        url:
          type: string
        created_at:
          type: string
        created_by:
          type: string
        updated_at:
          type: string
        updated_by:
          type: string
    DataVersion:
      type: string
      description: data_version is set by the Orum-Version used to create or update the webhook configuration. A webhook configuration with data_version v2022-09-21 will match the v2022-09-21 schema for the given event type.
      enum:
        - v2022-09-21
        - v2021-10-01
    SecretResponse:
      title: SecretResponse
      type: object
      properties:
        enterprise_keypair:
          type: object
          required:
            - id
            - enterprise_name
            - public_key
            - created_at
            - updated_at
          properties:
            id:
              type: string
            enterprise_name:
              type: string
            public_key:
              type: string
              description: RSA-2048 public key.
            created_at:
              type: string
              description: Timestamp when the resource was created.
            updated_at:
              type: string
              description: Timestamp when the resource was last updated.
    PersonEventType:
      type: string
      description: The type of event you want to invoke a webhook for.
      enum:
        - person_created
        - person_verified
        - person_rejected
        - person_restricted
        - person_unverified
        - person_closed
    BusinessEventType:
      type: string
      description: The type of event you want to invoke a webhook for.
      enum:
        - business_created
        - business_verified
        - business_rejected
        - business_restricted
        - business_unverified
        - business_closed
    ExternalAccountEventType:
      type: string
      description: The type of event you want to invoke a webhook for.
      enum:
        - external_account_created
        - external_account_verified
        - external_account_rejected
        - external_account_restricted
        - external_account_unverified
        - external_account_closed
    TransferEventType:
      type: string
      description: The type of event you want to invoke a webhook for.
      enum:
        - transfer_updated
    VerifyAccountEventType:
      type: string
      description: The type of event you want to invoke a webhook for.
      enum:
        - verify_account_updated
    SubledgerEventType:
      type: string
      description: The type of event you want to invoke a webhook for.
      enum:
        - subledger_created
    BookTransferEventType:
      type: string
      description: The type of event you want to invoke a webhook for.
      enum:
        - book_transfer_updated
    PersonTestRequest:
      type: object
      title: Person Test Event
      required:
        - event_type
        - data
      properties:
        event_type:
          $ref: '#/components/schemas/PersonEventType'
        data:
          $ref: '#/components/schemas/PersonResponseBase'
    BusinessTestRequest:
      type: object
      title: Business Test Event
      required:
        - event_type
        - data
      properties:
        event_type:
          $ref: '#/components/schemas/BusinessEventType'
        data:
          $ref: '#/components/schemas/BusinessResponseBase'
    ExternalAccountTestRequest:
      type: object
      title: External Account Test Event
      required:
        - event_type
        - data
      properties:
        event_type:
          $ref: '#/components/schemas/ExternalAccountEventType'
        data:
          $ref: '#/components/schemas/ExternalAccountResponseBase'
    TransferTestRequest:
      type: object
      title: Transfer Test Event
      required:
        - event_type
        - data
      properties:
        event_type:
          $ref: '#/components/schemas/TransferEventType'
        data:
          $ref: '#/components/schemas/TransferResponseBaseObject'
    VerifyAccountTestRequest:
      type: object
      title: Verify Account Test Event
      required:
        - event_type
        - data
      properties:
        event_type:
          $ref: '#/components/schemas/VerifyAccountEventType'
        data:
          $ref: '#/components/schemas/VerifyAccountResponseBase'
    SubledgerTestRequest:
      type: object
      title: Subledger Test Event
      required:
        - event_type
        - data
      properties:
        event_type:
          $ref: '#/components/schemas/SubledgerEventType'
        data:
          $ref: '#/components/schemas/SubledgerResponseBase'
    BookTransferTestRequest:
      type: object
      title: Book Transfer Test Event
      required:
        - event_type
        - data
      properties:
        event_type:
          $ref: '#/components/schemas/BookTransferEventType'
        data:
          $ref: '#/components/schemas/BookTransfer'
