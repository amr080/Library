{
  "openapi": "3.0.1",
  "info": {
    "title": "Visa Direct Connect",
    "description": "",
    "version": "1"
  },
  "servers": [
    {
      "url": "https://sandbox.api.visa.com",
      "description": "Sandbox server"
    }
  ],
  "security": [],
  "tags": [
    {
      "name": "Callback API",
      "description": "Callback API"
    },
    {
      "name": "Transactional API",
      "description": "Transactional API"
    }
  ],
  "paths": {
    "/visamoneymovement/v1/payouts/ledgerNotification": {
      "post": {
        "tags": [
          "Callback API"
        ],
        "summary": "Ledger Notification",
        "description": "The purpose of this API is to provide information on various ledger entries received.",
        "operationId": "Debit Credit Advice POST",
        "requestBody": {
          "description": "OriginatorLedgerNotification body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OriginatorLedgerNotification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "When any field validation fails or when any required field is missing or when request is inconsistent with the Request definitions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-name": "ReturnToOriginator POST",
        "x-codegen-request-body-name": "OriginatorLedgerNotification",
        "x-slug": "OriginatorLedgerNotification",
        "x-tags": [
          "OriginatorLedgerNotification"
        ],
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1visamoneymovement~1v1~1payouts~1ledgerNotification/post",
            "default": false
          }
        ],
        "x-hideSample": true,
        "x-hideTryIt": true
      }
    },
    "/visamoneymovement/v1/payouts/balanceNotification": {
      "post": {
        "tags": [
          "Callback API"
        ],
        "summary": "Balance Notification",
        "description": "The purpose of this API is to provide virtual account (i.e. VAN) balance data driven by client's configuration and usage",
        "operationId": "BalanceNotification",
        "parameters": [
          {
            "name": "keyId",
            "in": "header",
            "required": false,
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/KeyId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BalanceNotification"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1visamoneymovement~1v1~1payouts~1balanceNotification/post",
            "default": false
          }
        ],
        "x-hideSample": true,
        "x-hideTryIt": true
      }
    },
    "/visamoneymovement/v1/payouts/statusNotification": {
      "post": {
        "tags": [
          "Callback API"
        ],
        "summary": "Payout Status Notification",
        "description": "The purpose of the API is to \n  Enable Visa to provide updates of an payout transaction to Originating Entity",
        "operationId": "PayoutStatusNotification",
        "parameters": [
          {
            "name": "keyId",
            "in": "header",
            "required": false,
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/KeyId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutNotification"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse-1"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1visamoneymovement~1v1~1payouts~1statusNotification/post",
            "default": false
          }
        ],
        "x-hideSample": true,
        "x-hideTryIt": true
      }
    },
    "/visamoneymovement/v1/payouts/return": {
      "post": {
        "tags": [
          "Callback API"
        ],
        "summary": "Payout Return Notification",
        "description": "This API provides the Originating Entity with the ability to receive notifications on returns associated with their payouts",
        "operationId": "PayoutReturnNotification",
        "parameters": [
          {
            "name": "keyId",
            "in": "header",
            "required": false,
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/KeyId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutReturnRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse-2"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1visamoneymovement~1v1~1payouts~1return/post",
            "default": false
          }
        ],
        "x-hideSample": true,
        "x-hideTryIt": true
      }
    },
    "/visadirect-connect/v1/payouts/{id}": {
      "post": {
        "tags": [
          "Transactional API"
        ],
        "summary": "Request Exception",
        "description": "Update Payout Status to cancel/recall/reverse the transfer",
        "operationId": "updatePayoutStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier, it is either a client_reference_id or a payout_id",
            "required": true,
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePayoutStatusRequest"
              },
              "examples": {
                "Request Exception Wallet": {
                  "summary": "Request Exception Wallet",
                  "value": {
                    "initiatingPartyId": "1002",
                    "idType": "CLIENT_REFERENCE_ID",
                    "actionCode": "CANCEL",
                    "payoutMethod": "W"
                  }
                },
                "Request Exception Accounts": {
                  "summary": "Request Exception Accounts",
                  "value": {
                    "initiatingPartyId": "1002",
                    "idType": "CLIENT_REFERENCE_ID",
                    "actionCode": "CANCEL",
                    "payoutMethod": "B"
                  }
                },
                "Request Exception Cards Pull reversal": {
                  "summary": "Request Exception Cards Pull reversal",
                  "value": {
                    "initiatingPartyId": "1002",
                    "idType": "CLIENT_REFERENCE_ID",
                    "actionCode": "REVERSAL",
                    "payoutMethod": "C"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payout response body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelPayoutResponse"
                },
                "examples": {
                  "Request Exception Wallet": {
                    "summary": "Request Exception Wallet",
                    "value": {
                      "transactionDetail": {
                        "initiatingPartyId": 8092,
                        "payoutId": "281475041735425",
                        "clientReferenceId": "2998723427",
                        "status": "CANCELLED"
                      }
                    }
                  },
                  "Request Exception Accounts": {
                    "summary": "Request Exception Accounts",
                    "value": {
                      "transactionDetail": {
                        "initiatingPartyId": 8092,
                        "payoutId": "281475041735425",
                        "clientReferenceId": "2998723427",
                        "status": "CANCELLED"
                      }
                    }
                  },
                  "Request Exception Cards Pull reversal": {
                    "summary": "Request Exception Cards Pull reversal",
                    "value": {
                      "transactionDetail": {
                        "initiatingPartyId": 1002,
                        "transactionDateTime": "2024-07-22T19:32:40.000Z",
                        "networkResponses": [
                          {
                            "systemTraceAuditNumber": "420419",
                            "cardAcceptorId": "CA-IDCode-89",
                            "approvalCode": "23456M",
                            "acquirerCountryCode": "840",
                            "terminalId": "wnTOMUzL",
                            "acquiringBin": 445654,
                            "retrievalReferenceNumber": "420419029890",
                            "type": "PullFundsTransactionReversal",
                            "transactionAmount": 100.21,
                            "transactionCurrencyCode": "USD",
                            "networkId": 4,
                            "actionCode": "00",
                            "responseSource": "5"
                          }
                        ],
                        "payoutId": "844482451210168",
                        "clientReferenceId": "64433575113",
                        "status": "PAYMENT_RETURNED"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse-3"
          },
          "401": {
            "$ref": "#/components/responses/401ErrorResponse-3"
          },
          "403": {
            "$ref": "#/components/responses/403ErrorResponse-3"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1visadirect-connect~1v1~1payouts~1{id}/post",
            "default": false
          }
        ],
        "x-hideTryIt": true,
        "x-sortOrder": 1
      }
    },
    "/visamoneymovement/v1/payouts/accountBalance": {
      "get": {
        "tags": [
          "Transactional API"
        ],
        "summary": "Get Account Balance",
        "description": "The purpose of this API is to retrieve merchant's account currency balance.",
        "operationId": "GetAccountBalance",
        "parameters": [
          {
            "name": "initiatingPartyId",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/InitiatingPartyId-1"
            }
          },
          {
            "name": "currencyCode",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/AlphaCurrencyCode"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAccountBalanceResponse"
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse-4"
          },
          "401": {
            "$ref": "#/components/responses/401ErrorResponse-4"
          },
          "403": {
            "$ref": "#/components/responses/403ErrorResponse-4"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1visamoneymovement~1v1~1payouts~1accountBalance/get",
            "default": false
          }
        ],
        "x-hideTryIt": true,
        "x-sortOrder": 3
      }
    },
    "/visadirect-connect/v1/payouts/validate": {
      "post": {
        "tags": [
          "Transactional API"
        ],
        "summary": "Validate Payout",
        "description": "Validate Payout Request",
        "operationId": "ValidatePayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePayoutRequest-3"
              },
              "examples": {
                "validate cards Push Request": {
                  "summary": "validate cards Push Request",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Alba",
                      "firstName": "Jessica",
                      "address": {
                        "country": "USA",
                        "city": "Florida",
                        "postalCode": "33634",
                        "addressLine1": "2 Marcus Clarke St,"
                      },
                      "dateOfBirth": "2001-01-01",
                      "type": "I",
                      "card": {
                        "accountType": "00",
                        "accountNumber": "4957030420210454",
                        "expirationDate": "2027-03"
                      }
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "A42434234S324234",
                      "lastName": "Smith",
                      "firstName": "John",
                      "address": {
                        "country": "USA",
                        "city": "Camden",
                        "postalCode": "15205",
                        "addressLine1": "4616 Stuart Street",
                        "addressLine2": "Lane 1",
                        "state": "NJ"
                      },
                      "dateOfBirth": "1989-04-22",
                      "type": "I"
                    },
                    "payoutMethod": "C",
                    "transactionDetail": {
                      "surcharge": "1",
                      "initiatingPartyId": "1002",
                      "localTransactionDateTime": "{{curDate}}T15:26:12",
                      "businessApplicationId": "PP",
                      "purposeOfPayment": "Remittance",
                      "transactionAmount": 100.21,
                      "transactionCurrencyCode": "USD"
                    }
                  }
                },
                "Validate Wallet payout": {
                  "summary": "Validate Wallet payout",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Bharath",
                      "firstName": "Anand",
                      "contactNumberType": "MOBILE",
                      "cityOfBirth": "London",
                      "identificationList": [
                        {
                          "idType": "P",
                          "idNumber": "P128766Z",
                          "idIssueCountry": "UGA"
                        }
                      ],
                      "wallet": {
                        "countryCode": "UGA",
                        "accountIdentifier": "+8801888513100",
                        "accountIdentifierType": "PHONENUMBER",
                        "currencyCode": "UGX",
                        "operatorName": "ALIPAY"
                      },
                      "address": {
                        "country": "UGA",
                        "city": "KAMPALA",
                        "postalCode": "SW1A 2AA",
                        "addressLine1": "10 Downing St",
                        "addressLine2": "2124 HEH"
                      },
                      "contactEmail": "testmailid2024@visa.com",
                      "countryOfBirth": "UGA",
                      "contactNumber": "+123456789",
                      "dateOfBirth": "1991-05-27",
                      "type": "I"
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "4304630005267011",
                      "lastName": "Russel",
                      "firstName": "Saha",
                      "contactNumberType": "MOBILE",
                      "cityOfBirth": "London",
                      "address": {
                        "country": "GBR",
                        "city": "Manchester",
                        "postalCode": "20500",
                        "addressLine1": "1600 Pennsylvania Ave",
                        "addressLine2": "Apt 4B"
                      },
                      "contactEmail": "testmail389abc@visa.com",
                      "countryOfBirth": "GBR",
                      "contactNumber": "+123456789",
                      "dateOfBirth": "1988-02-08",
                      "type": "I"
                    },
                    "payoutMethod": "W",
                    "transactionDetail": {
                      "initiatingPartyId": "1002",
                      "businessApplicationId": "PP",
                      "transactionAmount": "3613250",
                      "transactionCurrencyCode": "UGX",
                      "settlementCurrencyCode": "USD",
                      "endToEndId": "330016463808",
                      "senderSourceOfFunds": "01",
                      "payoutSpeed": "STANDARD"
                    }
                  }
                },
                "Validate Cards Pull request": {
                  "summary": "Validate Cards Pull request",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Alba",
                      "firstName": "Jessica",
                      "address": {
                        "country": "USA",
                        "city": "Florida",
                        "postalCode": "33634",
                        "addressLine1": "2 Marcus Clarke St,"
                      },
                      "dateOfBirth": "2001-01-01",
                      "type": "I"
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "A42434234S324234",
                      "lastName": "Smith",
                      "firstName": "John",
                      "address": {
                        "country": "USA",
                        "city": "Camden",
                        "postalCode": "15205",
                        "addressLine1": "4616 Stuart Street",
                        "addressLine2": "Lane 1",
                        "state": "NJ"
                      },
                      "dateOfBirth": "1989-04-22",
                      "type": "I",
                      "card": {
                        "accountType": "00",
                        "accountNumber": "4005520000011126",
                        "expirationDate": "2027-03"
                      }
                    },
                    "payoutMethod": "C",
                    "transactionDetail": {
                      "surcharge": "1",
                      "initiatingPartyId": "1002",
                      "localTransactionDateTime": "{{curDate}}T15:26:12",
                      "businessApplicationId": "PP",
                      "purposeOfPayment": "Remittance",
                      "transactionAmount": 100.21,
                      "transactionCurrencyCode": "USD"
                    }
                  }
                },
                "Validate Account Payout": {
                  "summary": "Validate Account Payout",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Bharath",
                      "firstName": "Anand",
                      "contactNumberType": "MOBILE",
                      "bank": {
                        "bankCode": "800554",
                        "bankCodeType": "SORT_CODE",
                        "accountNumberType": "DEFAULT",
                        "accountName": "Money Market",
                        "countryCode": "GBR",
                        "bankName": "Barclays",
                        "accountNumber": "6970093",
                        "currencyCode": "GBP"
                      },
                      "cityOfBirth": "London",
                      "identificationList": [
                        {
                          "idType": "P",
                          "idNumber": "P128766Z",
                          "idIssueCountry": "GBR"
                        }
                      ],
                      "address": {
                        "country": "GBR",
                        "city": "London",
                        "postalCode": "SW1A 2AA",
                        "addressLine1": "10 Downing St",
                        "addressLine2": "2124 HEH"
                      },
                      "contactEmail": "testmailid2024@visa.com",
                      "countryOfBirth": "GBR",
                      "contactNumber": "+123456789",
                      "dateOfBirth": "1991-05-27",
                      "type": "I"
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "4304630005267011",
                      "lastName": "Russel",
                      "firstName": "Saha",
                      "contactNumberType": "MOBILE",
                      "cityOfBirth": "London",
                      "address": {
                        "country": "GBR",
                        "city": "Manchester",
                        "postalCode": "20500",
                        "addressLine1": "1600 Pennsylvania Ave",
                        "addressLine2": "Apt 4B"
                      },
                      "contactEmail": "testmail389abc@visa.com",
                      "countryOfBirth": "GBR",
                      "contactNumber": "+123456789",
                      "dateOfBirth": "1988-02-08",
                      "type": "I"
                    },
                    "payoutMethod": "B",
                    "transactionDetail": {
                      "initiatingPartyId": "1002",
                      "businessApplicationId": "PP",
                      "transactionAmount": "1557",
                      "transactionCurrencyCode": "GBP",
                      "settlementCurrencyCode": "GBP",
                      "endToEndId": "330016463808",
                      "senderSourceOfFunds": "01",
                      "payoutSpeed": "STANDARD"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Business validation result - if the Payout request is valid and can be processed if sent as a payout transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatePayoutResponse-5"
                },
                "examples": {
                  "validate cards Push Request": {
                    "summary": "validate cards Push Request",
                    "value": {
                      "validationResultCode": "INVALID",
                      "validationDetails": [
                        {
                          "reason": "Card Validation",
                          "details": [
                            {
                              "message": "Address verification failed"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "Validate Wallet payout": {
                    "summary": "Validate Wallet payout",
                    "value": {
                      "validationResultCode": "VALID_WITH_NETWORK"
                    }
                  },
                  "Validate Cards Pull request": {
                    "summary": "Validate Cards Pull request",
                    "value": {
                      "validationResultCode": "INVALID",
                      "validationDetails": [
                        {
                          "reason": "Card Validation",
                          "details": [
                            {
                              "message": "Card validation failed"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "Validate Account Payout": {
                    "summary": "Validate Account Payout",
                    "value": {
                      "validationResultCode": "VALID"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse-5"
          },
          "401": {
            "$ref": "#/components/responses/401ErrorResponse-3"
          },
          "403": {
            "$ref": "#/components/responses/403ErrorResponse-3"
          },
          "429": {
            "$ref": "#/components/responses/429ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1visadirect-connect~1v1~1payouts~1validate/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/visadirect-connect/v1/payouts": {
      "get": {
        "tags": [
          "Transactional API"
        ],
        "summary": "Query Payout",
        "description": "Get details of transaction by querying identifier",
        "operationId": "QueryPayout",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/PayoutIdentifier"
            },
            "examples": {
              "QueryPayoutCards": {
                "value": "CLIENT_REFERENCE_ID"
              },
              "QueryPayoutWallet": {
                "value": "CLIENT_REFERENCE_ID"
              },
              "QueryPayoutAccount": {
                "value": "CLIENT_REFERENCE_ID"
              }
            }
          },
          {
            "name": "idType",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TransactionIdType-1"
            }
          },
          {
            "name": "initiatingPartyId",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/InitiatingPartyId-1"
            },
            "examples": {
              "QueryPayoutCards": {
                "value": 1002
              },
              "QueryPayoutWallet": {
                "value": 1002
              },
              "QueryPayoutAccount": {
                "value": 1002
              }
            }
          },
          {
            "name": "payoutMethod",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/PayoutMethod"
            },
            "examples": {
              "QueryPayoutCards": {
                "value": "C"
              },
              "QueryPayoutWallet": {
                "value": "W"
              },
              "QueryPayoutAccount": {
                "value": "B"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/QueryResponse-2"
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse-6"
          },
          "401": {
            "$ref": "#/components/responses/401ErrorResponse-3"
          },
          "403": {
            "$ref": "#/components/responses/403ErrorResponse-3"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1visadirect-connect~1v1~1payouts/get",
            "default": false
          }
        ],
        "x-hideTryIt": true,
        "x-sortOrder": 2
      },
      "post": {
        "tags": [
          "Transactional API"
        ],
        "summary": "Send Payout",
        "description": "SendPayout Request",
        "operationId": "SendPayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPayoutRequest-5"
              },
              "examples": {
                "Send Payout Accounts": {
                  "summary": "Send Payout Accounts",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Bharath",
                      "firstName": "Anand",
                      "contactNumberType": "MOBILE",
                      "bank": {
                        "bankCode": "800554",
                        "bankCodeType": "SORT_CODE",
                        "accountNumberType": "DEFAULT",
                        "accountName": "Money Market",
                        "countryCode": "GBR",
                        "bankName": "Barclays",
                        "accountNumber": "6970093",
                        "currencyCode": "GBP"
                      },
                      "cityOfBirth": "London",
                      "identificationList": [
                        {
                          "idType": "P",
                          "idNumber": "P128766Z",
                          "idIssueCountry": "GBR"
                        }
                      ],
                      "address": {
                        "country": "GBR",
                        "city": "London",
                        "postalCode": "SW1A 2AA",
                        "addressLine1": "10 Downing St",
                        "addressLine2": "2124 HEH"
                      },
                      "contactEmail": "testmailid2024@visa.com",
                      "countryOfBirth": "GBR",
                      "contactNumber": "+123456789",
                      "dateOfBirth": "1991-05-27",
                      "type": "I"
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "4304630005267011",
                      "lastName": "Russel",
                      "firstName": "Saha",
                      "contactNumberType": "MOBILE",
                      "cityOfBirth": "London",
                      "address": {
                        "country": "GBR",
                        "city": "Manchester",
                        "postalCode": "20500",
                        "addressLine1": "1600 Pennsylvania Ave",
                        "addressLine2": "Apt 4B"
                      },
                      "contactEmail": "testmail389abc@visa.com",
                      "countryOfBirth": "GBR",
                      "contactNumber": "+123456789",
                      "dateOfBirth": "1988-02-08",
                      "type": "I"
                    },
                    "payoutMethod": "B",
                    "transactionDetail": {
                      "initiatingPartyId": "1002",
                      "businessApplicationId": "PP",
                      "transactionAmount": "1557",
                      "transactionCurrencyCode": "GBP",
                      "settlementCurrencyCode": "GBP",
                      "endToEndId": "330016463808",
                      "clientReferenceId": "32917133186",
                      "senderSourceOfFunds": "01",
                      "payoutSpeed": "STANDARD"
                    }
                  }
                },
                "Send Payout Cards Push": {
                  "summary": "Send Payout Cards Push",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Alba",
                      "firstName": "Jessica",
                      "address": {
                        "country": "USA",
                        "city": "Florida",
                        "postalCode": "33634",
                        "addressLine1": "2 Marcus Clarke St,"
                      },
                      "dateOfBirth": "2001-01-01",
                      "type": "I",
                      "card": {
                        "accountType": "00",
                        "accountNumber": "4957030420210454",
                        "expirationDate": "2027-03"
                      }
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "A42434234S324234",
                      "lastName": "Smith",
                      "firstName": "John",
                      "address": {
                        "country": "USA",
                        "city": "Camden",
                        "postalCode": "15205",
                        "addressLine1": "4616 Stuart Street",
                        "addressLine2": "Lane 1",
                        "state": "NJ"
                      },
                      "dateOfBirth": "1989-04-22",
                      "type": "I"
                    },
                    "payoutMethod": "C",
                    "transactionDetail": {
                      "surcharge": "1",
                      "initiatingPartyId": "1002",
                      "localTransactionDateTime": "2024-07-22T15:26:12",
                      "businessApplicationId": "PP",
                      "purposeOfPayment": "Remittance",
                      "transactionAmount": 100.21,
                      "transactionCurrencyCode": "USD",
                      "clientReferenceId": "98148028712"
                    }
                  }
                },
                "Send Payout Wallet 400 Request": {
                  "summary": "Send Payout Wallet 400 Request",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Bharath",
                      "firstName": "Anand",
                      "contactNumberType": "MOBILE",
                      "cityOfBirth": "London",
                      "identificationList": [
                        {
                          "idType": "P",
                          "idNumber": "P128766Z",
                          "idIssueCountry": "UGA"
                        }
                      ],
                      "wallet": {
                        "countryCode": "UGA",
                        "accountIdentifier": "+8801888513100",
                        "accountIdentifierType": "PHONENUMBER",
                        "currencyCode": "UGX",
                        "operatorName": "ALIPAY"
                      },
                      "address": {
                        "country": "UGA",
                        "city": "KAMPALA",
                        "postalCode": "SW1A 2AA",
                        "addressLine1": "10 Downing St",
                        "addressLine2": "2124 HEH"
                      },
                      "contactEmail": "testmailid2024@visa.com",
                      "countryOfBirth": "UGA",
                      "contactNumber": "+123456789",
                      "dateOfBirth": "1991-05-27",
                      "type": "I"
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "4304630005267011",
                      "lastName": "Russel",
                      "firstName": "Saha",
                      "contactNumberType": "MOBILE",
                      "cityOfBirth": "London",
                      "address": {
                        "country": "GBR",
                        "city": "Manchester",
                        "postalCode": "20500",
                        "addressLine1": "1600 Pennsylvania Ave",
                        "addressLine2": "Apt 4B"
                      },
                      "contactEmail": "testmail389abc@visa.com",
                      "countryOfBirth": "GBR",
                      "contactNumber": "+123456789",
                      "dateOfBirth": "1988-02-08",
                      "type": "I"
                    },
                    "payoutMethod": "W",
                    "transactionDetail": {
                      "initiatingPartyId": "1002",
                      "businessApplicationId": "PP",
                      "transactionAmount": "3613250",
                      "transactionCurrencyCode": "UGX",
                      "settlementCurrencyCode": "USD",
                      "endToEndId": "330016463808",
                      "clientReferenceId": "13501445172",
                      "senderSourceOfFunds": "01",
                      "payoutSpeed": "STANDARD"
                    }
                  }
                },
                "Send Payout Cards Pull 400 request": {
                  "summary": "Send Payout Cards Pull 400 request",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Alba",
                      "firstName": "Jessica",
                      "address": {
                        "country": "USA",
                        "city": "Florida",
                        "postalCode": "33634",
                        "addressLine1": "2 Marcus Clarke St,"
                      },
                      "dateOfBirth": "2001-01-01",
                      "type": "I"
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "A42434234S324234",
                      "lastName": "Smith",
                      "firstName": "John",
                      "address": {
                        "country": "USA",
                        "city": "Camden",
                        "postalCode": "15205",
                        "addressLine1": "4616 Stuart Street",
                        "addressLine2": "Lane 1",
                        "state": "NJ"
                      },
                      "dateOfBirth": "1989/04/22",
                      "type": "I",
                      "card": {
                        "accountType": "00",
                        "accountNumber": "4005520000011126",
                        "expirationDate": "2027-03"
                      }
                    },
                    "payoutMethod": "C",
                    "transactionDetail": {
                      "surcharge": "1",
                      "initiatingPartyId": "1002",
                      "localTransactionDateTime": "{{curDate}}T15:26:12",
                      "businessApplicationId": "PP",
                      "purposeOfPayment": "Remittance",
                      "transactionAmount": 100.21,
                      "transactionCurrencyCode": "USD",
                      "clientReferenceId": "6443357511333"
                    }
                  }
                },
                "Send payout Accounts 400 Request": {
                  "summary": "Send payout Accounts 400 Request",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Bharath",
                      "firstName": "Anand",
                      "contactNumberType": "MOBILE",
                      "bank": {
                        "bankCode": "800554",
                        "bankCodeType": "SORT_CODE",
                        "accountNumberType": "DEFAULT",
                        "accountName": "Money Market",
                        "countryCode": "GBR",
                        "bankName": "Barclays",
                        "accountNumber": "6970093",
                        "currencyCode": "GBP"
                      },
                      "cityOfBirth": "London",
                      "identificationList": [
                        {
                          "idType": "P",
                          "idNumber": "P128766Z",
                          "idIssueCountry": "GBR"
                        }
                      ],
                      "address": {
                        "country": "GBR",
                        "city": "London",
                        "postalCode": "SW1A 2AA",
                        "addressLine1": "10 Downing St",
                        "addressLine2": "2124 HEH"
                      },
                      "contactEmail": "testmailid2024@visa.com",
                      "countryOfBirth": "GBR",
                      "contactNumber": "+123456789",
                      "dateOfBirth": "1991-05-27",
                      "type": "I"
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "4304630005267011",
                      "lastName": "Russel",
                      "firstName": "Saha",
                      "contactNumberType": "MOBILE",
                      "cityOfBirth": "London",
                      "address": {
                        "country": "GBR",
                        "city": "Manchester",
                        "postalCode": "20500",
                        "addressLine1": "1600 Pennsylvania Ave",
                        "addressLine2": "Apt 4B"
                      },
                      "contactEmail": "testmail389abc@visa.com",
                      "countryOfBirth": "GBR",
                      "contactNumber": "+123456789",
                      "dateOfBirth": "1988-02-08",
                      "type": "I"
                    },
                    "payoutMethod": "B",
                    "transactionDetail": {
                      "businessApplicationId": "PP",
                      "transactionAmount": "1557",
                      "transactionCurrencyCode": "GBP",
                      "settlementCurrencyCode": "GBP",
                      "endToEndId": "330016463808",
                      "clientReferenceId": "644335751133",
                      "senderSourceOfFunds": "01",
                      "payoutSpeed": "STANDARD"
                    }
                  }
                },
                "Send Payout Cards 400 request": {
                  "summary": "Send Payout Cards 400 request",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Alba",
                      "firstName": "Jessica",
                      "address": {
                        "country": "USA",
                        "city": "Florida",
                        "postalCode": "33634",
                        "addressLine1": "2 Marcus Clarke St,"
                      },
                      "dateOfBirth": "2001-01-01",
                      "type": "I",
                      "card": {
                        "accountType": "00",
                        "accountNumber": "4957030420210454",
                        "expirationDate": "2027-03"
                      }
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "A42434234S324234",
                      "lastName": "Smith",
                      "firstName": "John",
                      "address": {
                        "country": "USA",
                        "city": "Camden",
                        "postalCode": "15205",
                        "addressLine1": "4616 Stuart Street",
                        "addressLine2": "Lane 1",
                        "state": "NJ"
                      },
                      "dateOfBirth": "1989-04-22",
                      "type": "I",
                      "card": {
                        "accountType": "00",
                        "accountNumber": "4957030420210454",
                        "expirationDate": "2027-03"
                      }
                    },
                    "payoutMethod": "C",
                    "transactionDetail": {
                      "surcharge": "1",
                      "initiatingPartyId": "1002",
                      "localTransactionDateTime": "{{curDate}}T15:26:12",
                      "businessApplicationId": "PP",
                      "purposeOfPayment": "Remittance",
                      "transactionAmount": 100.21,
                      "transactionCurrencyCode": "USD",
                      "clientReferenceId": "45645645645645"
                    }
                  }
                },
                "Send payout Cards Pull": {
                  "summary": "Send payout Cards Pull",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Alba",
                      "firstName": "Jessica",
                      "address": {
                        "country": "USA",
                        "city": "Florida",
                        "postalCode": "33634",
                        "addressLine1": "2 Marcus Clarke St,"
                      },
                      "dateOfBirth": "2001-01-01",
                      "type": "I"
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "A42434234S324234",
                      "lastName": "Smith",
                      "firstName": "John",
                      "address": {
                        "country": "USA",
                        "city": "Camden",
                        "postalCode": "15205",
                        "addressLine1": "4616 Stuart Street",
                        "addressLine2": "Lane 1",
                        "state": "NJ"
                      },
                      "dateOfBirth": "1989-04-22",
                      "type": "I",
                      "card": {
                        "accountType": "00",
                        "accountNumber": "4005520000011126",
                        "expirationDate": "2027-03"
                      }
                    },
                    "payoutMethod": "C",
                    "transactionDetail": {
                      "surcharge": "1",
                      "initiatingPartyId": "1002",
                      "localTransactionDateTime": "2024-07-22T15:26:12",
                      "businessApplicationId": "PP",
                      "purposeOfPayment": "Remittance",
                      "transactionAmount": 100.21,
                      "transactionCurrencyCode": "USD",
                      "clientReferenceId": "64433575113"
                    }
                  }
                },
                "Send Payout Wallet": {
                  "summary": "Send Payout Wallet",
                  "value": {
                    "recipientDetail": {
                      "lastName": "Bharath",
                      "firstName": "Anand",
                      "contactNumberType": "MOBILE",
                      "cityOfBirth": "London",
                      "identificationList": [
                        {
                          "idType": "P",
                          "idNumber": "P128766Z",
                          "idIssueCountry": "UGA"
                        }
                      ],
                      "wallet": {
                        "countryCode": "UGA",
                        "accountIdentifier": "+8801888513100",
                        "accountIdentifierType": "PHONENUMBER",
                        "currencyCode": "UGX",
                        "operatorName": "ALIPAY"
                      },
                      "address": {
                        "country": "UGA",
                        "city": "KAMPALA",
                        "postalCode": "SW1A 2AA",
                        "addressLine1": "10 Downing St",
                        "addressLine2": "2124 HEH"
                      },
                      "contactEmail": "testmailid2024@visa.com",
                      "countryOfBirth": "UGA",
                      "contactNumber": "+123456789",
                      "dateOfBirth": "1991-05-27",
                      "type": "I"
                    },
                    "senderDetail": {
                      "senderReferenceNumber": "4304630005267011",
                      "lastName": "Russel",
                      "firstName": "Saha",
                      "contactNumberType": "MOBILE",
                      "cityOfBirth": "London",
                      "address": {
                        "country": "GBR",
                        "city": "Manchester",
                        "postalCode": "20500",
                        "addressLine1": "1600 Pennsylvania Ave",
                        "addressLine2": "Apt 4B"
                      },
                      "contactEmail": "testmail389abc@visa.com",
                      "countryOfBirth": "GBR",
                      "contactNumber": "+123456789",
                      "dateOfBirth": "1988-02-08",
                      "type": "I"
                    },
                    "payoutMethod": "W",
                    "transactionDetail": {
                      "initiatingPartyId": "1002",
                      "businessApplicationId": "PP",
                      "transactionAmount": "3613250",
                      "transactionCurrencyCode": "UGX",
                      "settlementCurrencyCode": "USD",
                      "endToEndId": "330016463808",
                      "clientReferenceId": "13501445172",
                      "senderSourceOfFunds": "01",
                      "payoutSpeed": "STANDARD"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payout response body",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AccountandWalletPayoutResponse-3"
                    },
                    {
                      "$ref": "#/components/schemas/CardPayoutResponse-6"
                    }
                  ]
                },
                "examples": {
                  "Send Payout Accounts": {
                    "summary": "Send Payout Accounts",
                    "value": {
                      "transactionDetail": {
                        "transactionDateTime": "2022-11-16T10:36:07.000Z",
                        "settlementCurrencyCode": "GBP",
                        "payoutId": "172167337682452",
                        "endToEndId": "330016463808",
                        "clientReferenceId": "32917133186",
                        "payoutSpeed": "STANDARD",
                        "initiatingPartyId": 1002,
                        "fxConversionRate": 1,
                        "expectedPostingDate": "2022-11-16",
                        "destinationCurrencyCode": "GBP",
                        "transactionAmount": 1557,
                        "transactionCurrencyCode": "GBP",
                        "settlementAmount": 1557,
                        "status": "PAYMENT_RECEIVED",
                        "destinationAmount": 1557
                      }
                    }
                  },
                  "Send Payout Cards Push": {
                    "summary": "Send Payout Cards Push",
                    "value": {
                      "transactionDetail": {
                        "initiatingPartyId": 1002,
                        "transactionDateTime": "2024-07-22T19:05:30.000Z",
                        "networkResponses": [
                          {
                            "systemTraceAuditNumber": "420419",
                            "cardAcceptorId": "CA-IDCode-89",
                            "approvalCode": "21324K",
                            "acquirerCountryCode": "840",
                            "terminalId": "jAYcnj6V",
                            "acquiringBin": 445654,
                            "retrievalReferenceNumber": "420419001676",
                            "type": "PushFundsTransaction",
                            "transmissionDateTime": "2024-07-22T19:05:30.000Z",
                            "transactionAmount": 100.21,
                            "transactionCurrencyCode": "USD",
                            "actionCode": "00",
                            "responseSource": "5"
                          }
                        ],
                        "payoutId": "234234322342343",
                        "clientReferenceId": "98148028712",
                        "status": "PAYMENT_DELIVERED"
                      }
                    }
                  },
                  "Send Payout Wallet 400 Request": {
                    "summary": "Send Payout Wallet 400 Request",
                    "value": [
                      {
                        "reason": "invalidPayoutRequest",
                        "details": [
                          {
                            "code": 11055,
                            "location": "transactionDetail.businessApplicationId",
                            "message": "Value provided for one of the fields is invalid."
                          }
                        ],
                        "status": 400
                      }
                    ]
                  },
                  "Send Payout Cards Pull 400 request": {
                    "summary": "Send Payout Cards Pull 400 request",
                    "value": [
                      {
                        "reason": "invalidPayoutRequest",
                        "details": [
                          {
                            "code": 11055,
                            "location": "senderDetail.dateOfBirth",
                            "message": "Value provided for one of the fields is invalid."
                          }
                        ],
                        "status": 400
                      }
                    ]
                  },
                  "Send payout Accounts 400 Request": {
                    "summary": "Send payout Accounts 400 Request",
                    "value": [
                      {
                        "reason": "invalidPayoutRequest",
                        "details": [
                          {
                            "code": 11000,
                            "location": "transactionDetail.initiatingPartyId",
                            "message": "Mandatory value is missing."
                          }
                        ],
                        "status": 400
                      }
                    ]
                  },
                  "Send Payout Cards 400 request": {
                    "summary": "Send Payout Cards 400 request",
                    "value": [
                      {
                        "reason": "invalidPayoutRequest",
                        "details": [
                          {
                            "code": 45007,
                            "location": "Undefined",
                            "message": "Sender and Recipient cannot have card information in a single request."
                          }
                        ],
                        "status": 400
                      }
                    ]
                  },
                  "Send payout Cards Pull": {
                    "summary": "Send payout Cards Pull",
                    "value": {
                      "transactionDetail": {
                        "initiatingPartyId": 1002,
                        "transactionDateTime": "2024-07-22T19:09:18.000Z",
                        "networkResponses": [
                          {
                            "systemTraceAuditNumber": "420419",
                            "cardAcceptorId": "CA-IDCode-89",
                            "approvalCode": "98765X",
                            "acquirerCountryCode": "840",
                            "terminalId": "wnTOMUzL",
                            "acquiringBin": 445654,
                            "retrievalReferenceNumber": "420419029890",
                            "type": "PullFundsTransaction",
                            "transmissionDateTime": "2024-07-22T19:09:18.000Z",
                            "transactionAmount": 100.21,
                            "transactionCurrencyCode": "USD",
                            "actionCode": "00",
                            "responseSource": "5"
                          }
                        ],
                        "payoutId": "540433894976334",
                        "clientReferenceId": "64433575113",
                        "status": "PAYMENT_DELIVERED"
                      }
                    }
                  },
                  "Send Payout Wallet": {
                    "summary": "Send Payout Wallet",
                    "value": {
                      "transactionDetail": {
                        "transactionDateTime": "2023-05-03T11:09:51.938Z",
                        "settlementCurrencyCode": "USD",
                        "payoutId": "172167453453637",
                        "endToEndId": "330016463808",
                        "clientReferenceId": "13501445172",
                        "payoutSpeed": "STANDARD",
                        "initiatingPartyId": 1002,
                        "fxConversionRate": 3613.25,
                        "expectedPostingDate": "2023-05-03",
                        "destinationCurrencyCode": "UGX",
                        "transactionAmount": 3613250,
                        "transactionCurrencyCode": "UGX",
                        "settlementAmount": 1000,
                        "status": "PAYMENT_RECEIVED",
                        "destinationAmount": 3613250
                      }
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Transaction is accepted",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/202AccountPayoutCreatedResponse-1"
                    }
                  ]
                },
                "examples": {
                  "Send Payout Accounts": {
                    "summary": "Send Payout Accounts",
                    "value": {
                      "transactionDetail": {
                        "transactionDateTime": "2022-11-16T10:36:07.000Z",
                        "settlementCurrencyCode": "GBP",
                        "payoutId": "172167337682452",
                        "endToEndId": "330016463808",
                        "clientReferenceId": "32917133186",
                        "payoutSpeed": "STANDARD",
                        "initiatingPartyId": 1002,
                        "fxConversionRate": 1,
                        "expectedPostingDate": "2022-11-16",
                        "destinationCurrencyCode": "GBP",
                        "transactionAmount": 1557,
                        "transactionCurrencyCode": "GBP",
                        "settlementAmount": 1557,
                        "status": "PAYMENT_RECEIVED",
                        "destinationAmount": 1557
                      }
                    }
                  },
                  "Send Payout Cards Push": {
                    "summary": "Send Payout Cards Push",
                    "value": {
                      "transactionDetail": {
                        "initiatingPartyId": 1002,
                        "transactionDateTime": "2024-07-22T19:05:30.000Z",
                        "networkResponses": [
                          {
                            "systemTraceAuditNumber": "420419",
                            "cardAcceptorId": "CA-IDCode-89",
                            "approvalCode": "21324K",
                            "acquirerCountryCode": "840",
                            "terminalId": "jAYcnj6V",
                            "acquiringBin": 445654,
                            "retrievalReferenceNumber": "420419001676",
                            "type": "PushFundsTransaction",
                            "transmissionDateTime": "2024-07-22T19:05:30.000Z",
                            "transactionAmount": 100.21,
                            "transactionCurrencyCode": "USD",
                            "actionCode": "00",
                            "responseSource": "5"
                          }
                        ],
                        "payoutId": "234234322342343",
                        "clientReferenceId": "98148028712",
                        "status": "PAYMENT_DELIVERED"
                      }
                    }
                  },
                  "Send Payout Wallet 400 Request": {
                    "summary": "Send Payout Wallet 400 Request",
                    "value": [
                      {
                        "reason": "invalidPayoutRequest",
                        "details": [
                          {
                            "code": 11055,
                            "location": "transactionDetail.businessApplicationId",
                            "message": "Value provided for one of the fields is invalid."
                          }
                        ],
                        "status": 400
                      }
                    ]
                  },
                  "Send Payout Cards Pull 400 request": {
                    "summary": "Send Payout Cards Pull 400 request",
                    "value": [
                      {
                        "reason": "invalidPayoutRequest",
                        "details": [
                          {
                            "code": 11055,
                            "location": "senderDetail.dateOfBirth",
                            "message": "Value provided for one of the fields is invalid."
                          }
                        ],
                        "status": 400
                      }
                    ]
                  },
                  "Send payout Accounts 400 Request": {
                    "summary": "Send payout Accounts 400 Request",
                    "value": [
                      {
                        "reason": "invalidPayoutRequest",
                        "details": [
                          {
                            "code": 11000,
                            "location": "transactionDetail.initiatingPartyId",
                            "message": "Mandatory value is missing."
                          }
                        ],
                        "status": 400
                      }
                    ]
                  },
                  "Send Payout Cards 400 request": {
                    "summary": "Send Payout Cards 400 request",
                    "value": [
                      {
                        "reason": "invalidPayoutRequest",
                        "details": [
                          {
                            "code": 45007,
                            "location": "Undefined",
                            "message": "Sender and Recipient cannot have card information in a single request."
                          }
                        ],
                        "status": 400
                      }
                    ]
                  },
                  "Send payout Cards Pull": {
                    "summary": "Send payout Cards Pull",
                    "value": {
                      "transactionDetail": {
                        "initiatingPartyId": 1002,
                        "transactionDateTime": "2024-07-22T19:09:18.000Z",
                        "networkResponses": [
                          {
                            "systemTraceAuditNumber": "420419",
                            "cardAcceptorId": "CA-IDCode-89",
                            "approvalCode": "98765X",
                            "acquirerCountryCode": "840",
                            "terminalId": "wnTOMUzL",
                            "acquiringBin": 445654,
                            "retrievalReferenceNumber": "420419029890",
                            "type": "PullFundsTransaction",
                            "transmissionDateTime": "2024-07-22T19:09:18.000Z",
                            "transactionAmount": 100.21,
                            "transactionCurrencyCode": "USD",
                            "actionCode": "00",
                            "responseSource": "5"
                          }
                        ],
                        "payoutId": "540433894976334",
                        "clientReferenceId": "64433575113",
                        "status": "PAYMENT_DELIVERED"
                      }
                    }
                  },
                  "Send Payout Wallet": {
                    "summary": "Send Payout Wallet",
                    "value": {
                      "transactionDetail": {
                        "transactionDateTime": "2023-05-03T11:09:51.938Z",
                        "settlementCurrencyCode": "USD",
                        "payoutId": "172167453453637",
                        "endToEndId": "330016463808",
                        "clientReferenceId": "13501445172",
                        "payoutSpeed": "STANDARD",
                        "initiatingPartyId": 1002,
                        "fxConversionRate": 3613.25,
                        "expectedPostingDate": "2023-05-03",
                        "destinationCurrencyCode": "UGX",
                        "transactionAmount": 3613250,
                        "transactionCurrencyCode": "UGX",
                        "settlementAmount": 1000,
                        "status": "PAYMENT_RECEIVED",
                        "destinationAmount": 3613250
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponses-7"
          },
          "401": {
            "$ref": "#/components/responses/401ErrorResponse-3"
          },
          "403": {
            "$ref": "#/components/responses/403ErrorResponse-3"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1visadirect-connect~1v1~1payouts/post",
            "default": false
          }
        ],
        "x-hideTryIt": true,
        "x-sortOrder": 0
      }
    }
  },
  "components": {
    "schemas": {
      "FXRateRequest": {
        "required": [
          "destinationCurrencyCode",
          "initiatingPartyId",
          "payoutMethod",
          "requestId",
          "sourceCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestId"
              }
            ]
          },
          "payoutMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "quoteIdRequired": {
            "type": "boolean",
            "description": "This field is to indicate whether the quote identifier is been expected in response for use in payout transactions.\nIf the value is false, client will not receive quoteId in the API response. If the value is true, client will receive quoteId in the API response. If QuoteIdRequired field is not available in the request, the API behavior is similar to when QuoteIdRequired value is false.\n"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "sourceCurrencyCode": {
            "description": "Source amount 3-alpha currency code in ISO 4217\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "destinationCurrencyCode": {
            "description": "Destination amount 3-alpha currency code in ISO 4217\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          }
        }
      },
      "AlphaCountryCode": {
        "maxLength": 3,
        "minLength": 3,
        "type": "string",
        "description": "3-character ISO-3166 (Alpha-3) country code.",
        "example": "USA"
      },
      "PayoutNotificationReceivedRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction, only received in 202\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. Only happens in 202.\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_RECEIVED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for the original payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "$ref": "#/components/schemas/PayoutSpeed"
              },
              "reasonDetails": {
                "$ref": "#/components/schemas/ReasonDetails"
              },
              "secondaryStatus": {
                "type": "string",
                "description": "Secondary Status of the transaction, only received in 202",
                "example": "RECALL_REQUESTED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SecondaryStatus"
                  }
                ],
                "enum": [
                  "RECALL_REQUESTED",
                  "RECALL_REJECTED",
                  "RECALL_ACCEPTED",
                  "RECALL_PROCESSING",
                  "PENDING_SETTLEMENT",
                  "SETTLEMENT_INITIATED",
                  "SETTLED"
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Transaction Information And Status - Remitted Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate-1"
                  }
                ]
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "actualSettlementDate": {
                "type": "string",
                "description": "Actual Settlement Date of the Payment"
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "fundsAvailableDateTime": {
                "type": "string",
                "description": "Funds available Date and Time of the payment"
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Remitted Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "WalletPayoutRequest": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletTransactionDetail"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest"
          }
        ]
      },
      "PayoutNotificationReceivedRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod-1"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction, only received in 202\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. Only happens in 202.\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_RECEIVED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for the original payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "$ref": "#/components/schemas/PayoutSpeed"
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId-1"
                  }
                ]
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Transaction Information And Status - Remitted Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate-2"
                  }
                ]
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Remitted Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "ReasonDetails": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReturnReasonCode"
              }
            ]
          },
          "comment": {
            "$ref": "#/components/schemas/ReturnReasonCodeComment"
          },
          "description": {
            "$ref": "#/components/schemas/ReturnReasonCodeDescription"
          }
        }
      },
      "AccountAndWalletSenderIdentificationList": {
        "type": "array",
        "description": "Identification list of sender",
        "items": {
          "type": "object",
          "properties": {
            "idType": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdTypeAccountAndWallet"
                }
              ]
            },
            "idNumber": {
              "description": "Sender identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments:\"Ultimate Debtor Private Identification\" or  \"Ultimate Debtor Organisation Identification\" <br> For 3rd party payments:\"Debtor Private Identification\" or\"Debtor Organisation Identification\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdNumber"
                }
              ]
            },
            "idIssueCountry": {
              "description": "Sender identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \n\nFormat: 3-character ISO (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Private Identification Issuer\" or \"Ultimate Debtor Organisation Identification Issuer\" <br> For 3rd party payments: \"Debtor Private Identification Issuer\" or \"Debtor Organisation Identification Issuer\"\n",
              "example": "USD",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCountryCode"
                }
              ]
            }
          }
        }
      },
      "PayoutNotificationReceivedRequest-4": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction, only received in 202\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. Only happens in 202.\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_RECEIVED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for the original payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId-1"
              },
              "payoutSpeed": {
                "$ref": "#/components/schemas/PayoutSpeed"
              },
              "reasonDetails": {
                "$ref": "#/components/schemas/ReasonDetails"
              },
              "secondaryStatus": {
                "type": "string",
                "description": "Secondary Status of the transaction, only received in 202",
                "example": "RECALL_REQUESTED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SecondaryStatus"
                  }
                ],
                "enum": [
                  "RECALL_REQUESTED",
                  "RECALL_REJECTED",
                  "RECALL_ACCEPTED",
                  "RECALL_PROCESSING",
                  "PENDING_SETTLEMENT",
                  "SETTLEMENT_INITIATED",
                  "SETTLED"
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Transaction Information And Status - Remitted Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate-1"
                  }
                ]
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "actualSettlementDate": {
                "type": "string",
                "description": "Actual Settlement Date of the Payment"
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "fundsAvailableDateTime": {
                "type": "string",
                "description": "Funds available Date and Time of the payment"
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Remitted Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "PayoutWalletRequest-4": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“W” – Visa Direct Wallet\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-1"
              },
              "cityOfBirth": {
                "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CityOfBirth"
                  }
                ]
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name:<br>For 4th  party payments: \"Ultimate Debtor Contact Email Address\" <br>For 3rd party payments:\"Debtor Contact Email Address\"\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447809713678\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData"
              },
              "countryOfBirth": {
                "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCountryCode"
                  }
                ]
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/AccountAndWalletSenderIdentificationList"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber-2"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-3"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/Wallet-2"
              },
              "cityOfBirth": {
                "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CityOfBirth"
                  }
                ]
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData"
              },
              "countryOfBirth": {
                "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCountryCode"
                  }
                ]
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccountAndWalletRecipientIdentificationList"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-3"
              }
            ]
          }
        }
      },
      "PayoutWalletRequest-1": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“W” – Visa Direct Wallet\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-1"
              },
              "cityOfBirth": {
                "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CityOfBirth"
                  }
                ]
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name:<br>For 4th  party payments: \"Ultimate Debtor Contact Email Address\" <br>For 3rd party payments:\"Debtor Contact Email Address\"\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447809713678\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData"
              },
              "countryOfBirth": {
                "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCountryCode"
                  }
                ]
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList-1"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber-1"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-1"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/Wallet"
              },
              "cityOfBirth": {
                "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CityOfBirth"
                  }
                ]
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData"
              },
              "countryOfBirth": {
                "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCountryCode"
                  }
                ]
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-1"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-1"
              }
            ]
          }
        }
      },
      "200CardTransactionStatus": {
        "type": "string",
        "description": "- PAYMENT_DELIVERED: Visa has approved the card payout instruction, fund is moved\n- PAYMENT_DECLINED: Visa has declined the card payout instruction, fund is not moved\n- PAYMENT_RETURNED: Visa has reverted the card payout instruction, fund is not moved\n- PAYMENT_ERROR: Visa encountered error when processing the card payout instruction, fund is in unknown state\n",
        "enum": [
          "PAYMENT_DELIVERED",
          "PAYMENT_DECLINED",
          "PAYMENT_RETURNED",
          "PAYMENT_ERROR"
        ]
      },
      "PayoutWalletRequest-2": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“W” – Visa Direct Wallet\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod-1"
              }
            ]
          },
          "senderDetail": {
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-2"
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name:<br>For 4th  party payments: \"Ultimate Debtor Contact Email Address\" <br>For 3rd party payments:\"Debtor Contact Email Address\"\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-1"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList-2"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber-1"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-2"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/Wallet-1"
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456 \n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-1"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-2"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-2"
              }
            ]
          }
        }
      },
      "PayoutSpeed": {
        "type": "string",
        "description": "Originating Entity to indicate the desired payout speed for the payment. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nISO20022 field name: Instruction Priority\n",
        "example": "standard",
        "enum": [
          "STANDARD",
          "PREMIUM"
        ]
      },
      "RecipientAdditionalData": {
        "type": "array",
        "description": "Additional fields that are needed in order to complete the additional screening. The additional fields can be included as name value pairs (Field name, Field value)",
        "items": {
          "required": [
            "name",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "Originating Entity to send additional recipient information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the name component of the name-value pair.\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataName"
                }
              ]
            },
            "value": {
              "description": "Originating Entity to send additional recipient information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the value  component of the name-value pair.\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataValue"
                }
              ]
            }
          }
        }
      },
      "TerminalId": {
        "maxLength": 8,
        "minLength": 1,
        "type": "string",
        "description": "The identifier for the terminal at a card acceptor location. If sending transactions from a card not present environment, use the same value for all transactions. An identification code of fewer than 8 positions must be left-justified and the remainder of the field space-filled.\n"
      },
      "FieldValue": {
        "title": "FieldValue",
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "List item label."
          },
          "option": {
            "type": "string",
            "description": "List option value."
          }
        },
        "description": "Is used to create a select list within a User Interface for the 'additionalFieldWithValues' data field."
      },
      "QuoteIdStr": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "This field contains the unique number representing the FX Quote\n"
      },
      "IdType-1": {
        "type": "string",
        "description": "Identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* BTHD - Date of birth \n* CUID - Customer identification - unspecified \n* NTID - National identification \n* PASN - Passport number \n* DRLN - Driver license \n* TXIN - Tax identification \n* CPNY - Company registration number \n* PRXY - Proxy identification \n* SSNB - Social security number \n* ARNB - Alien registration number \n* LAWE - Law enforcement identification \n* MILI - Military identification \n* TRVL - Travel identification - non-passport \n* EMAL - Email \n* PHON - Phone number\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Identification Code\n",
        "example": "PASN",
        "enum": [
          "BTHD",
          "CUID",
          "NTID",
          "PASN",
          "DRLN",
          "TXIN",
          "CPNY",
          "PRXY",
          "SSNB",
          "ARNB",
          "LAWE",
          "MILI",
          "TRVL",
          "EMAL",
          "PHON"
        ]
      },
      "RecipientCompany-3": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Recipient company name. <br>Must not contain exclusively numeric characters\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"C\" for Company \n\nISO20022 field name: Creditor Identification Type\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress-1"
          }
        }
      },
      "TransactionResult": {
        "required": [
          "acquirerCountryCode",
          "acquiringBin",
          "cardAcceptorId",
          "retrievalReferenceNumber",
          "systemTraceAuditNumber",
          "terminalId",
          "transactionAmount",
          "transactionCurrencyCode",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PullFundsTransaction",
              "PushFundsTransaction",
              "PullFundsTransactionReversal"
            ]
          },
          "vauData": {
            "$ref": "#/components/schemas/VAUData"
          },
          "networkId": {
            "$ref": "#/components/schemas/NetworkId"
          },
          "actionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Response code that provides the result of the payout request. List of <a href=\"https://developer.visa.com/request_response_codes#action_code\">valid response codes</a>\n",
            "example": "00"
          },
          "terminalId": {
            "$ref": "#/components/schemas/TerminalId"
          },
          "acquiringBin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringBin"
              }
            ]
          },
          "approvalCode": {
            "description": "This is a unique authorization code for an approved transaction from Issuer\n\nISO20022 field name: N/A\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalCode"
              }
            ]
          },
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            ]
          },
          "cardAcceptorId": {
            "description": "An identifier that uniquely identifies the Originating Entity.  For Push to Card transactions, Card Acceptor Terminal ID (CAID) should be populated\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardAcceptorId"
              }
            ]
          },
          "responseSource": {
            "$ref": "#/components/schemas/ResponseSource"
          },
          "transactionAmount": {
            "description": "This field contains the transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "originalActionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Contains a code that provides the result of original payout request when current request is identified as duplicate of original and actionCode will be 94."
          },
          "acquirerCountryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "transmissionDateTime": {
            "description": "The time the request was processed by Visa\n",
            "example": "2021-01-01T22:52:46.000Z",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "systemTraceAuditNumber": {
            "description": "This field contains a number generated by Visa that uniquely identifies a transaction and all message types. The trace number is a key data element used to match a response to its request or to match a message to others for a given transaction set\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemTraceAuditNumber"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: \"PHP\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "retrievalReferenceNumber": {
            "description": "This is a unique identifier generated by Visa for a card transaction\n\nThe format is ydddhhnnnnnn\nyddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). \nhh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. \nnnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/RetrievalReferenceNumber"
              }
            ]
          }
        }
      },
      "RecipientCompany-1": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Recipient company name. <br>Must not contain exclusively numeric characters\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"C\" for Company \n\nISO20022 field name: Creditor Identification Type       \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress-1"
          }
        }
      },
      "RecipientCompany-2": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Recipient company name. <br>Must not contain all numeric characters\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"C\" for Company \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress-2"
          }
        }
      },
      "TransactionIdType-1": {
        "type": "string",
        "description": "This field indicates the type of identifier\n- CLIENT_REFERENCE_ID is merchant's transaction reference ID\n- PAYOUT_ID is Visa's transaction reference ID\n",
        "enum": [
          "CLIENT_REFERENCE_ID",
          "PAYOUT_ID"
        ]
      },
      "ReturnReasonCode": {
        "maxLength": 5,
        "minLength": 5,
        "type": "string",
        "description": "If the Transaction Status is RETURNED or REJECTED then Return reason code will be populated\n\nISO20022 field name: Payment Return - Reason Code  \n\nCodes and descriptions please refer to Visa Payment Guide\n",
        "example": "RE101"
      },
      "ChargeBearer": {
        "type": "string",
        "description": "Specify which party will pay charges due for processing of the payment. Possible values are DEBT (charges borne by debtor), CRED (charges borne by Creditor), SHAR (charges shared by debtor and creditor)\n",
        "enum": [
          "DEBT",
          "CRED",
          "SHAR"
        ]
      },
      "CardPayoutResponse-6": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionResponse-3"
              }
            ]
          }
        },
        "description": "The 'transactionDetail' contains card payout response.\n"
      },
      "CardPayoutResponse-4": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionResponse-1"
              }
            ]
          }
        },
        "description": "The 'transactionDetail' contains card payout response.\n"
      },
      "CardPayoutResponse-5": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionResponse-2"
              }
            ]
          }
        },
        "description": "The 'transactionDetail' contains card payout response.\n"
      },
      "CardPayoutResponse-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/200CardTransactionStatus"
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionResult": {
                "type": "array",
                "description": "The array of 'transactionResult' contains card network's processing details.\n",
                "items": {
                  "$ref": "#/components/schemas/TransactionResult-2"
                }
              },
              "transactionDateTime": {
                "description": "The time the request was processed by Visa. For combined payouts (Pull + Push), this reflects the processing time of the \"last leg\".\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              }
            }
          }
        }
      },
      "CardPayoutResponse-3": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionResponse"
              }
            ]
          }
        },
        "description": "The 'transactionDetail' contains card payout response.\n"
      },
      "SenderTransactorDetail-3": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SenderIndividual-1"
          },
          {
            "$ref": "#/components/schemas/SenderCompany-3"
          }
        ]
      },
      "CardPayoutResponse-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/200CardTransactionStatus"
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionResult": {
                "type": "array",
                "description": "The array of 'transactionResult' contains card network's processing details.\n",
                "items": {
                  "$ref": "#/components/schemas/TransactionResult-1"
                }
              },
              "transactionDateTime": {
                "description": "The time the request was processed by Visa. For combined payouts (Pull + Push), this reflects the processing time of the \"last leg\".\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              }
            }
          }
        }
      },
      "SenderTransactorDetail-2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SenderIndividual-2"
          },
          {
            "$ref": "#/components/schemas/SenderCompany-2"
          }
        ]
      },
      "ActionCode": {
        "type": "string",
        "description": "Represents action on the payout",
        "enum": [
          "CANCEL"
        ]
      },
      "SenderTransactorDetail-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SenderIndividual-1"
          },
          {
            "$ref": "#/components/schemas/SenderCompany-1"
          }
        ]
      },
      "CardEligibilityResult": {
        "required": [
          "billingCurrencyCode",
          "billingCurrencyCodeMinorDigits",
          "cardProductType",
          "issuerCountryCode",
          "nonVisaCardPlatformCode",
          "visaCardPlatformCode"
        ],
        "type": "object",
        "properties": {
          "domestic": {
            "type": "object",
            "properties": {
              "pullFunds": {
                "description": "Domestic pull funds eligible networks\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Network"
                  }
                ]
              },
              "moneyTransfer": {
                "type": "object",
                "properties": {
                  "fastFundsNetworks": {
                    "description": "Eligible fast funds networks\n",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Network"
                      }
                    ]
                  },
                  "nonFastFundsNetworks": {
                    "description": "Eligible non-fast funds networks\n",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Network"
                      }
                    ]
                  }
                },
                "description": "Money transfer eligibility\n"
              },
              "gamblingTransfer": {
                "type": "object",
                "properties": {
                  "fastFundsNetworks": {
                    "description": "Eligible fast funds networks\n",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Network"
                      }
                    ]
                  },
                  "nonFastFundsNetworks": {
                    "description": "Eligible non-fast funds networks\n",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Network"
                      }
                    ]
                  }
                },
                "description": "Gambling transfer eligibility\n"
              },
              "nonMoneyTransfer": {
                "type": "object",
                "properties": {
                  "fastFundsNetworks": {
                    "description": "Eligible fast funds networks\n",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Network"
                      }
                    ]
                  },
                  "nonFastFundsNetworks": {
                    "description": "Eligible non-fast funds networks\n",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Network"
                      }
                    ]
                  }
                },
                "description": "Non-money transfer eligibility\n"
              }
            },
            "description": "Domestic eligibility\n"
          },
          "comboCard": {
            "type": "string",
            "description": "Indicates the type of Combo card.(Visa Cards on Visa Network Only)\n",
            "enum": [
              "Y",
              "N"
            ]
          },
          "crossBorder": {
            "type": "object",
            "properties": {
              "pullFunds": {
                "description": "Cross-border pull funds eligible networks\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Network"
                  }
                ]
              },
              "moneyTransfer": {
                "type": "object",
                "properties": {
                  "fastFundsNetworks": {
                    "description": "Eligible fast funds networks(Translate NetworkID in to sharingGroupCode in priority Order with Visa as highest priority and ranking of ppgsNetworkInfo is taken in the sequence provided by FTAI response)\n",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Network"
                      }
                    ]
                  },
                  "nonFastFundsNetworks": {
                    "description": "Eligible non-fast funds networks\n",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Network"
                      }
                    ]
                  }
                }
              },
              "gamblingTransfer": {
                "type": "object",
                "properties": {
                  "fastFundsNetworks": {
                    "description": "Eligible fast funds networks\n",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Network"
                      }
                    ]
                  },
                  "nonFastFundsNetworks": {
                    "description": "Eligible non-fast funds networks\n",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Network"
                      }
                    ]
                  }
                },
                "description": "Gambling transfer eligibility\n"
              },
              "nonMoneyTransfer": {
                "type": "object",
                "properties": {
                  "fastFundsNetworks": {
                    "description": "Eligible fast funds networks\n",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Network"
                      }
                    ]
                  },
                  "nonFastFundsNetworks": {
                    "description": "Eligible non-fast funds networks\n",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Network"
                      }
                    ]
                  }
                }
              }
            },
            "description": "Cross border eligbility\n"
          },
          "geoRestriction": {
            "type": "string",
            "description": "If the card issuer country falls geo-resticted region for the originator.\n",
            "enum": [
              "Y",
              "N"
            ]
          },
          "cardProductType": {
            "type": "string",
            "description": "The code of account funding source for the card, e.g. Credit, Debit, Prepaid, Charge, Deferred Debit.\n",
            "enum": [
              "Credit",
              "Debit",
              "Prepaid",
              "Charge",
              "Deferred Debit"
            ]
          },
          "cardSubtypeCode": {
            "type": "string",
            "description": "Visa Cards on Visa Network Only\n",
            "enum": [
              "RELOADABLE",
              "NON_RELOADABLE"
            ]
          },
          "issuerCountryCode": {
            "description": "Country code of the recipient issuer’s country.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "prepaidSubtypeCode": {
            "type": "string",
            "description": "Indicates the subtype code of prepaid product. This is a 2-character alphabetic code.(Visa Cards on Visa Network Only)\n",
            "enum": [
              "GP",
              "AC",
              "AE",
              "AG",
              "AI",
              "CG",
              "CS",
              "DS",
              "EN",
              "EX",
              "LP",
              "MA",
              "MB",
              "MG",
              "MX",
              "TK",
              "VA",
              "VF",
              "VM",
              "VN",
              "VR"
            ]
          },
          "billingCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "integer",
            "description": "Use a 3-digit numeric currency code for the card billing currency of the PAN.<br>Refer to <a href=\"/request_response_codes#currency_codes\">ISO Codes</a>\n"
          },
          "visaCardPlatformCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Visa route cardPlatformCode indicates the type of card. This is a 2-character alphabetic code.\n"
          },
          "nonVisaCardPlatformCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Non-Visa route platform code indicates the type of card. This is a 2-character alphabetic code.\n"
          },
          "billingCurrencyCodeMinorDigits": {
            "type": "string",
            "description": "Identifies the number of decimal positions that should be present in any amounts for the requested card's billing currency.\n"
          },
          "pushFundsCrossBorderAuthApprovalInd": {
            "type": "string",
            "description": "Indicates an auth approval rate for Cross border OCT of the issuer account range/BIN of the recipient card for the last three months. Below are the possible values.(Visa Cards on Visa Network Only)\n",
            "enum": [
              "READY",
              "OPTIMIZED",
              "NON-OPTIMIZED"
            ]
          }
        }
      },
      "EndToEndId-1": {
        "maxLength": 35,
        "minLength": 8,
        "type": "string",
        "description": "Identifier assigned by the Originating Entity's customer to track the transaction end-to-end\n\nConditional: Required if payout to a wallet recipient\n\nISO20022 field name: end-to-end identification\n",
        "example": "5003f6a02c4411b2aa5747378ae5331"
      },
      "Wallet-2": {
        "required": [
          "accountIdentifier",
          "accountIdentifierType",
          "countryCode",
          "currencyCode",
          "operatorName"
        ],
        "type": "object",
        "properties": {
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "currencyCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "operatorName": {
            "type": "string",
            "description": "This identifies the non bank wallet operator that has issued the account to the recipient and is going to receive and post the funds to the recipient’s wallet.\n(Refer to Payouts Endpoint Guide on list of supported Wallet Operators).\n",
            "enum": [
              "WECHATPAY"
            ]
          },
          "accountIdentifier": {
            "maxLength": 210,
            "minLength": 1,
            "type": "string",
            "description": "The wallet recipient's actual account identifier associated with the wallet operator (e.g., wallet address - phone/email/username that identifies the account associated with the wallet operator)\n"
          },
          "accountIdentifierType": {
            "type": "string",
            "description": "The type of account identifier used by the recipient. \n\nSupported values are PHONENUMBER, EMAIL and USERNAME.\n",
            "example": "PHONENUMBER",
            "enum": [
              "PHONENUMBER",
              "EMAIL",
              "USERNAME"
            ]
          }
        },
        "description": "Recipient's wallet object\n\nConditional object when payoutMethod has value 'W'\n"
      },
      "BusinessApplicationId": {
        "maxLength": 2,
        "minLength": 2,
        "type": "string",
        "description": "Business Application Identifier (BAI) identifies the type of program for which the payment is being sent, i.e. whether it is a funds disbursement, money transfer etc. It should be a valid value allowed by Visa and approved for the program during onboarding.\n\nValid BAI for Visa Direct Account & Wallet: \n- Money transfer: AA, PP; \n- Non-money transfer: BB, FD, GD, GP, LO, MD, OG, PD;\n",
        "example": "PP"
      },
      "Wallet-1": {
        "required": [
          "accountIdentifier",
          "accountIdentifierType",
          "countryCode",
          "currencyCode",
          "operatorName"
        ],
        "type": "object",
        "properties": {
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "currencyCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "operatorName": {
            "type": "string",
            "description": "This identifies the operator that has issued the account to the recipient and is going to receive and post the funds to the recipient’s wallet.\n(Refer to Payouts Endpoint Guide on list of supported Wallet Operators).\n"
          },
          "accountIdentifier": {
            "maxLength": 210,
            "minLength": 1,
            "type": "string",
            "description": "The wallet recipient's actual account identifier associated with the wallet operator (e.g., wallet address - phone/email/username that identifies the account associated with the wallet operator)\n"
          },
          "accountIdentifierType": {
            "type": "string",
            "description": "The type of account identifier used by the recipient. \n\nSupported values are PHONENUMBER, EMAIL and USERNAME.          \n",
            "example": "PHONENUMBER",
            "enum": [
              "PHONENUMBER",
              "EMAIL",
              "USERNAME"
            ]
          }
        },
        "description": "Recipient's wallet object\n\nConditional object when payoutMethod has value 'W'\n"
      },
      "AccountandWalletPayoutResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutResponse-1"
          }
        ]
      },
      "CardPayoutValidateRequest": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionValidateDetail"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutCardRequest-1"
          }
        ]
      },
      "ClientReferenceId": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Identifier assigned by the Originating Entity to uniquely identify the transaction.\n\nISO20022 field name: Transaction Information And Status - Original Transaction Identification\n\nOnly alphanumeric and '-' characters are allowed.\n"
      },
      "AccountSuffix": {
        "maxLength": 4,
        "minLength": 4,
        "type": "string",
        "description": "Last four digits of the card number/PAN \nNote: This is only relevant for push to card payouts, where a card network token was sent by the Originating Entity in the payout request (in the recipientDetail.card.accountNumber field).\n"
      },
      "AccountQueryPendingResponse": {
        "$ref": "#/components/schemas/202AccountPayoutCreatedResponse-2"
      },
      "Date-1": {
        "maxLength": 10,
        "minLength": 10,
        "type": "string",
        "description": "a Date",
        "format": "date"
      },
      "AccountandWalletPayoutResponse-3": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutResponse-1"
          }
        ]
      },
      "OriginatorLedgerNotification": {
        "required": [
          "accountId",
          "amount",
          "creditDebitIndicator",
          "currencyCode",
          "entryId",
          "entryType"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 1,
            "type": "integer",
            "description": "Funding amount that is credited by the Originating Entity. Expressed in the currency provided in field currencyCode\n\nFunding amount should be numeric and  decimal is not allowed. Please refer to Visa Direct Payouts - Endpoint Guide on currency exponent for each market\n\nExample: Currency exponent for USD is 2. If the transaction amount is $100.99, then this field should populate “10099”. If the transaction amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the transaction amount is JPY 10,000, then this field should populate “10000”.",
            "example": 4300
          },
          "entryId": {
            "maxLength": 35,
            "type": "string",
            "description": "The entry Id is used to uniquely identify a ledger notification.  If two entry notifications are received with the same entry id, that means one is a duplicate."
          },
          "accountId": {
            "maxLength": 31,
            "minLength": 12,
            "type": "string",
            "description": "The accountId uniquely identifies an particular account, including currency."
          },
          "entryType": {
            "type": "string",
            "description": "Entry type helps to classify entries in ledger.\n\nPossible values:\n* 'FUNDING'\n* 'REPATRIATION'\n* 'JOURNAL'",
            "enum": [
              "FUNDING",
              "REPATRIATION",
              "JOURNAL"
            ]
          },
          "narrative": {
            "maxLength": 2000,
            "type": "string",
            "description": "An optional description of the reason why a ledger notification was performed."
          },
          "valueDate": {
            "$ref": "#/components/schemas/Date"
          },
          "endToEndId": {
            "maxLength": 35,
            "type": "string",
            "description": "Identifier assigned by the Originating Entity's customer to uniquely identify the transaction\n\nISO20022 field name: Payment Identification - EndtoEnd Identification"
          },
          "bookingDate": {
            "$ref": "#/components/schemas/Date"
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "^\\d\\d\\d$",
            "type": "string",
            "description": "The 3-digit ISO-4217 code in this field reflects the currency associated to the funding amount\n\nFormat: 3-digit ISO-4217 (numeric) currency code",
            "example": "356"
          },
          "transactionId": {
            "maxLength": 35,
            "type": "string",
            "description": "Identifier assigned by the upstream entity (Visa, in this case0) to uniquely identify the funding transaction"
          },
          "additionalInfo1": {
            "maxLength": 140,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field."
          },
          "additionalInfo2": {
            "maxLength": 140,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field."
          },
          "additionalInfo3": {
            "maxLength": 140,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field."
          },
          "creditDebitIndicator": {
            "type": "string",
            "description": "Indicates that money credited to or debited from the account\n\nPossible values:\n* `CREDIT` - Indicates that the client has funded their account.\n* `DEBIT` - Indicates that money was removed from a client account.",
            "enum": [
              "CREDIT",
              "DEBIT"
            ]
          }
        },
        "description": "Used to indicate to originators that various ledger entries has been received by Visa."
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "required": [
              "status"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "description": "The short description of the error."
              },
              "status": {
                "type": "integer",
                "description": "3 digit http status code",
                "example": 400
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "A short code indicating the specific error that occurred."
                    },
                    "message": {
                      "type": "string",
                      "description": "The long description of the specific error that occurred."
                    },
                    "location": {
                      "type": "string",
                      "description": "The place in the incoming message that the particular error occurred."
                    }
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "The long description of the error."
              }
            }
          }
        }
      },
      "ValidateWalletTransactionDetail": {
        "required": [
          "businessApplicationId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "AccountPayoutResponse-1": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutResponse-2"
          }
        ]
      },
      "ConversionRate": {
        "minimum": 0,
        "exclusiveMinimum": true,
        "type": "number",
        "format": "double",
        "example": 0.07
      },
      "AccountandWalletPayoutResponse-1": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutResponse-1"
          }
        ]
      },
      "AccountandWalletPayoutResponse-2": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutResponse-3"
          }
        ]
      },
      "AccountPayoutRequest": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountTransactionDetail"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest"
          }
        ]
      },
      "200CardQueryStatus": {
        "type": "string",
        "description": "- PAYMENT_DELIVERED: Visa has approved the card payout instruction, fund is moved\n- PAYMENT_DECLINED: Visa has declined the card payout instruction, fund is not moved\n- PAYMENT_RETURNED: Visa has reverted the card payout instruction, fund is not moved\n- PAYMENT_ERROR: Visa encountered error when processing the card payout instruction, fund is in unknown state\n",
        "enum": [
          "PAYMENT_DELIVERED",
          "PAYMENT_DECLINED",
          "PAYMENT_RETURNED",
          "PAYMENT_ERROR"
        ]
      },
      "IdentityGroup-1": {
        "title": "IdentityGroup",
        "required": [
          "groupLabel",
          "groupName",
          "identityFields",
          "mandatory"
        ],
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "The name of the metadata element/enum.\nThis generic Identity Group object can represent either 'Beneficiary Identity Field Group object' or 'Bank Account Registration Field Group object' . \nEnum value signifies the particular metadata element. \n\nFor example : \n a) if enum is \"address\", this can contain array of 'IdentityField' object where each object can represent elements like addressLine1, addressLine2, city, countryCode, postalCode etc    \n\n b) enum can be \"identificationList\", which contains array of \"IdentityField' objects, one of the IdentityField object can have elementName=\"idType\" and inputType=\"list\", in this scenario array of IdentityListItem will have \n [\n   {\n     \"label\": \"Passport\",\n     \"value\": \"Passport\"\n   },\n   {\n     \"label\": \"National ID Card\",\n     \"value\": \"National ID Card\"\n   },\n   {\n     \"label\": \"Driving License\",\n     \"value\": \"Driving License\"\n   }\n ], \n second 'IdentityField' Object -> elementName as \"identificationNumber\" with inputType=\"text\" \n third 'IdentityField' Object -> elementName as \"identificationCountry\" with inputType=\"text\" \n fourth 'IdentityField' Object -> elementName as \"validFromDate\" with inputType=\"text\"\n fifth  'IdentityField' Object -> elementName as \"validToDate\" with inputType=\"text\" and so on.\n\n c) If enum is \"additionalData\",this will have array of two 'IdentityField' objects, one representing 'additionalDataKey' and other one 'additionalDataValue'.\n\n d) If enum is \"name\", \"middleName\" may be required for some countries (e.g. Africa). This can be accommodated by appending a space and then middleName to <firstName>\n",
            "enum": [
              "bank",
              "address",
              "name",
              "additionalData",
              "identificationList",
              "legalEntityIdentity",
              "contactInfo",
              "birthInfo"
            ]
          },
          "mandatory": {
            "type": "boolean",
            "description": "Indicates if the identity group is mandatory."
          },
          "groupLabel": {
            "type": "string",
            "description": "Displays a label for this group of identity fields."
          },
          "identityFields": {
            "type": "array",
            "description": "This type defines a list of recipient identity fields.",
            "items": {
              "$ref": "#/components/schemas/IdentityField"
            }
          }
        },
        "description": "This type defines a recipient identity data group. Each group is normally represented as a section of fields on the UI. 'groupLabel' is the UI test to display as a name for this section. 'mandatory' indicates whether all section is mandatory. 'elementName' is the name of the element in the request for the corresponding section."
      },
      "IdNumber": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "In this field, the identification number (from the document type identified in the field recipientDetail.idType) should be provided.",
        "example": "1234567890"
      },
      "ValidatePayoutWalletRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateWalletTransactionDetail-1"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest-1"
          }
        ]
      },
      "RecipientIndividual-3": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "Identifies the type of recipient - \"I\" for Individual \n\nISO20022 field name: Creditor Identification Type\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress-1"
          },
          "lastName": {
            "description": "Recipient last name<br>Recipient first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ]
          },
          "firstName": {
            "description": "Recipient first name<br>Recipient first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: Creditor First Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ]
          },
          "middleName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MiddleName"
              }
            ]
          },
          "cityOfBirth": {
            "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CityOfBirth"
              }
            ]
          },
          "dateOfBirth": {
            "description": "Recipient date of birth (Format: \"YYYY-MM-DD\", e.g. \"1980-02-01\")\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Birth Date\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ]
          },
          "countryOfBirth": {
            "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          }
        }
      },
      "ValidatePayoutWalletRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateWalletTransactionDetail-2"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest-2"
          }
        ]
      },
      "RecipientIndividual-1": {
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "description": "Full name of recipient is conditionally required when \"firstName\" and \"lastName\" are not provided.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>",
            "example": "Joe Smith",
            "allOf": [
              {
                "$ref": "#/components/schemas/IndividualsName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"I\" for Individual \n\nISO20022 field name: Creditor Identification Type       \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress-1"
          },
          "lastName": {
            "description": "Recipient last name<br>Recipient first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ]
          },
          "firstName": {
            "description": "Recipient first name<br>Recipient first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: Creditor First Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ]
          },
          "middleName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MiddleName"
              }
            ]
          },
          "cityOfBirth": {
            "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CityOfBirth"
              }
            ]
          },
          "dateOfBirth": {
            "description": "Recipient date of birth (Format: \"YYYY-MM-DD\", e.g. \"1980-02-01\")\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Birth Date\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ]
          },
          "countryOfBirth": {
            "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          }
        }
      },
      "PayoutNotificationFailedRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- VALIDATION_FAILED: Payout request failed validation and will not be proccessed further (only receive in case of 202 response)\nISO20022 field name: Transaction Information And Status - Transaction Status\n- ERROR: Payout is in error status after 24 hours of retry in 202\n",
                "example": "VALIDATION_FAILED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorResponses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse-1"
                }
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              }
            }
          }
        }
      },
      "ExpectedPostingDate-1": {
        "maxLength": 10,
        "minLength": 10,
        "type": "string",
        "description": "This is an estimated date by which the payout should be posted to the recipient’s account. This date should be communicated to the sender and recipient (if possible) to ensure that they know when to expect the funds\n\nIt is optional field, if exists, indicates expected posting date change\n\nISO20022 field name: Interbank Settlement Date\n",
        "format": "date"
      },
      "RecipientIndividual-2": {
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "description": "Full name of recipient, conditionally required when firstName and lastName are not provided<br>Must not contain exclusively numeric characters<br>No special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>",
            "example": "Joe Smith",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameI"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"I\" for Individual \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress-2"
          },
          "lastName": {
            "description": "Recipient last name, conditionally required when name is not provided<br>Must not contain exclusively numeric characters<br>No special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ]
          },
          "firstName": {
            "description": "Recipient first name, conditionally required when name is not provided<br>Must not contain exclusively numeric characters<br>No special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ]
          },
          "cityOfBirth": {
            "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CityOfBirth"
              }
            ]
          },
          "dateOfBirth": {
            "description": "Recipient date of birth (Format: \"YYYY-MM-DD\", e.g. \"1980-02-01\")\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Birth Date\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ]
          },
          "countryOfBirth": {
            "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          }
        }
      },
      "ExpectedPostingDate-2": {
        "maxLength": 10,
        "minLength": 10,
        "description": "This is an estimated date by which the payout should be posted to the recipient’s account. This date should be communicated to the sender and recipient (if possible) to ensure that they know when to expect the funds\n\nIt is optional field, if exists, indicates expected posting date change\n\nISO20022 field name: Interbank Settlement Date\n",
        "format": "date",
        "example": "1980-02-01"
      },
      "SignedAmount": {
        "type": "number",
        "format": "double",
        "example": 12.34
      },
      "PayoutNotificationFailedRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod-1"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- VALIDATION_FAILED: Payout request failed validation and will not be proccessed further (only receive in case of 202 response)\nISO20022 field name: Transaction Information And Status - Transaction Status\n- ERROR: Payout is in error status after 24 hours of retry in 202\n",
                "example": "VALIDATION_FAILED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorResponses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse-2"
                }
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId-1"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              }
            }
          }
        }
      },
      "RecipientDetailMetadata": {
        "title": "RecipientDetail",
        "required": [
          "identityGroups"
        ],
        "type": "object",
        "properties": {
          "identityGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityGroup"
            }
          }
        }
      },
      "CardVerificationResponse": {
        "required": [
          "requestId",
          "verificationStatus"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestId"
              }
            ]
          },
          "verficationStatus": {
            "type": "string",
            "description": "Card verification status\nCOMPLETED - Request was completed and result is available\nNOT_COMPLETED -  Partner's end payment entity not available.\n",
            "enum": [
              "COMPLETED",
              "NOT_COMPLETED"
            ]
          },
          "cardVerificationDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardVerificationDetail"
              }
            ]
          }
        }
      },
      "AccountTransactionDetail-3": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId-1"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId-1"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative-1"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "structuredRemittance": {
            "description": "This object carries ISO20022 SMI data. It applies to Visa Direct Account payouts only.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalStructuredRemittance"
              }
            ]
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-1"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "AccountTransactionDetail-2": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId-1"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "structuredRemittance": {
            "description": "This object carries ISO20022 SMI data. It applies to Visa Direct Account payouts only.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalStructuredRemittance"
              }
            ]
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-2"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "IdTypeAccountAndWallet": {
        "type": "string",
        "description": "Identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P - Passport\n* D - Driving License\n* N - National Id\n* T - Tax Id\n* L - Legal Entity Registration Number\n* F - Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Identification Code\n",
        "example": "P",
        "enum": [
          "P",
          "D",
          "N",
          "T",
          "L",
          "F"
        ]
      },
      "ContactNumber": {
        "maxLength": 16,
        "minLength": 1,
        "pattern": "^\\+[1-9]\\d{1,14}$",
        "type": "string",
        "description": "Contact phone number\n+ symbol followed by digits, no other symbols, e.g. +447809713678 \n(note, refer ISO spec E.164)\n",
        "example": "447700123456"
      },
      "SettlementServiceFlag": {
        "type": "number",
        "description": "This field carries a numerical value for Settlement Service\n  Possible values are:\n  0 - International Settlement\n  9 - VIP to decide\n  8 - National Settlement\n",
        "enum": [
          0,
          9,
          8
        ]
      },
      "AccountTransactionDetail-1": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "structuredRemittance": {
            "description": "This object carries ISO20022 SMI data. It applies to Visa Direct Account payouts only.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalStructuredRemittance"
              }
            ]
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-1"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "403ErrorResponseObject": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The short description of the error."
          },
          "status": {
            "maximum": 999,
            "minimum": 100,
            "type": "integer",
            "description": "3 digit HTTP status code",
            "example": 403
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "A short code indicating the specific error that occurred."
                },
                "message": {
                  "type": "string",
                  "description": "The long description of the specific error that occurred."
                },
                "location": {
                  "type": "string",
                  "description": "The place in the incoming message that the particular error occurred."
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "The long description of the error"
          }
        }
      },
      "IndividualsName": {
        "maxLength": 70,
        "minLength": 3,
        "type": "string",
        "description": "Full name of Individual",
        "example": "Visa"
      },
      "RecipientAccountPayoutAddress-2": {
        "type": "object",
        "properties": {
          "city": {
            "description": "Recipient address city\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Town Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ]
          },
          "state": {
            "description": "Recipient address state or province\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Country Sub-division\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "Recipient address country\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Country\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "postalCode": {
            "description": "Recipient address postal code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Postal Code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PostalCode"
              }
            ]
          },
          "addressLine1": {
            "description": "Recipient address line 1\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Street Name \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine1"
              }
            ]
          },
          "addressLine2": {
            "description": "Recipient address line 2\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Floor\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine2"
              }
            ]
          }
        }
      },
      "RecipientAccountPayoutAddress-1": {
        "type": "object",
        "properties": {
          "city": {
            "description": "Recipient address city\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Town Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ]
          },
          "state": {
            "description": "Recipient address state or province\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Country Sub-division\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "Recipient address country\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Country\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "postalCode": {
            "description": "Recipient address postal code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Postal Code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PostalCode"
              }
            ]
          },
          "addressLine1": {
            "description": "Recipient address line 1\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Line 1\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine1"
              }
            ]
          },
          "addressLine2": {
            "description": "Recipient address line 2\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Line 2\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine2"
              }
            ]
          },
          "buildingNumber": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BuildingNumber"
              }
            ]
          },
          "subDivisionMinorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubDivisionMinorCode"
              }
            ]
          }
        }
      },
      "BusinessApplicationId-1": {
        "maxLength": 2,
        "minLength": 2,
        "type": "string",
        "description": "Business Application Identifier (BAI) identifies the type of program for which the payment is being sent, i.e. whether it is a funds disbursement, money transfer etc. It should be a valid value allowed by Visa and approved for the program during onboarding.\n\nValid BAI for Visa Direct Account & Wallet: \n- Money transfer: AA, PP, FT, WT; \n- Non-money transfer: BB, FD, GD, GP, LO, MD, OG, PD, BP;\n",
        "example": "PP"
      },
      "CardPayoutRequest": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionDetail"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutCardRequest"
          }
        ]
      },
      "ValidPayoutWithNetworkResponse": {
        "required": [
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "validationResultCode": {
            "type": "string",
            "description": "- VALID_WITH_NETWORK - Both Visa's and partner network's validations succeed. \n",
            "enum": [
              "VALID_WITH_NETWORK"
            ]
          }
        }
      },
      "CardTransactionResponse": {
        "required": [
          "clientReferenceId",
          "initiatingPartyId",
          "status",
          "transactionAmount",
          "transactionCurrencyCode",
          "transactionDateTime"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/200CardTransactionStatus-1"
          },
          "payoutId": {
            "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutId"
              }
            ]
          },
          "networkResponses": {
            "type": "array",
            "description": "The array of 'networkResponses' contains card network's processing details.\n",
            "items": {
              "$ref": "#/components/schemas/NetworkResponses"
            }
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionDateTime": {
            "description": "The time the request was processed by Visa. \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          }
        }
      },
      "QueryResponse-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountQuerySuccessResponse-1"
          },
          {
            "$ref": "#/components/schemas/AccountQueryErrorResponse-5"
          },
          {
            "$ref": "#/components/schemas/AccountQueryPendingCancelledResponse-1"
          },
          {
            "$ref": "#/components/schemas/CardQueryResponse-4"
          }
        ]
      },
      "QueryResponse-2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountQuerySuccessResponse-3"
          },
          {
            "$ref": "#/components/schemas/AccountQueryErrorResponse-6"
          },
          {
            "$ref": "#/components/schemas/AccountQueryPendingCancelledResponse-1"
          },
          {
            "$ref": "#/components/schemas/CardQueryResponse-5"
          }
        ]
      },
      "QueryResponse-3": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountQuerySuccessResponse-1"
          },
          {
            "$ref": "#/components/schemas/AccountQueryErrorResponse-7"
          },
          {
            "$ref": "#/components/schemas/AccountQueryPendingCancelledResponse-1"
          },
          {
            "$ref": "#/components/schemas/CardQueryResponse-6"
          }
        ]
      },
      "PaymentInstrumentAccountHolder": {
        "required": [
          "lastName"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "Last name of the account holder\n"
          },
          "firstName": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "First name of the account holder\n"
          },
          "middleName": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "Middle name of the account holder\n"
          }
        }
      },
      "403ErrorResponseWithKey": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/403ErrorResponseWithKey"
              }
            ]
          }
        }
      },
      "CardTransactionDetail-4": {
        "required": [
          "clientReferenceId"
        ],
        "properties": {
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/CardTransactionValidateDetail-3"
          }
        ]
      },
      "CardTransactionDetail-2": {
        "required": [
          "clientReferenceId"
        ],
        "properties": {
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/CardTransactionValidateDetail-1"
          }
        ]
      },
      "CardTransactionDetail-3": {
        "required": [
          "clientReferenceId"
        ],
        "properties": {
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/CardTransactionValidateDetail-2"
          }
        ]
      },
      "ValidateAccountTransactionDetail-2": {
        "required": [
          "businessApplicationId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "structuredRemittance": {
            "description": "This object carries ISO20022 SMI data. It applies to Visa Direct Account payouts only.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalStructuredRemittance"
              }
            ]
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-2"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "AccountHolderIdentificationList": {
        "type": "array",
        "description": "Identification list of the account holder",
        "items": {
          "required": [
            "idNumber",
            "idType"
          ],
          "type": "object",
          "properties": {
            "idType": {
              "type": "string",
              "description": "Id Type of the accountholder\n",
              "enum": [
                "NATIONALIDENTITY",
                "PASSPORT",
                "DRIVERLICENSE",
                "TAX"
              ]
            },
            "idNumber": {
              "type": "string",
              "description": "Id Value of the accountholder\n"
            }
          }
        }
      },
      "CardTransactionDetail-1": {
        "required": [
          "clientReferenceId"
        ],
        "properties": {
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/CardTransactionValidateDetail"
          }
        ]
      },
      "ValidateAccountTransactionDetail-1": {
        "required": [
          "businessApplicationId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "structuredRemittance": {
            "description": "This object carries ISO20022 SMI data. It applies to Visa Direct Account payouts only.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalStructuredRemittance"
              }
            ]
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-1"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "ValidateAccountTransactionDetail-4": {
        "required": [
          "businessApplicationId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId-1"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId-1"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative-1"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "structuredRemittance": {
            "description": "This object carries ISO20022 SMI data. It applies to Visa Direct Account payouts only.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalStructuredRemittance"
              }
            ]
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-1"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "ValidatePayoutWalletRequest-4": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateWalletTransactionDetail-3"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest-4"
          }
        ]
      },
      "AdditionalDataValue": {
        "maxLength": 100,
        "minLength": 1,
        "type": "string",
        "description": "Value of the field."
      },
      "CustomProgramData": {
        "type": "object",
        "properties": {
          "originatorId": {
            "$ref": "#/components/schemas/OriginatorId"
          },
          "originatorName": {
            "$ref": "#/components/schemas/OriginatorName"
          },
          "sharingGroupCode": {
            "$ref": "#/components/schemas/SharingGroupCode"
          },
          "originatorAddress": {
            "$ref": "#/components/schemas/OriginatorAddress"
          },
          "paymentFacilitator": {
            "$ref": "#/components/schemas/CardPaymentFacilitator"
          },
          "merchantCategoryCode": {
            "maxLength": 4,
            "minLength": 4,
            "type": "string",
            "description": "Code describing the merchant's type of business product or service known as the merchant category code (MCC). Codes are listed in the Visa Core Rules and Visa Product and Service Rules.\n\nISO20022 field name: Debtor Other Identification\n",
            "example": "1234"
          },
          "visaMerchantIdentifier": {
            "$ref": "#/components/schemas/VMID"
          },
          "pointOfServiceCapability": {
            "$ref": "#/components/schemas/PointOfServiceCapability"
          },
          "merchantVerificationValue": {
            "$ref": "#/components/schemas/MerchantVerificationValue"
          },
          "optionalResponseParameters": {
            "maxLength": 400,
            "type": "string",
            "description": "Originators may choose to specify any or all of the following optional parameters to receive as part of the API response.\n\nE.g. Originators may specify comma-separated, optional parameters such as optionalResponseParameters (motoECIIndicator), if they want to receive motoECIIndicator in the API response.\n\nmotoECIIndicator: Identifies the level of security used in an electronic commerce transaction over an open network (for example, the Internet) or the type of mail or telephone order. Acquirers supply indicator values, which V.I.P. forwards in requests and advices to issuers that have successfully tested to receive them. The subfield is dropped if issuers have not successfully completed testing or choose not to receive it.\n\nRefer to Moto ECI Codes\n\nE.g. optionalResponseParameters (motoECIIndicator)\n"
          },
          "originatorLegalBusinessName": {
            "$ref": "#/components/schemas/OriginatorLegalName"
          }
        }
      },
      "BusinessApplicationId-2": {
        "maxLength": 2,
        "minLength": 2,
        "type": "string",
        "description": "Business Application Identifier (BAI) identifies the type of program for which the payment is being sent, i.e. whether it is a funds disbursement, money transfer etc. It should be a valid value allowed by Visa and approved for the program during onboarding.\n\nValid BAI for Visa Direct Account & Wallet: \n- Money transfer: AA, PP; \n- Non-money transfer: BB, FD, GD, GP, LO, MD, OG, PD, BP;\n",
        "example": "PP"
      },
      "ValidatePayoutAccountRequest": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateAccountTransactionDetail"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest"
          }
        ]
      },
      "SenderName": {
        "maxLength": 140,
        "minLength": 3,
        "type": "string",
        "description": "Sender company name.\nMust not contain exclusively numeric characters\n\nISO20022 field name:\nFor 4th party payments: \"Ultimate Debtor Name\"\nFor 3rd party payments: \"Debtor Name\"\n"
      },
      "VAUData": {
        "type": "object",
        "properties": {
          "vauFlag": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Recipient primary account number Visa Account Updater (VAU) flag\n\nNote: Possible values are : Y (replacement occurred) N (No replacements)\n\nISO20022 field name: N/A\n"
          },
          "accountStatus": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Indicates recipient account status. Possible values are C (closed account) or Q (contact cardholder)\n\nISO20022 field name: N/A\n"
          },
          "vauErrorReasonCode": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "Indicates the reason the VAU failed\nPossible values: \n* VAU_SUCCESS\n* VAU_FAILED\n* VAU_PAN_TKN_SUCCESS\n* VAU_PAN_TKN_FAILED\n* VAU_PPCS_SUCCESS\n* VAU_PPCS_FAILED\n\nISO20022 field name: N/A\n"
          },
          "replacementCardAccountNumber": {
            "maxLength": 19,
            "minLength": 6,
            "type": "string",
            "description": "Contains the recipient replacement primary account number, if it exists\n\nISO20022 field name: N/A\n"
          },
          "replacementCardExpirationDate": {
            "maxLength": 7,
            "minLength": 7,
            "type": "string",
            "description": "Contains the recipient replacement primary account number expiration date, if it exists. This is returned even if the expiration date was not passed in the request.\n\nFormat: YYYY-MM\n\nISO20022 field name: N/A\n"
          }
        }
      },
      "PushCard": {
        "required": [
          "accountNumber"
        ],
        "type": "object",
        "properties": {
          "vauFlag": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "If present, a valid value is required. Spaces or special characters are not allowed. Possible values are : Y (will cause VAU to be performed)\n\nISO20022 field name: N/A\n"
          },
          "accountType": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Used to identify the account type of the recipientPrimaryAccountNumber in the request. Below are the possible values.\n\n00-Not applicable\n\n10-Saving account\n\n20-Checking account\n\n30-Credit card account\n\n40-Universal account\n\nDefault is set to \"00\" if not provided.\n",
            "enum": [
              "00",
              "10",
              "20",
              "30",
              "40"
            ]
          },
          "accountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "^\\d*$",
            "type": "string",
            "description": "Recipient primary account number, or token account number\n\nISO20022 field name: N/A\n"
          },
          "expirationDate": {
            "maxLength": 7,
            "minLength": 7,
            "pattern": "YYYY-MM",
            "type": "string",
            "description": "Conditional\nThis field contains the expiration date for the recipient's primary account number or token in recipientPrimaryAccountNumber.\nNote: Visa requires expiration date to be present in all OCTs destined to U.S. issuers\nFormat: YYYY-MM\nExample: 2021-10\n\nISO20022 field name: N/A\n",
            "example": "2022-01"
          },
          "motoECIIndicator": {
            "maximum": 8,
            "minimum": 1,
            "type": "integer",
            "description": "Identifies the level of security used in an electronic commerce transaction over an open network (for example, the Internet) or the type of mail or telephone order. Acquirers supply indicator values, which Visa forwards in requests and advices to issuers that have successfully tested to receive them. The subfield is dropped if issuers have not successfully completed testing or choose not to receive it.\nIf not provided, Visa will default its value to 7 for US and 5 for rest of the world, when posConditionCode is 59\n"
          }
        }
      },
      "AccountNumberType": {
        "type": "string",
        "description": "Account type. Possible values are DEFAULT, IBAN\n",
        "enum": [
          "DEFAULT",
          "IBAN"
        ]
      },
      "SenderTransactorDetail": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SenderIndividual"
          },
          {
            "$ref": "#/components/schemas/SenderCompany"
          }
        ]
      },
      "SenderReferenceNumber": {
        "maxLength": 34,
        "minLength": 1,
        "type": "string",
        "description": "Conditional: If the sender intends to fund the transaction with a non-financial instrument (for example, cash), then a reference number unique to the sender is required. This field is required if senderAccountNumber is not sent.\n",
        "example": "John"
      },
      "CardTransactionDetail": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "initiatingPartyId",
          "localTransactionDateTime",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "surcharge": {
            "description": "When present, this field contains surcharge as assessed by the Originating Entity. Values in this field must be included in the transactionAmount and should be in the same currency and format as defined in the transactionAmount field.\n\nNote: if card credential is provided in senderDetail, fund is debited by transactionAmount from sender's card; but credited by transactionAmount - surcharge to recipient's card\nTechnical Specifications - Appendix E Country and Currency codes for VDC.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "purposeOfPayment": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "Purpose of payment code is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Purpose of Payment\n",
            "example": "ISBEXP"
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "This field contains the transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount should be numeric. Refer to the Payouts Endpoint Guide on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for Card.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JOD is 3, the amount is JOD 100.996.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds"
          },
          "businessApplicationId": {
            "description": "Business Application Identifier (BAI) identifies the type of program for which the payment is being sent, i.e. whether it is a funds disbursement, money transfer etc. It should be a valid value allowed by Visa and approved for the program during onboarding.\n\nValid BAI for Push to Cards:\n-\tMoney transfer: AA, PP, BI, FT, WT; \n-\tNon-money transfer: BB, BP, CP, FD, GD, GP, LO, MD, OG, PD\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessApplicationId"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Instructed Amount Currency Code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "localTransactionDateTime": {
            "description": "The date and time when the transaction takes place, expressed in the local time of the Originating Entity request\n\nFormat: YYYY-MM-DDThh:mm:ss\n\nISO20022 field name: Message Creation Date Time\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          }
        }
      },
      "UpdatePayoutResponse": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CancelAccountandWalletPayoutResponse-2"
          },
          {
            "$ref": "#/components/schemas/CancelCardPayoutResponse-2"
          }
        ]
      },
      "PayoutNotificationRequestStatus": {
        "type": "string",
        "description": "Status of the transaction being queried\n\nISO20022 field name: Transaction Status\n"
      },
      "AccountQueryResponse-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountQuerySuccessResponse"
          },
          {
            "$ref": "#/components/schemas/AccountQueryErrorResponse-1"
          },
          {
            "$ref": "#/components/schemas/AccountQueryPendingCancelledResponse"
          },
          {
            "$ref": "#/components/schemas/CardQueryResponse-1"
          }
        ]
      },
      "TimestampType": {
        "type": "string",
        "description": "ISO 8601 formatted UTC Timestamp, YYYY-MM-DDThh:mm:ss.sssTZD. TZD is either Z or +/-00:00\n\nexample: 2020-05-05T12:12:12.000Z, or 1997-07-16T19:20:30.45+00:00\n\nISO20022 field name: Transaction Information And Status - Message Creation Date Time\n",
        "format": "date-time"
      },
      "AccountQueryResponse-2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountQuerySuccessResponse"
          },
          {
            "$ref": "#/components/schemas/AccountQueryErrorResponse-2"
          },
          {
            "$ref": "#/components/schemas/AccountQueryPendingCancelledResponse"
          },
          {
            "$ref": "#/components/schemas/CardQueryResponse-2"
          }
        ]
      },
      "AccountQueryResponse-3": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountQuerySuccessResponse-2"
          },
          {
            "$ref": "#/components/schemas/AccountQueryErrorResponse-4"
          },
          {
            "$ref": "#/components/schemas/QueryPendingCancelledResponse-2"
          }
        ]
      },
      "PayoutNotification": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayoutNotificationReceivedRequest"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationProcessRequest"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationFailedRequest"
          }
        ]
      },
      "NotificationsErrorResponseWithKey": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationsErrorResponseWithKey"
              }
            ]
          }
        }
      },
      "BIC": {
        "maxLength": 11,
        "minLength": 8,
        "type": "string",
        "description": "Business Identifier Code (BIC) of the Sponsor FI (Acquirer)\n\nISO20022 field name: Debtor Agent FI BIC\n"
      },
      "AccountPayoutRequest-4": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountTransactionDetail-3"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest-4"
          }
        ]
      },
      "AccountPayoutRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountTransactionDetail-1"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest-1"
          }
        ]
      },
      "RecipientCompany": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Recipient company name\n\nISO20022 field name: Creditor Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"C\" for Company \n\nISO20022 field name: Creditor Identification Type       \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress"
          }
        }
      },
      "AccountPayoutRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountTransactionDetail-2"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest-2"
          }
        ]
      },
      "ValidatePayoutResponse-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidPayoutResponse"
          },
          {
            "$ref": "#/components/schemas/ValidPayoutWithNetworkResponse"
          },
          {
            "$ref": "#/components/schemas/InvalidPayoutResponse-1"
          }
        ]
      },
      "CancelPayoutRequest": {
        "required": [
          "actionCode",
          "idType",
          "initiatingPartyId",
          "payoutMethod"
        ],
        "type": "object",
        "properties": {
          "idType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionIdType"
              }
            ]
          },
          "actionCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionCode"
              }
            ]
          },
          "payoutMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          }
        }
      },
      "BalanceNotification": {
        "required": [
          "accountId",
          "balance",
          "eventType",
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "balance": {
            "type": "array",
            "description": "array of balances for all currencies of the 'accountId'",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountBalance"
                },
                {
                  "type": "object",
                  "properties": {
                    "operator": {
                      "type": "string",
                      "description": "operator only applies to 'THRESHOLD' and 'LIQUIDITY_FAILURE' eventType",
                      "enum": [
                        "LESS_THAN"
                      ]
                    },
                    "threshold": {
                      "$ref": "#/components/schemas/AmountWithZero"
                    },
                    "balanceTimestamp": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TimestampType"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "eventType": {
            "type": "string",
            "description": "Indicates why the balance notification is triggered\n\nPossible values:\n* `THRESHOLD` - When balance threshold is exceeded\n* `LIQUIDITY_FAILURE` - when balance is negative\n* `PERIODIC` - Regular balance snapshot at certain day/time\n",
            "enum": [
              "THRESHOLD",
              "LIQUIDITY_FAILURE",
              "PERIODIC"
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          }
        }
      },
      "ValidatePayoutResponse-3": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidPayoutResponse-1"
          },
          {
            "$ref": "#/components/schemas/ValidPayoutWithNetworkResponse-1"
          },
          {
            "$ref": "#/components/schemas/InvalidPayoutResponse-3"
          }
        ]
      },
      "ValidatePayoutResponse-2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidPayoutResponse"
          },
          {
            "$ref": "#/components/schemas/ValidPayoutWithNetworkResponse"
          },
          {
            "$ref": "#/components/schemas/InvalidPayoutResponse-2"
          }
        ]
      },
      "ValidatePayoutResponse-5": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidPayoutResponse-1"
          },
          {
            "$ref": "#/components/schemas/ValidPayoutWithNetworkResponse-1"
          },
          {
            "$ref": "#/components/schemas/InvalidPayoutResponse-5"
          }
        ]
      },
      "ValidatePayoutResponse-4": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidPayoutResponse-1"
          },
          {
            "$ref": "#/components/schemas/ValidPayoutWithNetworkResponse-2"
          },
          {
            "$ref": "#/components/schemas/InvalidPayoutResponse-4"
          }
        ]
      },
      "ValidatePayoutResponse-7": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidPayoutResponse-1"
          },
          {
            "$ref": "#/components/schemas/ValidPayoutWithNetworkResponse-1"
          },
          {
            "$ref": "#/components/schemas/InvalidPayoutResponse-7"
          }
        ]
      },
      "ValidatePayoutResponse-6": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidPayoutResponse-2"
          },
          {
            "$ref": "#/components/schemas/ValidPayoutWithNetworkResponse-3"
          },
          {
            "$ref": "#/components/schemas/InvalidPayoutResponse-6"
          }
        ]
      },
      "AccountNumber": {
        "maxLength": 34,
        "minLength": 1,
        "type": "string",
        "description": "When present, this field contains recipient’s account number at the bank.",
        "example": "3012345678901432"
      },
      "AccountQuerySuccessResponse-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionStatus-1"
                  }
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Transaction Information And Status - Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "returnAmount": {
                "description": "The return amount to be paid out to the Originating Entity expressed in the currency specified in returnCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus-1"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail"
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the payoutId generated by the Visa for the return \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnAmount value. It will be same as the client’s settlement currency against the original payout transaction.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Payment Return - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate-1"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails-1"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-character ISO-4217 (Alpha-3) currency code       \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "AccountPayoutResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutResponse"
          }
        ]
      },
      "TransactionalStructuredRemittance": {
        "maxItems": 999,
        "type": "array",
        "items": {
          "required": [
            "amount",
            "amountCurrencyCode"
          ],
          "type": "object",
          "properties": {
            "amount": {
              "description": "This is the amount of money remitted for the referred document. Note that this field accepts signed amounts. A positive amount value indicates amounts flowing in the direction of the payout transaction, and due to the recipient . A negative amount value indicates the amount due back to the sender, i.e. a reduction in the total remitted amount. An amount value without the explicit mention of sign would be assumed positive.\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SignedAmount"
                }
              ]
            },
            "taxAmount": {
              "example": 1.23,
              "allOf": [
                {
                  "$ref": "#/components/schemas/Amount"
                }
              ]
            },
            "taxCurrencyCode": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCurrencyCode"
                }
              ]
            },
            "creditorReference": {
              "required": [
                "code",
                "number"
              ],
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 4,
                  "minLength": 4,
                  "type": "string",
                  "description": "Refer to PACS.008 SRI Creditor Reference Type codes",
                  "example": "SCOR",
                  "enum": [
                    "RADM",
                    "RPIN",
                    "FXDR",
                    "DISP",
                    "PUOR",
                    "SCOR"
                  ]
                },
                "number": {
                  "maxLength": 35,
                  "minLength": 1,
                  "type": "string",
                  "example": "TLD1215"
                }
              }
            },
            "amountCurrencyCode": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCurrencyCode"
                }
              ]
            },
            "referredDocumentInformation": {
              "maxItems": 1,
              "type": "array",
              "items": {
                "required": [
                  "code",
                  "number"
                ],
                "type": "object",
                "properties": {
                  "code": {
                    "maxLength": 4,
                    "minLength": 4,
                    "type": "string",
                    "description": "Refer to PACS.008 SRI Referred Document Type codes. Only 'CINV' and 'CREN' are supported values.",
                    "example": "CINV",
                    "enum": [
                      "MSIN",
                      "CNFA",
                      "DNFA",
                      "CINV",
                      "CREN",
                      "DEBN",
                      "HIRI",
                      "SBIN",
                      "CMCN",
                      "SOAC",
                      "DISP",
                      "BOLD",
                      "VCHR",
                      "AROI",
                      "TSUT",
                      "PUOR"
                    ]
                  },
                  "number": {
                    "maxLength": 35,
                    "minLength": 1,
                    "type": "string",
                    "example": "24895544"
                  },
                  "relatedDate": {
                    "type": "string",
                    "format": "date"
                  }
                }
              }
            }
          }
        }
      },
      "AccountQuerySuccessResponse-3": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionStatus-1"
                  }
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId-1"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Transaction Information And Status - Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "returnAmount": {
                "description": "The return amount to be paid out to the Originating Entity expressed in the currency specified in returnCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus-1"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail"
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the payoutId generated by the Visa for the return\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnAmount value. It will be same as the client’s settlement currency against the original payout transaction.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Payment Return - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate-1"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails-1"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "ValidPayoutResponse": {
        "required": [
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "validationResultCode": {
            "type": "string",
            "description": "- VALID - Visa's validation succeeds. \n",
            "enum": [
              "VALID"
            ]
          }
        }
      },
      "AccountQuerySuccessResponse-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionStatus"
                  }
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "returnAmount": {
                "description": "The return amount to be paid out to the Originating Entity expressed in the currency specified in returnCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus-1"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail"
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the payoutId generated by the Visa for the return \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId-1"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnAmount value. It will be same as the client’s settlement currency against the original payout transaction.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Payment Return - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate-2"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-character ISO-4217 (Alpha-3) currency code       \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "SenderAdditionalData": {
        "type": "array",
        "description": "Additional fields that are needed in order to complete the additional screening. The additional fields can be included as name value pairs (Field name, Field value)",
        "items": {
          "required": [
            "name",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "Originating Entity to send additional sender information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the name component of the name-value pair.\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataName"
                }
              ]
            },
            "value": {
              "description": "Originating Entity to send additional sender information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the value  component of the name-value pair.\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataValue"
                }
              ]
            }
          }
        }
      },
      "ExemptionReasonCode": {
        "type": "string",
        "enum": [
          "8A01",
          "8A02",
          "8A04",
          "8A06",
          "8A07",
          "8A08",
          "8A76",
          "8473",
          "8474",
          "8976"
        ]
      },
      "CardQueryTransactionResponse-1": {
        "required": [
          "clientReferenceId",
          "initiatingPartyId",
          "networkResponses",
          "payoutId",
          "status",
          "transactionAmount",
          "transactionCurrencyCode",
          "transactionDateTime"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/200CardQueryStatus"
          },
          "payoutId": {
            "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutId"
              }
            ]
          },
          "networkResponses": {
            "type": "array",
            "description": "The array of 'networkResponses' contains card network's processing details.\n",
            "items": {
              "$ref": "#/components/schemas/NetworkResponses-1"
            }
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionDateTime": {
            "description": "The time the request was processed by Visa. \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          }
        }
      },
      "RecipientContactName": {
        "maxLength": 140,
        "minLength": 3,
        "type": "string",
        "description": "Contact Name of the Recipient Company (Creditor).\n"
      },
      "CustomProgramData-1": {
        "type": "object",
        "properties": {
          "originatorId": {
            "$ref": "#/components/schemas/OriginatorId"
          },
          "originatorName": {
            "$ref": "#/components/schemas/OriginatorName"
          },
          "sharingGroupCode": {
            "$ref": "#/components/schemas/SharingGroupCode"
          },
          "originatorAddress": {
            "$ref": "#/components/schemas/OriginatorAddress-1"
          },
          "paymentFacilitator": {
            "$ref": "#/components/schemas/CardPaymentFacilitator-1"
          },
          "merchantCategoryCode": {
            "maxLength": 4,
            "minLength": 4,
            "type": "string",
            "description": "Code describing the merchant's type of business product or service known as the merchant category code (MCC). Codes are listed in the Visa Core Rules and Visa Product and Service Rules.\n\nISO20022 field name: Debtor Other Identification\n",
            "example": "1234"
          },
          "visaMerchantIdentifier": {
            "$ref": "#/components/schemas/VMID"
          },
          "pointOfServiceCapability": {
            "$ref": "#/components/schemas/PointOfServiceCapability"
          },
          "merchantVerificationValue": {
            "$ref": "#/components/schemas/MerchantVerificationValue"
          },
          "optionalResponseParameters": {
            "maxLength": 400,
            "type": "string",
            "description": "Originators may choose to specify any or all of the following optional parameters to receive as part of the API response.\n\nE.g. Originators may specify comma-separated, optional parameters such as optionalResponseParameters (motoECIIndicator), if they want to receive motoECIIndicator in the API response.\n\nmotoECIIndicator: Identifies the level of security used in an electronic commerce transaction over an open network (for example, the Internet) or the type of mail or telephone order. Acquirers supply indicator values, which V.I.P. forwards in requests and advices to issuers that have successfully tested to receive them. The subfield is dropped if issuers have not successfully completed testing or choose not to receive it.\n\nRefer to Moto ECI Codes\n\nE.g. optionalResponseParameters (motoECIIndicator)\n"
          },
          "originatorLegalBusinessName": {
            "$ref": "#/components/schemas/OriginatorLegalName"
          }
        }
      },
      "CardQueryTransactionResponse-3": {
        "required": [
          "clientReferenceId",
          "initiatingPartyId",
          "networkResponses",
          "payoutId",
          "status",
          "transactionAmount",
          "transactionCurrencyCode",
          "transactionDateTime"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/200CardQueryStatus"
          },
          "payoutId": {
            "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutId"
              }
            ]
          },
          "networkResponses": {
            "type": "array",
            "description": "The array of 'networkResponses' contains card network's processing details.\n",
            "items": {
              "$ref": "#/components/schemas/NetworkResponses-3"
            }
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionDateTime": {
            "description": "The time the request was processed by Visa. \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          }
        }
      },
      "CardQueryTransactionResponse-2": {
        "required": [
          "clientReferenceId",
          "initiatingPartyId",
          "networkResponses",
          "payoutId",
          "status",
          "transactionAmount",
          "transactionCurrencyCode",
          "transactionDateTime"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/200CardQueryStatus"
          },
          "payoutId": {
            "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutId"
              }
            ]
          },
          "networkResponses": {
            "type": "array",
            "description": "The array of 'networkResponses' contains card network's processing details.\n",
            "items": {
              "$ref": "#/components/schemas/NetworkResponses-2"
            }
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionDateTime": {
            "description": "The time the request was processed by Visa.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          }
        }
      },
      "WalletPayoutRequest-4": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletTransactionDetail-4"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest-4"
          }
        ]
      },
      "WalletPayoutRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletTransactionDetail-1"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest-1"
          }
        ]
      },
      "ReturnReasonDetails": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReturnReasonCode"
              }
            ]
          },
          "description": {
            "$ref": "#/components/schemas/ReturnReasonCodeDescription"
          }
        }
      },
      "WalletPayoutRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletTransactionDetail-2"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest-2"
          }
        ]
      },
      "AccountQueryPendingCancelledResponse-1": {
        "$ref": "#/components/schemas/QueryPendingCancelledResponse-1"
      },
      "AccountBalanceWithTimestamp": {
        "required": [
          "accountId",
          "balance"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "balanceTimestamp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "lastTransactionTimestamp": {
            "description": "The timestamp of the last money movement on the client's account. \n\nThis is a valid ISO 8601 timestamp, such as YYYY-MM-DDThh:mm:ss.sss±hh:mm.                  \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          }
        }
      },
      "DateOfBirth": {
        "maxLength": 10,
        "minLength": 10,
        "type": "string",
        "description": "This field should contain recipient’s date of birth.",
        "format": "date"
      },
      "CardVerificationDetail": {
        "required": [
          "verificationResult"
        ],
        "type": "object",
        "properties": {
          "nameMatch": {
            "type": "string",
            "description": "This field will contain the decision of the account First name matching performed by Account Name. When requestedVerification includes \"name\", then it is displayed.\n",
            "enum": [
              "MATCH",
              "PARTIAL_MATCH",
              "NO_MATCH",
              "NOT_PERFORMED",
              "NOT_SUPPORTED"
            ]
          },
          "approvalCode": {
            "maxLength": 6,
            "minLength": 1,
            "type": "string",
            "description": "Approval code from the Issuer\n"
          },
          "cvcResultCode": {
            "type": "string",
            "description": "Result of the CVV2 validation for the primaryAccountNumber in the request.\n",
            "enum": [
              "MATCH",
              "NO_MATCH",
              "NOT_PERFORMED"
            ]
          },
          "lastNameMatch": {
            "type": "string",
            "description": "This field will contain the decision of the account last name matching performed by Account Name. When requestedVerification includes \"name\", then it is displayed.\n",
            "enum": [
              "MATCH",
              "PARTIAL_MATCH",
              "NO_MATCH"
            ]
          },
          "firstNamematch": {
            "type": "string",
            "description": "This field will contain the decision of the account First name matching performed by Account Name .When requestedVerification includes \"name\" and first Name, then it is displayed.\n",
            "enum": [
              "MATCH",
              "PARTIAL_MATCH",
              "NO_MATCH"
            ]
          },
          "middleNameMatch": {
            "type": "string",
            "description": "This field will contain the decision of the account Middle name matching performed by Account Name .When requestedVerification includes \"name\" and middle name, then it is displayed.\n",
            "enum": [
              "MATCH",
              "PARTIAL_MATCH",
              "NO_MATCH"
            ]
          },
          "verificationResult": {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "card verification result\n",
                "enum": [
                  "VALID",
                  "INVALID"
                ]
              },
              "invalidReason": {
                "type": "string",
                "description": "Reason why card is invalid\n",
                "enum": [
                  "UNKNOWN",
                  "LOST_CARD",
                  "STOLEN_CARD",
                  "EXPIRED_CARD",
                  "INVALID_ACCOUNT",
                  "CLOSED_ACCOUNT",
                  "CVV2_FAILURE",
                  "FRAUD",
                  "SUSPECTED_FRAUD",
                  "RESTRICTED_CARD",
                  "INVALID_CVV"
                ]
              }
            }
          },
          "identityVerification": {
            "type": "array",
            "description": "array of identity verification results\n",
            "items": {
              "required": [
                "idType",
                "idVerificationResult"
              ],
              "type": "object",
              "properties": {
                "idType": {
                  "type": "string",
                  "description": "Account holder id type\n",
                  "enum": [
                    "NATIONALIDENTITY",
                    "PASSPORT",
                    "DRIVERLICENSE",
                    "TAX"
                  ]
                },
                "idVerificationResult": {
                  "type": "string",
                  "description": "identity verification Result\n",
                  "enum": [
                    "VERIFIED",
                    "NOT_PERFORMED",
                    "FAILED",
                    "NOT_SUPPORTED"
                  ]
                }
              }
            }
          },
          "phoneVerificationResult": {
            "type": "string",
            "description": "Card holder phone verification result from the issuer. When requestedVerification includes \"phone\" and phone is present in the request, then it is displayed\n",
            "enum": [
              "VERIFIED",
              "NOT_PERFORMED",
              "FAILED"
            ]
          },
          "cardAuthenticationResult": {
            "type": "string",
            "description": "A Visa-defined code indicating Online Card Authentication Method result.\n",
            "enum": [
              "VERIFIED,",
              "FAILED",
              "NOT_PERFORMED"
            ]
          },
          "addressVerificationResult": {
            "type": "string",
            "description": "Result of the Address Verification Service (AVS) validation for the Primary account number in the request when requested.\n",
            "enum": [
              "MATCH",
              "PARTIAL_MATCH_POSTALCODE",
              "PARTIAL_MATCH_STREETADDRESS",
              "NOT_VERIFIED",
              "NOT_VERIFIED_RETRY"
            ]
          },
          "emailAddressVerificationResult": {
            "type": "string",
            "description": "Card holder Email Address Verification Results from the issuer. When requestedVerification includes \"emailAddress\" and emailAddress , then it is displayed\n",
            "enum": [
              "VERIFIED",
              "NOT_PERFORMED",
              "FAILED"
            ]
          },
          "cardholderAuthenticationVerificationResult": {
            "type": "string",
            "description": "If TAVV is provided in the request, its validation result will be provided in this field.\n\n For future: This field will be extended to provide validation result for Cardholder Authentication Verification Value (CAVV) if it appears in the request.\n Refer to CAVV Results Codes.\n Note: For E-Commerce transactions containing token data, this attribute must be present with a value of 0, 1, or 2. If the TAVV fails validation, this attribute will have TAVV validation result with a value of 1.\n",
            "enum": [
              "VERIFIED,",
              "FAILED",
              "NOT_PERFORMED"
            ]
          }
        },
        "description": "Details of Card verificaiton results\n"
      },
      "RecipientIndividual": {
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "description": "Full name of recipient, conditionally required when firstName and lastName are not provided",
            "example": "Joe Smith",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of recipient - \"I\" for Individual \n\nISO20022 field name: Creditor Identification Type       \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/RecipientAccountPayoutAddress"
          },
          "lastName": {
            "description": "Recipient last name, conditionally required when name is not provided\n\nISO20022 field name: Creditor Last Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ]
          },
          "firstName": {
            "description": "Recipient first name, conditionally required when name is not provided\n\nISO20022 field name: Creditor First Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ]
          },
          "dateOfBirth": {
            "description": "Recipient date of birth (Format: \"YYYY-MM-DD\", e.g. \"1980-02-01\")\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Birth Date\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ]
          }
        }
      },
      "AccountQuerySuccessResponse": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TransactionStatus"
                  }
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Transaction Information And Status - Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "returnAmount": {
                "description": "The return amount to be paid out to the Originating Entity expressed in the currency specified in returnCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail"
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the payoutId generated by the Visa for the return \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnAmount value. It will be same as the client’s settlement currency against the original payout transaction.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Payment Return - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-character ISO-4217 (Alpha-3) currency code       \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "200CardTransactionStatus-1": {
        "type": "string",
        "description": "- PAYMENT_DELIVERED: Visa has approved the card payout instruction, fund is moved\n- PAYMENT_DECLINED: Visa has declined the card payout instruction, fund is not moved\n- PAYMENT_ERROR: Visa encountered error when processing the card payout instruction, fund is in unknown state\n",
        "enum": [
          "PAYMENT_DELIVERED",
          "PAYMENT_DECLINED",
          "PAYMENT_ERROR"
        ]
      },
      "AmountWithZero": {
        "minimum": 0,
        "type": "number",
        "format": "double",
        "example": 12.34
      },
      "AccountRange": {
        "maxLength": 9,
        "minLength": 9,
        "type": "string",
        "description": "Contains the first 9 digits of the cardholder PAN..\n\nNote: Acquirers must not forward this value to their merchants after receiving it in the response message from Visa.\n"
      },
      "EssentialNetworkResponses": {
        "required": [
          "acquirerCountryCode",
          "acquiringBin",
          "actionCode",
          "cardAcceptorId",
          "responseSource",
          "retrievalReferenceNumber",
          "systemTraceAuditNumber",
          "terminalId",
          "transactionAmount",
          "transactionCurrencyCode",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PullFundsTransaction",
              "PushFundsTransaction",
              "PullFundsTransactionReversal"
            ]
          },
          "networkId": {
            "$ref": "#/components/schemas/NetworkId"
          },
          "actionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Response code that provides the result of the payout request. List of <a href=\"https://developer.visa.com/request_response_codes#action_code\">valid response codes</a>\n",
            "example": "00"
          },
          "terminalId": {
            "$ref": "#/components/schemas/TerminalId"
          },
          "acquiringBin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringBin"
              }
            ]
          },
          "approvalCode": {
            "description": "This is a unique authorization code for an approved transaction from Issuer\n\nISO20022 field name: N/A\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalCode"
              }
            ]
          },
          "cardAcceptorId": {
            "description": "An identifier that uniquely identifies the Originating Entity.  For Push to Card transactions, Card Acceptor Terminal ID (CAID) should be populated\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardAcceptorId"
              }
            ]
          },
          "responseSource": {
            "$ref": "#/components/schemas/ResponseSource"
          },
          "transactionAmount": {
            "description": "This field contains the transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "originalActionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Contains a code that provides the result of original payout request when current request is identified as duplicate of original and actionCode will be 94."
          },
          "acquirerCountryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "systemTraceAuditNumber": {
            "description": "This field contains a number generated by Visa that uniquely identifies a transaction and all message types. The trace number is a key data element used to match a response to its request or to match a message to others for a given transaction set\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemTraceAuditNumber"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: \"PHP\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "retrievalReferenceNumber": {
            "description": "This is a unique identifier generated by Visa for a card transaction\n\nThe format is ydddhhnnnnnn\nyddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). \nhh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. \nnnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/RetrievalReferenceNumber"
              }
            ]
          }
        }
      },
      "IdType": {
        "type": "string",
        "description": "When present, this field contains the type of identification document.\n\nValid values:\n* `P` - Passport\n* `D` - Driving License\n* `N` - National Id\n* `T` - Tax Id\n* `L` - Legal Entity Registration Number\n* `F` - Foreign Id\n",
        "example": "P",
        "enum": [
          "P",
          "D",
          "N",
          "T",
          "L",
          "F"
        ]
      },
      "PendingCancelledTransactionStatus": {
        "type": "string",
        "description": "- PENDING: Payout is accepted but has not been acknowledged\n- CANCELLED - Payout is cancelled when in pending status\n",
        "enum": [
          "PENDING",
          "CANCELLED"
        ]
      },
      "CancelAccountandWalletPayoutResponse": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "description": "Status of the cancel request\n\nValid Value are: PENDING_CANCELLATION, CANCELLED\n- PENDING_CANCELLATION: Cancel payout request is pending before cancellation\n- CANCELLED: A transaction has been successfully cancelled in PAYMENT_RECEIVED or PENDING status\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutCancelStatus"
                  }
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              }
            }
          }
        },
        "description": "cancel Account or Wallet payout response"
      },
      "PayoutNotificationReceivedRequest": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction, only received in 202\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. Only happens in 202.\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_RECEIVED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for the original payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "$ref": "#/components/schemas/PayoutSpeed"
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the destination currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Transaction Information And Status - Remitted Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Remitted Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "CardPayoutResponse": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/200CardTransactionStatus"
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionResult": {
                "type": "array",
                "description": "The array of 'transactionResult' contains card network's processing details.\n",
                "items": {
                  "$ref": "#/components/schemas/TransactionResult"
                }
              },
              "transactionDateTime": {
                "description": "The time the request was processed by Visa. For combined payouts (Pull + Push), this reflects the processing time of the \"last leg\".\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              }
            }
          }
        }
      },
      "Id": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          {
            "$ref": "#/components/schemas/PayoutId"
          }
        ]
      },
      "B2BBankForValidate": {
        "required": [
          "accountNumber",
          "accountNumberType"
        ],
        "type": "object",
        "properties": {
          "BIC": {
            "maxLength": 11,
            "minLength": 8,
            "type": "string",
            "description": "beneficiary bank's  Business Identifier Code (BIC)\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Creditor Agent Financial Institution BIC\n"
          },
          "bankCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "beneficiary bank's code\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification\n"
          },
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "bankCodeType": {
            "type": "string",
            "description": "beneficiary bank's bank code type\nAllowed enums are \"BSB\", \"PRN\", \"APSC\", \"SORT_CODE\", \"IFSC\", \"NCC\", \"ABA\", \"PID\"\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification Type\n",
            "enum": [
              "BSB",
              "PRN",
              "APSC",
              "SORT_CODE",
              "IFSC",
              "NCC",
              "ABA",
              "PID"
            ]
          },
          "accountNumber": {
            "maxLength": 34,
            "minLength": 1,
            "type": "string",
            "description": "Beneficiary bank account number/IBAN\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Creditor Account Number or IBAN\n"
          },
          "accountNumberType": {
            "type": "string",
            "description": "beneficiary bank account number type. Valid values: \"IBAN\" and \"DEFAULT\"\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Creditor Financial Institution Account Number Type\n",
            "enum": [
              "DEFAULT",
              "IBAN"
            ]
          }
        },
        "description": "Recipient's bank object\n"
      },
      "PayoutAccountRequest": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“B” – Visa Direct Account\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress"
              },
              "cityOfBirth": {
                "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CityOfBirth"
                  }
                ]
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name: Ultimate Debtor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447809713678\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData"
              },
              "countryOfBirth": {
                "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCountryCode"
                  }
                ]
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/Bank"
              },
              "cityOfBirth": {
                "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CityOfBirth"
                  }
                ]
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447809713678\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData"
              },
              "countryOfBirth": {
                "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCountryCode"
                  }
                ]
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Identification Code\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail"
              }
            ]
          }
        }
      },
      "AccountName": {
        "maxLength": 70,
        "minLength": 1,
        "type": "string",
        "description": "When present, this field contains recipient’s account name at the bank.",
        "example": "John Doe"
      },
      "CardQueryTransactionResponse": {
        "required": [
          "clientReferenceId",
          "initiatingPartyId",
          "networkResponses",
          "payoutId",
          "status",
          "transactionAmount",
          "transactionCurrencyCode",
          "transactionDateTime"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/200CardQueryStatus"
          },
          "payoutId": {
            "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutId"
              }
            ]
          },
          "networkResponses": {
            "type": "array",
            "description": "The array of 'networkResponses' contains card network's processing details.\n",
            "items": {
              "$ref": "#/components/schemas/NetworkResponses"
            }
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionDateTime": {
            "description": "The time the request was processed by Visa. \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          }
        }
      },
      "PullCard-1": {
        "required": [
          "accountNumber"
        ],
        "type": "object",
        "properties": {
          "cavv": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "The Cardholder Authentication Verification Value (CAVV) is a value generated by an Access Control Server (ACS) and signed by the Issuer using account and password information of cardholders registered for the Verified by Visa (also known as Visa Secure) program. This field should be in hex-encoded format."
          },
          "tavv": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "The Token Authentication Verification Value (TAVV) is a value generated using tokenized PAN by Visa Token Service (VTS) and signed by the Issuer. This field should be in hex-encoded format."
          },
          "vauFlag": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "If present, a valid value is required. Spaces or special characters are not allowed. Possible values are : Y (will cause VAU to be performed)\n\nISO20022 field name: N/A\n"
          },
          "accountType": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Used to identify the account type of the recipientPrimaryAccountNumber in the request. Below are the possible values.\n\n00-Not applicable\n\n10-Saving account\n\n20-Checking account\n\n30-Credit card account\n\n40-Universal account\n\nDefault is set to \"00\" if not provided.\n",
            "enum": [
              "00",
              "10",
              "20",
              "30",
              "40"
            ]
          },
          "accountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "^\\d*$",
            "type": "string",
            "description": "Recipient primary account number, or token account number\n\nISO20022 field name: N/A\n"
          },
          "cardCvv2Value": {
            "maxLength": 4,
            "minLength": 3,
            "type": "string",
            "description": "The cardCvv2Value value provided by the account holder for the senderPrimaryAccountNumber in the request."
          },
          "expirationDate": {
            "maxLength": 7,
            "minLength": 7,
            "pattern": "YYYY-MM",
            "type": "string",
            "description": "Conditional\nThis field contains the expiration date for the recipient's primary account number or token in recipientPrimaryAccountNumber.\nNote: Visa requires expiration date to be present in all OCTs destined to U.S. issuers\nFormat: YYYY-MM\nExample: 2021-10\n\nISO20022 field name: N/A\n",
            "example": "2022-01"
          }
        },
        "description": "Conditional\nIf 'payoutMethod' is 'C', this object is conditionally required for card pull transaction\n"
      },
      "PushCard-1": {
        "type": "object",
        "properties": {
          "vauFlag": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "If present, a valid value is required. Spaces or special characters are not allowed. Possible values are : Y (will cause VAU to be performed)\n\nISO20022 field name: N/A\n"
          },
          "accountType": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Used to identify the account type of the recipientPrimaryAccountNumber in the request. Below are the possible values.\n\n00-Not applicable\n\n10-Saving account\n\n20-Checking account\n\n30-Credit card account\n\n40-Universal account\n\nDefault is set to \"00\" if not provided.\n",
            "enum": [
              "00",
              "10",
              "20",
              "30",
              "40"
            ]
          },
          "accountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "^\\d*$",
            "type": "string",
            "description": "Recipient primary account number, or token account number.\n\nConditional\nRequired if paymentCredentialReference' is not provided in a request\n\nISO20022 field name: N/A\n"
          },
          "expirationDate": {
            "maxLength": 7,
            "minLength": 7,
            "pattern": "YYYY-MM",
            "type": "string",
            "description": "Conditional\nThis field contains the expiration date for the recipient's primary account number or token in recipientPrimaryAccountNumber.\nNote: Visa requires expiration date to be present in all OCTs destined to U.S. issuers\nFormat: YYYY-MM\nExample: 2021-10\n\nISO20022 field name: N/A\n",
            "example": "2022-01"
          },
          "paymentCredentialReference": {
            "$ref": "#/components/schemas/PaymentCredentialReference"
          }
        },
        "description": "Conditional\nIf 'payoutMethod' is 'C', this object is conditionally required for card push transaction\n"
      },
      "SenderIndividual-2": {
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "description": "Full name of sender, conditionally required when firstName and lastName are not provided.<br>Must not contain exclusively numeric characters<br>No special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: \"Ultimate Debtor Name\" or \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/NameI"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of sender - \"I\" for Individual \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "lastName": {
            "description": "Sender last name, conditionally required when name is not provided<br>Must not contain exclusively numeric characters<br>No special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: \"Ultimate Debtor Name\" or \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ]
          },
          "firstName": {
            "description": "Sender first name, conditionally required when name is not provided<br>Must not contain exclusively numeric characters<br>No special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: \"Ultimate Debtor Name\" or \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ]
          },
          "cityOfBirth": {
            "description": "Sender city of birth\n\nISO20022 field name: \"Ultimate Debtor City of Birth\" or \"Debtor City of Birth\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CityOfBirth"
              }
            ]
          },
          "dateOfBirth": {
            "description": "Sender date of birth (Format: \"YYYY-MM-DD\", e.g. \"1980-02-01\")\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Ultimate Debtor Birth Date\" or \"Debtor Birth Date\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ]
          },
          "countryOfBirth": {
            "description": "Sender country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: \"Ultimate Debtor Country of Birth\" or \"Debtor Country of Birth\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          }
        }
      },
      "SenderIndividual-1": {
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "description": "Full name of sender is conditionally required when \"firstName\" and \"lastName\" are not provided.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Name\" <br>For 3rd party payments: \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/IndividualsName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of sender - \"I\" for Individual \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "lastName": {
            "description": "Sender last name<br>Sender first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Name\" <br>For 3rd party payments: \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ]
          },
          "firstName": {
            "description": "Sender first name<br>Sender first name and last name are conditionally required when \"name\" is not provided. The length of first name and last name combined must be at least 3 characters.<br>Must not contain exclusively numeric characters<br>Must not contain special symbols <table>  <tr>  <td>!</td>  <td>\"</td>  <td>£</td>  <td>$</td>  <td>%</td>  <td>^</td>  <td>*</td>  <td>+</td>  <td>=</td>  <td>¬</td>  <td>¦</td>  <td>:</td>  <td>;</td>  <td>@</td>  <td>~</td>  </tr>  </table>\n\nISO20022 field name: Ultimate Debtor First Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ]
          },
          "middleName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MiddleName"
              }
            ]
          },
          "cityOfBirth": {
            "description": "Sender city of birth\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor City of Birth\" <br>For 3rd party payments: \"Debtor City of Birth\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CityOfBirth"
              }
            ]
          },
          "dateOfBirth": {
            "description": "Sender date of birth (Format: \"YYYY-MM-DD\", e.g. \"1980-02-01\")\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Birth Date\" <br>For 3rd party payments: \"Debtor Birth Date\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ]
          },
          "countryOfBirth": {
            "description": "Sender country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Country of Birth\" <br>For 3rd party payments: \"Debtor Country of Birth\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          }
        }
      },
      "PushCard-2": {
        "type": "object",
        "properties": {
          "vauFlag": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "If present, a valid value is required. Spaces or special characters are not allowed. Possible values are : Y (will cause VAU to be performed)\n\nISO20022 field name: N/A\n"
          },
          "accountType": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Used to identify the account type of the recipientPrimaryAccountNumber in the request. Below are the possible values.\n\n00-Not applicable\n\n10-Saving account\n\n20-Checking account\n\n30-Credit card account\n\n40-Universal account\n\nDefault is set to \"00\" if not provided.\n",
            "enum": [
              "00",
              "10",
              "20",
              "30",
              "40"
            ]
          },
          "accountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "^\\d*$",
            "type": "string",
            "description": "Recipient primary account number, or token account number.\n\nConditional\nRequired if paymentCredentialReference' is not provided in a request\n\nISO20022 field name: N/A\n"
          },
          "expirationDate": {
            "maxLength": 7,
            "minLength": 7,
            "pattern": "YYYY-MM",
            "type": "string",
            "description": "Conditional\nThis field contains the expiration date for the recipient's primary account number or token in recipientPrimaryAccountNumber.\nNote: Visa requires expiration date to be present in all OCTs destined to U.S. issuers\nFormat: YYYY-MM\nExample: 2021-10\n\nISO20022 field name: N/A\n",
            "example": "2022-01"
          }
        },
        "description": "Conditional\nIf 'payoutMethod' is 'C', this object is conditionally required for card push transaction\n"
      },
      "PaymentInstrument": {
        "type": "object",
        "properties": {
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ]
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentInstrumentAddress"
              }
            ]
          },
          "phoneNumber": {
            "description": "Phone Number of the accountholder\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactNumber"
              }
            ]
          },
          "emailAddress": {
            "description": "Email Address of the accountholder\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactEmail"
              }
            ]
          },
          "accountHolder": {
            "description": "Account holder information of the payment instrument\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentInstrumentAccountHolder"
              }
            ]
          },
          "identificationList": {
            "description": "Identification list of the account holder\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountHolderIdentificationList"
              }
            ]
          }
        }
      },
      "StatementNarrative": {
        "maxLength": 140,
        "minLength": 1,
        "type": "string",
        "description": "Originating Entity is advised to provide a narrative that helps the recipient clearly identify the sender and reason for the payment. Text will be displayed on the recipient’s statement when the payment gets posted to the recipient’s account or wallet statement. \nNot all wallet operators support a statement narrative.\n\nConditional - (Refer to Payouts Endpoint Guide on country-specific required fields and lengths).\n\nISO20022 field name: Remittance Information Unstructured       \n",
        "example": "testing narrative"
      },
      "ServiceDetail": {
        "properties": {
          "traceable": {
            "type": "boolean",
            "description": "Indicates if a payout transaction is traceable"
          },
          "recallable": {
            "type": "boolean",
            "description": "Indicates if a payout transaction is recallable"
          },
          "paymentRail": {
            "type": "string",
            "description": "Indicates the payment rail used for the payout transaction",
            "enum": [
              "ACH",
              "RTP",
              "RTGS",
              "SWIFT"
            ]
          }
        }
      },
      "RiskAssessmentResult": {
        "type": "object",
        "properties": {
          "exemptionReasonCode": {
            "type": "array",
            "description": "One or more instances of reason codes that explain why an exemption was not honored.\n\nValid Values :\n8A01 = Merchant not participating in Visa Delegated Authentication Program\n8A02 = Issuer not participating in Visa Delegated Authentication Program\n8A04 = Indeterminate or invalid issuer response\n8A06 = Did not meet exemption criteria (Visa determined)\n8A07 = VMID invalid for service\n8A08 = CAVV invalid value\n8A76 = Did not meet delegation criteria (Issuer supplied)\n8473 = Cardholder has not trusted the merchant (issuer supplied)\n8474 = Did not meet the exemption criteria (issuer supplied)\n8976 = Did not meet exemption criteria (issuer supplied)\n\nThis field is present in API response only if any of the SCA exemptions were claimed and optionalResponseParameters field was set to include \"RISKASSESSMENTDATA\" as one of the comma separated values in the API request.\n\nThis field maps to ISO8583 Field 34, Dataset ID 4A- Tag 8C.\n",
            "items": {
              "$ref": "#/components/schemas/ExemptionReasonCode"
            }
          },
          "scpExemptionIndicator": {
            "type": "string",
            "description": "Secure Corporate Payment (SCP) Indicator.\n\nValid Values :\nHONORED - Secure corporate payment exemption validated/honored\nNOT_HONORED-Secure corporate payment exemption failed validation/not honored\n\nThis field is present in API response only if the exemption was claimed and optionalResponseParameters field was set to include \"RISKASSESSMENTDATA\" as one of the comma separated values in the API request.\n\nThis field maps to ISO8583 Field 34 – Dataset ID 4A -Tag 88.\n",
            "enum": [
              "HONORED",
              "NOT_HONORED"
            ]
          },
          "traExemptionIndicator": {
            "type": "string",
            "description": "Transaction Risk Analysis (TRA) Exemption Indicator.\n\nValid Values :\nHONORED - Transaction risk analysis exemption validated/honored\nNOT_HONORED - Transaction risk analysis exemption failed validation/not honored\n\nThis field is present in API response only if the exemption was claimed and optionalResponseParameters field was set to include \"RISKASSESSMENTDATA\" as one of the comma separated values in the API request.\n\nThis field maps to ISO8583 Field 34 – Dataset ID 4A -Tag 89.\n",
            "enum": [
              "HONORED",
              "NOT_HONORED"
            ]
          },
          "lowValueExemptionIndicator": {
            "type": "string",
            "description": "This field is present in API response only if the following conditions are met.\n\n- optionalResponseParameters field was set to include \"RISKASSESSMENTDATA\" as one of the comma separated values in the API request.\n\n- Low Value exemption was claimed in the acquirer request (OR) Issuer chooses to approve the transaction as the amount was below the issuer set low value and velocity counts limits\n\nValid Values :\nHONORED - Low value exemption validated/honored\nNOT_HONORED - Low value exemption failed validation/not honored\n\nThis field is present in API response only if the exemption was claimed and optionalResponseParameters field was set to include \"RISKASSESSMENTDATA\" as one of the comma separated values in the API request.\n\nThis field maps to ISO8583 Field 34 – Dataset ID 4A -Tag 87.\n",
            "enum": [
              "HONORED",
              "NOT_HONORED"
            ]
          },
          "delegatedAuthenticationIndicator": {
            "type": "string",
            "description": "Delegated Authentication Indicator.\n\nValid Values :\nHONORED - Delegated authentication request validated/honored\nNOT_HONORED - Delegated authentication request failed validation/not honored\n\nThis field is present in API response only if the exemption was claimed and optionalResponseParameters field was set to include \"RISKASSESSMENTDATA\" as one of the comma separated values in the API request.\n\nThis field maps to ISO8583 Field 34 – Dataset ID 4A -Tag 8A.\n",
            "enum": [
              "HONORED",
              "NOT_HONORED"
            ]
          },
          "trustedMerchantExemptionIndicator": {
            "type": "string",
            "description": "Trusted Merchant Exemption Indicator.\n\nValid Values :\nHONORED - Trusted merchant exemption validated/honored\nNOT_HONORED - Trusted merchant exemption failed validation/not honored\n\nThis field is present in API response only if the exemption was claimed and optionalResponseParameters field was set to include \"RISKASSESSMENTDATA\" as one of the comma separated values in the API request.\n\nThis field maps to ISO8583 Field 34 – Dataset ID 4A -Tag 84.\n",
            "enum": [
              "HONORED",
              "NOT_HONORED"
            ]
          }
        }
      },
      "PayoutReturnRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "originalPayoutId",
              "originalTransactionAmount",
              "originalTransactionCurrencyCode",
              "returnAmount",
              "returnCurrencyCode",
              "returnDateTime",
              "returnPayoutId",
              "returnReasonDetails",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/ReturnReasonCodeDetailsType"
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "returnAmount": {
                "description": "The returned amount credited to Originating Entity as a result of the return Payout \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the Visa-generated unique identifier of the returned payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "secondaryStatus": {
                "type": "string",
                "description": "Secondary Status of the transaction, only received in 202",
                "example": "RECALL_REQUESTED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SecondaryStatus"
                  }
                ],
                "enum": [
                  "RECALL_REQUESTED",
                  "RECALL_REJECTED",
                  "RECALL_ACCEPTED",
                  "RECALL_PROCESSING",
                  "PENDING_SETTLEMENT",
                  "SETTLEMENT_INITIATED",
                  "SETTLED"
                ]
              },
              "originalPayoutId": {
                "description": "This is Visa-generated unique identifier of the original payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the returnAmount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails-1"
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "PayoutReturnRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod-1"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "originalPayoutId",
              "originalTransactionAmount",
              "originalTransactionCurrencyCode",
              "returnAmount",
              "returnCurrencyCode",
              "returnDateTime",
              "returnPayoutId",
              "returnReasonDetails",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/ReturnReasonCodeDetailsType"
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "returnAmount": {
                "description": "The returned amount credited to Originating Entity as a result of the return Payout \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the Visa-generated unique identifier of the returned payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "originalPayoutId": {
                "description": "This is Visa-generated unique identifier of the original payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId-1"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the returnAmount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails"
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "PayoutReturnRequest-3": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "originalPayoutId",
              "originalTransactionAmount",
              "originalTransactionCurrencyCode",
              "returnAmount",
              "returnCurrencyCode",
              "returnDateTime",
              "returnPayoutId",
              "returnReasonDetails",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/ReturnReasonCodeDetailsType"
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId-1"
              },
              "returnAmount": {
                "description": "The returned amount credited to Originating Entity as a result of the return Payout \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the Visa-generated unique identifier of the returned payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "secondaryStatus": {
                "type": "string",
                "description": "Secondary Status of the transaction, only received in 202",
                "example": "RECALL_REQUESTED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SecondaryStatus"
                  }
                ],
                "enum": [
                  "RECALL_REQUESTED",
                  "RECALL_REJECTED",
                  "RECALL_ACCEPTED",
                  "RECALL_PROCESSING",
                  "PENDING_SETTLEMENT",
                  "SETTLEMENT_INITIATED",
                  "SETTLED"
                ]
              },
              "originalPayoutId": {
                "description": "This is Visa-generated unique identifier of the original payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the returnAmount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails-1"
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "PayoutIdentifier-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ClientReferenceId-1"
          },
          {
            "$ref": "#/components/schemas/PayoutId"
          }
        ]
      },
      "PurposeOfPayments-1": {
        "title": "PurposeOfPayments",
        "required": [
          "mandatory"
        ],
        "type": "object",
        "properties": {
          "mandatory": {
            "type": "boolean",
            "description": "Whether the purpose of payment is mandatory.",
            "example": true
          },
          "purposeOfPaymentCodes": {
            "type": "array",
            "description": "List of valid purpose of payment codes.",
            "items": {
              "$ref": "#/components/schemas/PurposeOfPaymentCodes-1"
            }
          }
        },
        "description": "This group contains all configuration information for Purpose of Payment options. The 'mandatory' attribute indicates whether provision of Purpose of Payment data is required for the Payout to be accepted."
      },
      "TransactionDetailMetadata-2": {
        "title": "TransactionDetail",
        "required": [
          "purposeOfPayment"
        ],
        "type": "object",
        "properties": {
          "purposeOfPayment": {
            "$ref": "#/components/schemas/PurposeOfPayments-1"
          }
        },
        "description": "TransactionDetail Object\n"
      },
      "TransactionDetailMetadata-1": {
        "title": "TransactionDetail",
        "required": [
          "purposeOfPayment"
        ],
        "type": "object",
        "properties": {
          "purposeOfPayment": {
            "$ref": "#/components/schemas/PurposeOfPayments-1"
          }
        },
        "description": "TransactionDetail Object                \n"
      },
      "NotificationsErrorResponseWithKey-1": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationsErrorResponse"
              }
            ]
          }
        }
      },
      "CardTransactionValidateDetail": {
        "required": [
          "businessApplicationId",
          "initiatingPartyId",
          "localTransactionDateTime",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "payoutId": {
            "description": "For a Push transaction the identifier of Pull transaction that funds it can be provided, to associate the Pull and Push transactions\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutId"
              }
            ]
          },
          "surcharge": {
            "description": "When present, this field contains surcharge as assessed by the Originating Entity. Values in this field must be included in the transactionAmount and should be in the same currency and format as defined in the transactionAmount field.\n\nNote: if card credential is provided in senderDetail, fund is debited by transactionAmount from sender's card; but credited by transactionAmount - surcharge to recipient's card\nTechnical Specifications - Appendix E Country and Currency codes for VDC.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "sencondaryId": {
            "maxLength": 28,
            "type": "string",
            "description": "secondaryId is used for C2B use case in the CEMEA region where payee initiates the OCT to the payer. The merchant or acquirer may use this field to obtain an Agreement Id in order to process the request."
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "motoECIIndicator": {
            "maximum": 8,
            "minimum": 1,
            "type": "integer",
            "description": "Identifies the level of security used in an electronic commerce transaction over an open network (for example, the Internet) or the type of mail or telephone order. Acquirers supply indicator values, which Visa forwards in requests and advices to issuers that have successfully tested to receive them. The subfield is dropped if issuers have not successfully completed testing or choose not to receive it.\nIf not provided, Visa will default its value to 7 for US and 5 for rest of the world, for e-Commerce transaction\n"
          },
          "purposeOfPayment": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "Purpose of payment code is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Purpose of Payment\n",
            "example": "ISBEXP"
          },
          "customProgramData": {
            "$ref": "#/components/schemas/CustomProgramData"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "messageReasonCode": {
            "type": "integer",
            "description": "<b>Conditional.</b><br><br>Contains codes that combined with some other fields such as the BAI (Business Application Id) identify some unique use cases. For Sales Tax rebates this field should be populated with the value 5120 (Value-added tax/Sales Tax) along with the businessApplicationId field set to the value 'FD' which indicates this push funds transfer is being conducted in order to facilitate a sales tax refund."
          },
          "transactionAmount": {
            "description": "This field contains the transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount should be numeric. Refer to the Payouts Endpoint Guide on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for Card.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JOD is 3, the amount is JOD 100.996.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "riskAssessmentData": {
            "$ref": "#/components/schemas/RiskAssessmentData"
          },
          "feeProgramIndicator": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Note: If present, a valid value is required. Spaces or special characters are not allowed."
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "businessApplicationId": {
            "description": "Business Application Identifier (BAI) identifies the type of program for which the payment is being sent, i.e. whether it is a funds disbursement, money transfer etc. It should be a valid value allowed by Visa and approved for the program during onboarding.\n\nValid BAI for Push to Cards:\n- Money transfer: AA, PP, BI, FT, WT; \n- Non-money transfer: BB, BP, CP, FD, GD, GP, LO, MD, OG, PD\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessApplicationId-1"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Instructed Amount Currency Code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "localTransactionDateTime": {
            "description": "The date and time when the transaction takes place, expressed in the local time of the Originating Entity request\n\nFormat: YYYY-MM-DDThh:mm:ss\n\nISO20022 field name: Message Creation Date Time\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "scheduledPushFundsTransaction": {
            "$ref": "#/components/schemas/ScheduleTransaction"
          }
        }
      },
      "Amount": {
        "minimum": 0,
        "exclusiveMinimum": true,
        "type": "number",
        "format": "double",
        "example": 12.34
      },
      "B2BQuoteId": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "This is a unique FX quote ID generated by Visa for a payout currency pair. Alpha-numeric for B2B and integer for Card,Account and Wallet.\n",
        "example": "789FBCA239E"
      },
      "CancelPayoutResponse-1": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CancelAccountandWalletPayoutResponse-1"
          },
          {
            "$ref": "#/components/schemas/CancelCardPayoutResponse-1"
          }
        ]
      },
      "CancelPayoutResponse-2": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CancelAccountandWalletPayoutResponse-3"
          },
          {
            "$ref": "#/components/schemas/CancelCardPayoutResponse-3"
          }
        ]
      },
      "IdentityField": {
        "title": "IdentityField",
        "required": [
          "description",
          "elementName",
          "inputType",
          "locale",
          "mandatory"
        ],
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "description": "The localization setting of this particular record."
          },
          "maxSize": {
            "type": "integer",
            "description": "Suggested client side syntactic validation rule.",
            "format": "int32"
          },
          "subTitle": {
            "type": "string",
            "description": "If present contains a sub-label to be displayed with the field."
          },
          "tabOrder": {
            "type": "integer",
            "description": "Indicates the ordering of this field in the UI.",
            "format": "int32"
          },
          "inputType": {
            "$ref": "#/components/schemas/IdentityFieldInput"
          },
          "listItems": {
            "minItems": 1,
            "type": "array",
            "description": "The identityListItems contain listItem sub-elements. The listItem sub-elements would normally be present where the inputType attribute is 'list'.",
            "items": {
              "$ref": "#/components/schemas/IdentityListItem"
            }
          },
          "mandatory": {
            "type": "boolean",
            "description": "Indicates whether the field is mandatory."
          },
          "separator": {
            "type": "string",
            "description": "The separator to display following (to the right hand side) this field, usually '-' or '/'."
          },
          "description": {
            "type": "string",
            "description": "Suggested roll-over or help text description to assist users."
          },
          "displaySize": {
            "type": "integer",
            "description": "A suggested field size to display.",
            "format": "int32"
          },
          "elementName": {
            "type": "string",
            "description": "The name of the element."
          },
          "valueRegexp": {
            "type": "string",
            "description": "The regexp for the value of this field."
          }
        },
        "description": "Each IdentityField would normally be displayed in the UI from left to right based on the tabOrder attribute. The IdentityField element contains the attributes described below:-"
      },
      "S2AMetaData": {
        "required": [
          "recipientDetail",
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "recipientDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientDetailMetadata"
              }
            ]
          },
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDetailMetadata"
              }
            ]
          }
        }
      },
      "SubDivisionMinorCode": {
        "maxLength": 16,
        "minLength": 1,
        "type": "string",
        "description": "This field contains ISO subdivision minor code of address.",
        "example": "Travis"
      },
      "CardPayoutRequest-4": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionDetail-4"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutCardRequest-1"
          }
        ]
      },
      "CancelCardPayoutResponse": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "payoutId",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/200CancelCardTransactionStatus"
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "networkResponses": {
                "type": "array",
                "description": "The array of 'networkResponses' contains card network's processing details.\n",
                "items": {
                  "$ref": "#/components/schemas/EssentialNetworkResponses"
                }
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionDateTime": {
                "description": "The time the request was processed by Visa. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              }
            }
          }
        },
        "description": "cancel Card Pull payout response"
      },
      "CompanyName": {
        "maxLength": 70,
        "minLength": 2,
        "type": "string",
        "description": "Company name",
        "example": "Visa"
      },
      "ValidatePayoutAccountRequest-4": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateAccountTransactionDetail-4"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest-4"
          }
        ]
      },
      "ValidatePayoutAccountRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateAccountTransactionDetail-1"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest-1"
          }
        ]
      },
      "ValidatePayoutAccountRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateAccountTransactionDetail-2"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutAccountRequest-2"
          }
        ]
      },
      "OriginatorAddress-1": {
        "required": [
          "country"
        ],
        "type": "object",
        "properties": {
          "city": {
            "maxLength": 13,
            "minLength": 1,
            "type": "string",
            "description": "Originating Entity City\n"
          },
          "state": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Originating Entity State Code\n\nConditional (Required if Orignating Entity country is US or Canada)\n",
            "example": "TX"
          },
          "county": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Originating Entity Country Sub Division Minor code\n"
          },
          "country": {
            "description": "Orignating Entity country code. \n\nFormat: 3-digit ISO-3166 (numeric) country code\n",
            "example": 842,
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "postalCode": {
            "maxLength": 14,
            "minLength": 1,
            "type": "string",
            "description": "Originating Entity Postal Code \n\nConditional (Required if Orignating Entity country is US or Canada)\n\nUS length is 5 or 9 characters.  \n\nCanada - maximum up to 12 characters\n\nAll other markets- maximum up to 14 characters\n",
            "example": "78758"
          },
          "addressLine": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Originating Entity address line\n\nISO20022 field name: N/A\n",
            "example": "12500 Curious St"
          }
        },
        "description": "Originator Entity Address"
      },
      "ErrorResponse-2": {
        "required": [
          "details",
          "reason",
          "status"
        ],
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The short description of the error."
          },
          "status": {
            "maximum": 999,
            "minimum": 100,
            "type": "integer",
            "description": "3 digit HTTP status code",
            "example": 400
          },
          "details": {
            "type": "array",
            "items": {
              "required": [
                "code",
                "message"
              ],
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "A short code indicating the specific error that occurred."
                },
                "message": {
                  "type": "string",
                  "description": "The long description of the specific error that occurred."
                },
                "location": {
                  "type": "string",
                  "description": "The place in the incoming message that the particular error occurred."
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "The long description of the error"
          }
        }
      },
      "ErrorResponse-1": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The short description of the error."
          },
          "status": {
            "maximum": 999,
            "minimum": 100,
            "type": "integer",
            "description": "3 digit HTTP status code",
            "example": 400
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "A short code indicating the specific error that occurred."
                },
                "message": {
                  "type": "string",
                  "description": "The long description of the specific error that occurred."
                },
                "location": {
                  "type": "string",
                  "description": "The place in the incoming message that the particular error occurred."
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "The long description of the error"
          }
        }
      },
      "City": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "When present, this field contains individual recipient's city",
        "example": "Santa Fe"
      },
      "NetworkId": {
        "type": "integer",
        "description": "Conditional\n\nThis contains a code that identifies the network on which the transaction was processed. Refer to <a href=\"https://developer.visa.com/request_response_codes#network_id_and_sharing_group_code\">Network ID</a>\n\nNote: This field is returned only if it is anything other than networkId value 2. Supported only in US for domestic transactions\n"
      },
      "SenderAccountNumber-2": {
        "maxLength": 34,
        "minLength": 1,
        "type": "string",
        "description": "Conditional - This field is Mandatory if a senderReferenceNumber is not sent. <br />\nNote:\nClient should provide either a sender reference number or a sender account number but not both.\nClient should not send any PANs in this field for payout.\n",
        "example": "A42434234S324234"
      },
      "AdditionalDataName": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Name of the field."
      },
      "SenderAccountNumber-1": {
        "maxLength": 34,
        "minLength": 1,
        "type": "string",
        "description": "Conditional - This field is Mandatory if a senderReferenceNumber is not sent. <br />\nNote:\nClient should provide either a sender reference number or a sender account number but not both.\nClient should not send any PANs in this field for payout.         \n",
        "example": "A42434234S324234"
      },
      "PayoutNotificationFailedRequest": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- VALIDATION_FAILED: Payout request failed validation and will not be proccessed further (only receive in case of 202 response)\nISO20022 field name: Transaction Information And Status - Transaction Status\n- ERROR: Payout is in error status after 24 hours of retry in 202\n",
                "example": "VALIDATION_FAILED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorResponses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse-1"
                }
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              }
            }
          }
        }
      },
      "CardPayoutRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionDetail-1"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutCardRequest-1"
          }
        ]
      },
      "CardPayoutRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionDetail-2"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutCardRequest-1"
          }
        ]
      },
      "CardPayoutRequest-3": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionDetail-3"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutCardRequest-3"
          }
        ]
      },
      "QueryPendingCancelledResponse": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "properties": {
              "status": {
                "$ref": "#/components/schemas/PendingCancelledTransactionStatus"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              }
            }
          }
        },
        "description": "Transaction is in pending or cancelled (cancelled during pending) status."
      },
      "RequestType": {
        "maxLength": 2,
        "minLength": 2,
        "type": "string",
        "description": "Valid values include\n\n00 - (Not Deferred OCT) , Is the default value if not specified on the request. \n\n01 - (Originator Hold) , ndicates that the originating acquirer has held the OCT for a period of time before sending to Visa and is requesting for Visa to treat the transaction as a deferred OCT. Note: The value of 01 is reserved for originating acquirers that meet certain conditions. Contact your regional client support representative for more information \n\n02 - (Visa deferred OCT hold, default interval).This value indicates that the originating acquirer is requesting Visa to apply the default holding period of 48 hours upon receipt and process the request as a deferred OCT.\n\nNote: Visa sends the value of this field over to revipient issuer on the request\n"
      },
      "CancelPayoutRequest-2": {
        "required": [
          "actionCode",
          "idType",
          "initiatingPartyId",
          "payoutMethod"
        ],
        "type": "object",
        "properties": {
          "idType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionIdType"
              }
            ]
          },
          "actionCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionCode"
              }
            ]
          },
          "payoutMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          }
        }
      },
      "SenderCompany": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "type": {
            "description": "Identifies the type of sender - \"C\" for Company \n\nISO20022 field name: Debtor Identification Type       \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          }
        }
      },
      "CancelPayoutRequest-1": {
        "required": [
          "actionCode",
          "idType",
          "initiatingPartyId",
          "payoutMethod"
        ],
        "type": "object",
        "properties": {
          "idType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionIdType"
              }
            ]
          },
          "actionCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionCode"
              }
            ]
          },
          "payoutMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          }
        }
      },
      "PayoutReturnRequest": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "originalPayoutId",
              "originalTransactionAmount",
              "originalTransactionCurrencyCode",
              "returnAmount",
              "returnCurrencyCode",
              "returnDateTime",
              "returnPayoutId",
              "returnReasonDetails",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/ReturnReasonCodeDetailsType"
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "returnAmount": {
                "description": "The returned amount credited to Originating Entity as a result of the return Payout \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "returnPayoutId": {
                "description": "This is the Visa-generated unique identifier of the returned payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "originalPayoutId": {
                "description": "This is Visa-generated unique identifier of the original payout.\n\nISO20022 field name: Payment Return - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "returnCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the returnAmount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "returnSourceAmount": {
                "description": "The return amount as sent by Visa’s network partner, expressed in the currency specified in returnSourceCurrencyCode field.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "returnReasonDetails": {
                "$ref": "#/components/schemas/ReturnReasonDetails"
              },
              "returnConversionRate": {
                "description": "This field contains the exchange rate applied to convert returnSourceCurrencyCode to returnCurrencyCode.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "returnSourceCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated with the returnSourceAmount value. It will be same as the destination currency on the original payout transaction\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "SettlementResponsibilityFlag": {
        "type": "boolean",
        "description": "This field carries a boolean flag to identify settlement responsibility\n"
      },
      "InitiatingPartyId": {
        "type": "integer",
        "description": "Identifier assigned by Visa to uniquely identify the Originating Entity who initiates the transaction\n\nISO20022 field name: <InitgPtyId> - InitiatingPartyIdentification, new identification of the initiating party. Visa uses integer instead of string(1-35) for uniformed value generation and presentation.\n",
        "format": "int64",
        "example": 100111
      },
      "QueryPendingCancelledResponse-2": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "properties": {
              "status": {
                "$ref": "#/components/schemas/PendingCancelledTransactionStatus-1"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId-1"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              }
            }
          }
        },
        "description": "Transaction is in pending or cancelled (cancelled during pending) status."
      },
      "AccountQueryErrorResponse": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "description": "- VALIDATION_FAILED: Payout request failed validation\n- ERROR: Payout is in error status\n",
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorDetails": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse-1"
                }
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "QueryPendingCancelledResponse-1": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "properties": {
              "status": {
                "$ref": "#/components/schemas/PendingCancelledTransactionStatus-1"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              }
            }
          }
        },
        "description": "Transaction is in pending or cancelled (cancelled during pending) status."
      },
      "UpdatePayoutStatusRequest-3": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CancelPayoutRequest-2"
          }
        ]
      },
      "PayoutCardRequest-3": {
        "required": [
          "payoutMethod",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method e.g. To Card\n\nValid values:\n“C” – Visa Direct Card\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "properties": {
              "card": {
                "$ref": "#/components/schemas/PullCard-1"
              },
              "name": {
                "maxLength": 30,
                "minLength": 1,
                "type": "string"
              },
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-1"
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name: Ultimate Debtor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447809713678\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData"
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList-1"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber-2"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-3"
              }
            ]
          },
          "recipientDetail": {
            "properties": {
              "card": {
                "$ref": "#/components/schemas/PushCard-2"
              },
              "name": {
                "maxLength": 30,
                "minLength": 1,
                "type": "string"
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447809713678\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData"
              },
              "identificationList": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-1"
                  }
                ]
              }
            },
            "description": "recipient's detail including recipient card credential\n\nConditional:\n\nthis object is conditionally required for push card transaction\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-3"
              }
            ]
          }
        }
      },
      "InvalidPayoutResponse": {
        "required": [
          "validationDetails",
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "validationDetails": {
            "type": "array",
            "description": "comprehensive array of errors",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse-1"
            }
          },
          "validationResultCode": {
            "type": "string",
            "description": "- INVALID - see validationDetails for validation errors\n",
            "enum": [
              "INVALID"
            ]
          }
        }
      },
      "PayoutCardRequest-1": {
        "required": [
          "payoutMethod",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method e.g. To Card\n\nValid values:\n“C” – Visa Direct Card\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "properties": {
              "card": {
                "$ref": "#/components/schemas/PullCard-1"
              },
              "name": {
                "maxLength": 30,
                "minLength": 1,
                "type": "string"
              },
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-1"
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name: Ultimate Debtor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447809713678\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList-1"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber-1"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-1"
              }
            ]
          },
          "recipientDetail": {
            "properties": {
              "card": {
                "$ref": "#/components/schemas/PushCard-1"
              },
              "name": {
                "maxLength": 30,
                "minLength": 1,
                "type": "string"
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447809713678 \n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-1"
                  }
                ]
              }
            },
            "description": "recipient's detail including recipient card credential\n\nConditional:\n\nthis object is conditionally required for push card transaction\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-1"
              }
            ]
          }
        }
      },
      "UpdatePayoutStatusRequest-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CancelPayoutRequest-1"
          }
        ]
      },
      "UpdatePayoutStatusRequest-2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/UpdatePayoutRequest"
          }
        ]
      },
      "AccountQueryResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountQuerySuccessResponse"
          },
          {
            "$ref": "#/components/schemas/AccountQueryErrorResponse"
          },
          {
            "$ref": "#/components/schemas/AccountQueryPendingCancelledResponse"
          },
          {
            "$ref": "#/components/schemas/CardQueryResponse"
          }
        ]
      },
      "ErrorResponseWithKey-4": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-2"
              }
            ]
          }
        }
      },
      "403ErrorResponseWithKey-1": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/403ErrorResponseObject"
              }
            ]
          }
        }
      },
      "ErrorResponseWithKey-3": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            ]
          }
        }
      },
      "Wallet": {
        "required": [
          "accountIdentifier",
          "accountIdentifierType",
          "countryCode",
          "currencyCode",
          "operatorName"
        ],
        "type": "object",
        "properties": {
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "currencyCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "operatorName": {
            "type": "string",
            "description": "This identifies the non bank wallet operator that has issued the account to the recipient and is going to receive and post the funds to the recipient’s wallet.\n(Refer to Payouts Endpoint Guide on list of supported Wallet Operators).\n",
            "enum": [
              "WECHATPAY"
            ]
          },
          "accountIdentifier": {
            "maxLength": 210,
            "minLength": 1,
            "type": "string",
            "description": "The wallet recipient's actual account identifier associated with the wallet operator (e.g., wallet address - phone/email/username that identifies the account associated with the wallet operator)\n"
          },
          "accountIdentifierType": {
            "type": "string",
            "description": "The type of account identifier used by the recipient. \n\nSupported values are PHONENUMBER, EMAIL and USERNAME.          \n",
            "example": "PHONENUMBER",
            "enum": [
              "PHONENUMBER",
              "EMAIL",
              "USERNAME"
            ]
          }
        },
        "description": "Recipient's wallet object\n\nConditional object when payoutMethod has value 'W'\n"
      },
      "ErrorResponseWithKey-2": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            ]
          }
        }
      },
      "ErrorResponseWithKey-1": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            ]
          }
        }
      },
      "OriginatorAddress": {
        "required": [
          "country"
        ],
        "type": "object",
        "properties": {
          "city": {
            "maxLength": 13,
            "minLength": 1,
            "type": "string",
            "description": "Originating Entity City\n"
          },
          "state": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Originating Entity State Code\n\nConditional (Required if Orignating Entity country is US or Canada)\n",
            "example": "TX"
          },
          "county": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Originating Entity Country Sub Division Minor code\n"
          },
          "country": {
            "description": "Orignating Entity country code. \n\nFormat: 3-digit ISO-3166 (numeric) country code\n",
            "example": 842,
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "postalCode": {
            "maxLength": 14,
            "minLength": 1,
            "type": "string",
            "description": "Originating Entity Postal Code \n\nConditional (Required if Orignating Entity country is US or Canada)\n\nUS length is 5 or 9 characters.  \n\nCanada - maximum up to 12 characters\n\nAll other markets- maximum up to 14 characters       \n",
            "example": "78758"
          },
          "addressLine": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Originating Entity address line\n\nISO20022 field name: N/A\n",
            "example": "12500 Curious St"
          }
        },
        "description": "Originator Entity Address"
      },
      "ErrorResponseWithKey-7": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            ]
          }
        }
      },
      "ErrorResponseWithKey-6": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            ]
          }
        }
      },
      "AlphaCurrencyCode": {
        "maxLength": 3,
        "minLength": 3,
        "type": "string",
        "description": "3-character ISO-4217 (Alpha-3) currency code\n",
        "example": "USD"
      },
      "ErrorResponseWithKey-5": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            ]
          }
        }
      },
      "ApprovalCode": {
        "maxLength": 6,
        "minLength": 6,
        "type": "string",
        "description": "This is a unique authorization code for an approved transaction."
      },
      "CardVerificationRequest": {
        "required": [
          "initiatingPartyId",
          "requestId"
        ],
        "properties": {
          "requestId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestId"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "paymentInstrument": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentInstrument"
              }
            ]
          }
        }
      },
      "PostingDate": {
        "required": [
          "cutoffDateTime",
          "expectedPostingDate"
        ],
        "type": "object",
        "properties": {
          "cutoffDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          },
          "expectedPostingDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedPostingDate"
              }
            ]
          }
        }
      },
      "IdentityFieldInput": {
        "title": "IdentityFieldInput",
        "type": "string",
        "description": "Supported input types for a recipient identity UI.",
        "enum": [
          "text",
          "date",
          "number",
          "list"
        ],
        "x-enum-elements": [
          {
            "name": "text",
            "description": "Text UI field."
          },
          {
            "name": "date",
            "description": "Date UI field."
          },
          {
            "name": "number",
            "description": "Number UI field."
          },
          {
            "name": "list",
            "description": "List UI field."
          }
        ]
      },
      "PayoutCardRequest": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Card, Account or Wallet\n\nValid values:\n“C” – Visa Direct Card\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "required": [
              "address"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/PullCard"
              },
              "name": {
                "maxLength": 30,
                "minLength": 1,
                "type": "string"
              },
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress"
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name: Ultimate Debtor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447809713678\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "$ref": "#/components/schemas/PushCard"
              },
              "name": {
                "maxLength": 30,
                "minLength": 1,
                "type": "string"
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447809713678 \n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Identification Code\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail"
              }
            ]
          }
        }
      },
      "202TransactionStatus": {
        "type": "string",
        "description": "- PENDING: Payout is accepted but has not been acknowledged\n",
        "enum": [
          "PENDING"
        ]
      },
      "AccountBalance-1": {
        "required": [
          "amount",
          "currencyCode"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "The balance amount for a particular currency.\n\nNote: The number of decimal places assumed for this field depends on the currency.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SignedAmount"
              }
            ]
          },
          "currencyCode": {
            "description": "The currency code is a three letter ISO 4217 code. \n\nE.g. GBP for British sterling pounds.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          }
        },
        "description": "Represents a monetary value containing a decimal amount value along with a currency code.\n"
      },
      "BankName": {
        "maxLength": 50,
        "minLength": 1,
        "type": "string",
        "example": "Bank of America"
      },
      "CancelCardPayoutResponse-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "payoutId",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/200CancelCardTransactionStatus"
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "networkResponses": {
                "type": "array",
                "description": "The array of 'networkResponses' contains card network's processing details.\n",
                "items": {
                  "$ref": "#/components/schemas/EssentialNetworkResponses"
                }
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionDateTime": {
                "description": "The time the request was processed by Visa. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              }
            }
          }
        },
        "description": "cancel Card Pull payout response"
      },
      "CancelCardPayoutResponse-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "payoutId",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/200CancelCardTransactionStatus"
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "networkResponses": {
                "type": "array",
                "description": "The array of 'networkResponses' contains card network's processing details.\n",
                "items": {
                  "$ref": "#/components/schemas/EssentialNetworkResponses"
                }
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionDateTime": {
                "description": "The time the request was processed by Visa.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              }
            }
          }
        },
        "description": "cancel Card Pull payout response"
      },
      "CancelCardPayoutResponse-3": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "payoutId",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/200CancelCardTransactionStatus"
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "networkResponses": {
                "type": "array",
                "description": "The array of 'networkResponses' contains card network's processing details.\n",
                "items": {
                  "$ref": "#/components/schemas/EssentialNetworkResponses"
                }
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionDateTime": {
                "description": "The time the request was processed by Visa. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              }
            }
          }
        },
        "description": "cancel Card Pull payout response"
      },
      "SenderAccountPayoutAddress": {
        "required": [
          "addressLine1",
          "city",
          "country"
        ],
        "type": "object",
        "properties": {
          "city": {
            "description": "Sender address city\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Town Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ]
          },
          "state": {
            "description": "Sender address state\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Country Sub-division\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "Sender address country\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Country\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "postalCode": {
            "description": "Sender address postal code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Postal Code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PostalCode"
              }
            ]
          },
          "addressLine1": {
            "description": "Sender address line 1\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Line 1\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine1"
              }
            ]
          },
          "addressLine2": {
            "description": "Sender address line 2\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Line 2\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine2"
              }
            ]
          }
        }
      },
      "401ErrorResponseObject": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The short description of the error."
          },
          "status": {
            "maximum": 999,
            "minimum": 100,
            "type": "integer",
            "description": "3 digit HTTP status code",
            "example": 401
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "A short code indicating the specific error that occurred."
                },
                "message": {
                  "type": "string",
                  "description": "The long description of the specific error that occurred."
                },
                "location": {
                  "type": "string",
                  "description": "The place in the incoming message that the particular error occurred."
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "The long description of the error"
          }
        }
      },
      "ResponseSource": {
        "maxLength": 1,
        "minLength": 1,
        "type": "string",
        "description": "Contains the response source/reason code that identifies the source of the responseCode i.e. whether it is from Visa or from the Issuer\n\nISO20022 field name: N/A\n"
      },
      "StructuredReferenceName": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "SRI Name of the field.",
        "example": "amount, documentType"
      },
      "CardPaymentFacilitator": {
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 11,
            "minLength": 1,
            "type": "string",
            "description": "Marketplace ID or Payment Facilitator's ID. This field is conditionally required when a payment facilitator is involved.\n"
          },
          "name": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "Payment facilitator name in OCTs. This field is conditionally required when a payment facilitator is involved.\n"
          },
          "subMerchantId": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Sub-Merchant ID containing the sponsored merchant ID. This field is conditionally required when a payment facilitator is involved.\n"
          },
          "independentSalesOrganizationID": {
            "maxLength": 11,
            "minLength": 1,
            "type": "string",
            "description": "This field contains the \"Company ID\" that is assigned during the time of registration with Mastercard Connect as a service provider and must be provided by the acquirer.    \n"
          }
        }
      },
      "ScheduleTransaction": {
        "required": [
          "dateTime",
          "requestType"
        ],
        "type": "object",
        "properties": {
          "dateTime": {
            "maxLength": 12,
            "minLength": 12,
            "pattern": "^\\d{12}$",
            "type": "string",
            "description": "if exist, identifies when the transaction will be processed by visa.\n\nFormat of this value will be CCYYMMDDHHMM\n\nCC- Current Century\n\nYY - Year\n\nMM - Month\n\nDD - Date\n\nHH - Hour\n\nMM - Minute\n"
          },
          "requestType": {
            "$ref": "#/components/schemas/RequestType"
          }
        }
      },
      "AccountTransactionDetail": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds"
          },
          "structuredRemittance": {
            "description": "This object carries ISO20022 SMI data. It applies to Visa Direct Account payouts only.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalStructuredRemittance"
              }
            ]
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "CancelAccountandWalletPayoutResponse-3": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "description": "Status of the cancel request\n\nValid Value are: PENDING_CANCELLATION, CANCELLED\n- PENDING_CANCELLATION: Cancel payout request is pending before cancellation\n- CANCELLED: A transaction has been successfully cancelled in PAYMENT_RECEIVED or PENDING status\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutCancelStatus"
                  }
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              }
            }
          }
        },
        "description": "cancel Account or Wallet payout response"
      },
      "CancelAccountandWalletPayoutResponse-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "description": "Status of the cancel request\n\nValid Value are: PENDING_CANCELLATION, CANCELLED\n- PENDING_CANCELLATION: Cancel payout request is pending before cancellation\n- CANCELLED: A transaction has been successfully cancelled in PAYMENT_RECEIVED or PENDING status\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutCancelStatus"
                  }
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout and Reversals, Chargeback, Response, Advice for to Card.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              }
            }
          }
        },
        "description": "cancel Account or Wallet payout response"
      },
      "RecipientTransactorDetail": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RecipientIndividual"
          },
          {
            "$ref": "#/components/schemas/RecipientCompany"
          }
        ]
      },
      "CancelAccountandWalletPayoutResponse-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "description": "Status of the cancel request\n\nValid Value are: PENDING_CANCELLATION, CANCELLED\n- PENDING_CANCELLATION: Cancel payout request is pending before cancellation\n- CANCELLED: A transaction has been successfully cancelled in PAYMENT_RECEIVED or PENDING status\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutCancelStatus"
                  }
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              }
            }
          }
        },
        "description": "cancel Account or Wallet payout response"
      },
      "InvalidPayoutResponse-2": {
        "required": [
          "validationDetails",
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "validationDetails": {
            "type": "array",
            "description": "comprehensive array of errors",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse-1"
            }
          },
          "validationResultCode": {
            "type": "string",
            "description": "- INVALID - see validationDetails for validation errors\n",
            "enum": [
              "INVALID"
            ]
          }
        }
      },
      "PayoutNotification-2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayoutNotificationReceivedRequest-2"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationProcessRequest-2"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationFailedRequest-2"
          }
        ]
      },
      "InvalidPayoutResponse-1": {
        "required": [
          "validationDetails",
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "validationDetails": {
            "type": "array",
            "description": "comprehensive array of errors",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse-1"
            }
          },
          "validationResultCode": {
            "type": "string",
            "description": "- INVALID - see validationDetails for validation errors\n",
            "enum": [
              "INVALID"
            ]
          }
        }
      },
      "AmountWithZero-1": {
        "minimum": 0,
        "type": "number",
        "description": "This field only applies to 'THRESHOLD' and 'LIQUIDITY_FAILURE' eventType. Threshold value would be zero for LIQUIDITY_FAILURE eventType.\n",
        "format": "double",
        "example": 12.34
      },
      "PayoutNotification-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayoutNotificationReceivedRequest-1"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationProcessRequest-1"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationFailedRequest-1"
          }
        ]
      },
      "RiskAssessmentData": {
        "type": "object",
        "properties": {
          "scpExemptionIndicator": {
            "type": "string",
            "description": "Secure Corporate Payment (SCP) Indicator.\n\nValid Values :\nFALSE - Secure corporate payment exemption not claimed/requested\nTRUE - Secure corporate payment exemption claimed/requested\n\nIf this exemption does not apply to the transaction, the value of \"FALSE\" is optional and the field may be omitted entirely.\n\nThis field maps to ISO8583->TLV Field 34, Dataset ID 4A, Tag 88.\n",
            "enum": [
              "true",
              "false"
            ]
          },
          "traExemptionIndicator": {
            "type": "string",
            "description": "Transaction Risk Analysis (TRA) Exemption Indicator.\n\nValid Values :\nFALSE - Transaction risk analysis exemption not claimed/requested\nTRUE - Transaction risk analysis exemption claimed/requested\n\nIf this exemption does not apply to the transaction, the value of \"FALSE\" is optional and the field may be omitted entirely.\n\nThis field maps to ISO8583->TLV Field 34, Dataset ID 4A, Tag 89.          \n",
            "enum": [
              "true",
              "false"
            ]
          },
          "lowValueExemptionIndicator": {
            "type": "string",
            "description": "Low Value Exemption Indicator.\n\nValid Values :\nFALSE - Low value exemption not claimed/requested\nTRUE - Low value exemption claimed/requested\n\nIf this exemption does not apply to the transaction, the value of \"FALSE\" is optional and the field may be omitted entirely.\n\nThis field maps to ISO8583->TLV Field 34, Dataset ID 4A, Tag 87.\n",
            "enum": [
              "true",
              "false"
            ]
          },
          "scaEnvironmentOutageIndicator": {
            "type": "string",
            "description": "Acceptance Environment Authentication Outage Indicator.\n\nValid Values :\nFALSE - No authentication outage\nTRUE - Authentication outage\n\nIf this exemption does not apply to the transaction, the value of \"FALSE\" is optional and the field may be omitted entirely.This field maps to ISO8583 Field 34 – Dataset ID 02 -Tag 87.\n",
            "enum": [
              "true",
              "false"
            ]
          },
          "delegatedAuthenticationIndicator": {
            "type": "string",
            "description": "Delegated Authentication Indicator.\n\nValid Values :\nFALSE - Delegated authentication not claimed/requested\nTRUE - Delegated authentication claimed/requested\n\nIf this exemption does not apply to the transaction, the value of \"FALSE\" is optional and the field may be omitted entirely.\nClients requesting this exemption should also provide the the following request parameters:\n1. visaMerchantIdentifier value, which is an unique identifier assigned by Visa for each merchant included in the identification program.Issuers can obtain a list of Visa-assigned merchant identifiers from Visa Online (VOL).\n2. Cardholder Authentication Verification Value (CAVV) OR Token Authentication Verification Value (TAVV)\n\nProgram Qualification: Acquirers that choose to participate will identify and qualify potential Delegates that meet the qualification criteria and work with them to evidence how their authentication capabilities are compliant and to obtain their agreement to the requirements of the Program through the Readiness Questionnaire. Token requestors may submit their Readiness Questionnaire directly to Visa. On a per transaction basis, the delegated entity will flag to the Issuer that SCA was performed through EMV 3DS (2.2 only) or VTS.\n\nThis field maps to ISO8583->TLV Field 34, Dataset ID 4A, Tag 8A.\n",
            "enum": [
              "true",
              "false"
            ]
          },
          "trustedMerchantExemptionIndicator": {
            "type": "string",
            "description": "Trusted Merchant Exemption Indicator.\n\nValid Values :\nFALSE - Trusted merchant exemption not claimed/requested\nTRUE - Trusted merchant exemption claimed/requested\n\nIf this exemption does not apply to the transaction, the value of \"FALSE\" is optional and the field may be omitted entirely.\n\nThis field maps to ISO8583->TLV Field 34, Dataset ID 4A, Tag 84.\n",
            "enum": [
              "true",
              "false"
            ]
          }
        }
      },
      "InvalidPayoutResponse-6": {
        "required": [
          "validationDetails",
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "validationDetails": {
            "type": "array",
            "description": "comprehensive array of errors",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse-1"
            }
          },
          "validationResultCode": {
            "type": "string",
            "description": "- INVALID - see validationDetails for validation errors\n",
            "enum": [
              "INVALID"
            ]
          }
        }
      },
      "ReturnReasonCodeDetailsType": {
        "type": "string",
        "description": "Indicates the PSP return type when the payout is returned. Refer to PSP Return Type (add link to VDP)\n\nISO20022 field name: Payment Return - PSP Return Type\n",
        "enum": [
          "REJECTED",
          "RETURNED"
        ]
      },
      "InvalidPayoutResponse-5": {
        "required": [
          "validationDetails",
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "validationDetails": {
            "type": "array",
            "description": "comprehensive array of errors",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse-1"
            }
          },
          "validationResultCode": {
            "type": "string",
            "description": "- INVALID - see validationDetails for validation errors\n",
            "enum": [
              "INVALID"
            ]
          }
        }
      },
      "FXRateResponse": {
        "required": [
          "conversionRate",
          "destinationCurrencyCode",
          "initiatingPartyId",
          "payoutMethod",
          "sourceCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "description": "This field contains the unique number representing the FX Quote.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/QuoteIdStr"
              }
            ]
          },
          "payoutMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "conversionRate": {
            "description": "Exchange Rate between source and Destination currencies\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConversionRate"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "sourceCurrencyCode": {
            "description": "Source amount 3-alpha currency code in ISO 4217\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "quoteExpiryDateTime": {
            "description": "This timestamp represents the datetime value in UTC for which the QuoteId is valid.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "destinationCurrencyCode": {
            "description": "Destination amount 3-alpha currency code in ISO 4217\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          }
        }
      },
      "InvalidPayoutResponse-4": {
        "required": [
          "validationDetails",
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "validationDetails": {
            "type": "array",
            "description": "comprehensive array of errors",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse-2"
            }
          },
          "validationResultCode": {
            "type": "string",
            "description": "- INVALID - see validationDetails for validation errors\n",
            "enum": [
              "INVALID"
            ]
          }
        }
      },
      "MerchantVerificationValue": {
        "maxLength": 10,
        "minLength": 10,
        "type": "string",
        "description": "Conditional\nThe concatenated Merchant Verification Value of Visa assigned and Acquirer assigned value is returned. \n\nNote: This field is present if the MVV value was included on the Send Payout request\n"
      },
      "InvalidPayoutResponse-3": {
        "required": [
          "validationDetails",
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "validationDetails": {
            "type": "array",
            "description": "comprehensive array of errors",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse-1"
            }
          },
          "validationResultCode": {
            "type": "string",
            "description": "- INVALID - see validationDetails for validation errors\n",
            "enum": [
              "INVALID"
            ]
          }
        }
      },
      "InvalidPayoutResponse-7": {
        "required": [
          "validationDetails",
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "validationDetails": {
            "type": "array",
            "description": "comprehensive array of errors",
            "items": {
              "$ref": "#/components/schemas/ErrorResponse-1"
            }
          },
          "validationResultCode": {
            "type": "string",
            "description": "- INVALID - see validationDetails for validation errors\n",
            "enum": [
              "INVALID"
            ]
          }
        }
      },
      "PrepaidBalanceData": {
        "required": [
          "amount",
          "currencyCode"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "Contains the prepaid load amount to the prepaid card, expressed in the currency specified in prepaidBalanceData currency code field. \n\nConditional (Mandatory only for Top Up Transactions)\n\nNote: The number of decimal places assumed for this field depends on the currency. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for P2C.\n\nExample: Currency exponent for USD is 2. If the transaction amount is $100.99, then this field should populate “10099”. If the transaction amount is $100.00 then this field should populate “10000”. Currency exponent for JPY is 0. If the transaction amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: N/A\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "currencyCode": {
            "description": "The 3-digit ISO-4217 code in this field reflects the currency associated with the prepaid balanace data amount \nFormat: 3-digit ISO-4217 (numeric) currency code\n\nConditional (Mandatory only for Top Up Transactions)\n\nISO20022 field name: N/A\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          }
        }
      },
      "UpdatePayoutStatusRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CancelPayoutRequest"
          }
        ]
      },
      "PayoutNotification-4": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PayoutNotificationReceivedRequest-4"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationProcessRequest-4"
          },
          {
            "$ref": "#/components/schemas/PayoutNotificationFailedRequest-1"
          }
        ]
      },
      "TransactionDetailMetadata": {
        "title": "TransactionDetail",
        "required": [
          "purposeOfPayment"
        ],
        "type": "object",
        "properties": {
          "purposeOfPayment": {
            "$ref": "#/components/schemas/PurposeOfPayments"
          }
        },
        "description": "TransactionDetail Object                \n"
      },
      "OriginatorLegalName": {
        "maxLength": 25,
        "minLength": 1,
        "type": "string",
        "description": "The legal business name of the merchant or originating entity sending the payment instruction to Visa.\n",
        "example": "ACME Co"
      },
      "SharingGroupCode": {
        "maxLength": 1,
        "minLength": 1,
        "type": "string",
        "description": "This field is optionally used by Push Payments Gateway participants (merchants and acquirers) to specify the network access priority.<br>Refer to <a\n     href=\"/request_response_code#network_id_and_sharing_group_code\">Sharing Group Code</a><br><b>Note:</b><br>Supported only in US for domestic transactions involving Push Payments Gateway Service.\n",
        "example": "E"
      },
      "VMID": {
        "maxLength": 8,
        "minLength": 1,
        "type": "string",
        "description": "Visa Merchant Identifier\n",
        "example": "12345678"
      },
      "AccountQueryErrorResponse-6": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "description": "- VALIDATION_FAILED: Payout request failed validation\n- ERROR: Payout is in error status\n",
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorDetails": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse-1"
                }
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "AccountQueryErrorResponse-5": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "description": "- VALIDATION_FAILED: Payout request failed validation\n- ERROR: Payout is in error status\n",
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorDetails": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse-1"
                }
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "AccountQueryErrorResponse-4": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "description": "- VALIDATION_FAILED: Payout request failed validation\n- ERROR: Payout is in error status\n",
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorDetails": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse-2"
                }
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "Bank": {
        "required": [
          "accountName",
          "accountNumber",
          "accountNumberType",
          "countryCode",
          "currencyCode"
        ],
        "type": "object",
        "properties": {
          "BIC": {
            "description": "beneficiary bank account Business Identifier Code (BIC)\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution BIC\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BIC"
              }
            ]
          },
          "bankCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "beneficiary bank account bank code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification\n",
            "example": "173"
          },
          "bankName": {
            "description": "Recipient's bank name\n\nISO20022 field name: Creditor Agent Financial Institution Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BankName"
              }
            ]
          },
          "branchCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "beneficiary bank account branch code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Branch Identification\n",
            "example": "123456"
          },
          "accountName": {
            "description": "beneficiary bank account name i.e. account holder name as recorded on beneficiary bank account\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountName"
              }
            ]
          },
          "accountType": {
            "type": "string",
            "description": "Recipient bank account type\n\n* `1` - Checking\n* `2` - Saving \n* `3` - Maestra\n* `4` - Visa\n* `5` - Loan\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Type\n",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "bankCodeType": {
            "type": "string",
            "description": "beneficiary bank account bank code type\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification Type\n",
            "enum": [
              "ABA",
              "SORT_CODE",
              "DEFAULT"
            ]
          },
          "currencyCode": {
            "description": "beneficiary bank account currency code\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Currency\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "accountNumber": {
            "description": "beneficiary bank account number\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Number or IBAN\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountNumber"
              }
            ]
          },
          "accountNumberType": {
            "type": "string",
            "description": "beneficiary bank account number type. Valid values: \"IBAN\" and \"DEFAULT\"\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Financial Institution Account Number Type\n",
            "example": "DEFAULT",
            "enum": [
              "IBAN",
              "DEFAULT"
            ]
          }
        },
        "description": "Recipient's bank object\n\nConditional object when payoutMethod has value 'B'\n"
      },
      "AccountQueryErrorResponse-3": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "description": "- VALIDATION_FAILED: Payout request failed validation\n- ERROR: Payout is in error status\n",
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorDetails": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse-1"
                }
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "AccountQueryErrorResponse-2": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "description": "- VALIDATION_FAILED: Payout request failed validation\n- ERROR: Payout is in error status\n",
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorDetails": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse-1"
                }
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "QuoteId": {
        "type": "integer",
        "description": "This is a unique FX quote ID generated by Visa for a payout currency pair.         \n",
        "format": "int64",
        "example": 987654321
      },
      "CityOfBirth": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "This field should contain recipient’s city of birth.",
        "example": "Mumbai"
      },
      "PurposeOfPayments": {
        "title": "PurposeOfPayments",
        "required": [
          "mandatory"
        ],
        "type": "object",
        "properties": {
          "mandatory": {
            "type": "boolean",
            "description": "Whether the purpose of payment is mandatory.",
            "example": true
          },
          "purposeOfPaymentCodes": {
            "type": "array",
            "description": "List of valid purpose of payment codes.",
            "items": {
              "$ref": "#/components/schemas/PurposeOfPaymentCodes"
            }
          }
        },
        "description": "This group contains all configuration information for Purpose of Payment options. The 'mandatory' attribute indicates whether provision of Purpose of Payment data is required for the Payout to be accepted."
      },
      "AccountQueryErrorResponse-1": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "description": "- VALIDATION_FAILED: Payout request failed validation\n- ERROR: Payout is in error status\n",
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorDetails": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse-1"
                }
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "CardQueryResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardPayoutResponse"
          }
        ]
      },
      "AccountQueryErrorResponse-7": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "description": "- VALIDATION_FAILED: Payout request failed validation\n- ERROR: Payout is in error status\n",
                "enum": [
                  "VALIDATION_FAILED",
                  "ERROR"
                ]
              },
              "errorDetails": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ErrorResponse-1"
                }
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "NetworkResponses-3": {
        "required": [
          "acquirerCountryCode",
          "acquiringBin",
          "cardAcceptorId",
          "retrievalReferenceNumber",
          "settlementResponsibilityFlag",
          "systemTraceAuditNumber",
          "terminalId",
          "transactionAmount",
          "transactionCurrencyCode",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PullFundsTransaction",
              "PushFundsTransaction",
              "PullFundsTransactionReversal"
            ]
          },
          "vauData": {
            "$ref": "#/components/schemas/VAUData"
          },
          "networkId": {
            "$ref": "#/components/schemas/NetworkId"
          },
          "tokenData": {
            "$ref": "#/components/schemas/CardResponseTokenData"
          },
          "actionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Response code that provides the result of the payout request. List of <a href=\"https://developer.visa.com/request_response_codes#action_code\">valid response codes</a>\n",
            "example": "00"
          },
          "last4ofPAN": {
            "maxLength": 4,
            "minLength": 4,
            "type": "integer",
            "description": "This field contains the last four digits of the cardholder primary account number (PAN).            This field is returned only when token is provided in the payout request.\n"
          },
          "terminalId": {
            "$ref": "#/components/schemas/TerminalId"
          },
          "acquiringBin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringBin"
              }
            ]
          },
          "approvalCode": {
            "description": "This is a unique authorization code for an approved transaction from Issuer\n\nISO20022 field name: N/A\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalCode"
              }
            ]
          },
          "dafIndicator": {
            "type": "string",
            "description": "An authentication program indicator to identify transactions qualified by the Digital Authentication Framework for requests containing a CAVV and/or TAVV.\n\nPossible values are true or false          \n",
            "enum": [
              "true",
              "false"
            ]
          },
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            ]
          },
          "approvedAmount": {
            "description": "This field contains the partially approved AFT transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount            \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "cardAcceptorId": {
            "description": "An identifier that uniquely identifies the Originating Entity.  For Push to Card transactions, Card Acceptor Terminal ID (CAID) should be populated\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardAcceptorId"
              }
            ]
          },
          "cavvResultCode": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "The cavvResultCode identifies the outcome of the CAVV validation.<br><br>Note: When using dual cryptograms (both TAVV and CAVV ), If TAVV is valid than cavvResultCode would convey the outcome of the CAVV validation. <br><br>Refer to <a href=\"/request_response_codes#cardholder_authentication_verification_value\">cavvResultCode</a>"
          },
          "givUpdatedFlag": {
            "description": "This field identifies the GivUpdatedFlag. Possible values are true or false\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/GivUpdatedFlag"
              }
            ]
          },
          "memberComments": {
            "maxLength": 254,
            "minLength": 1,
            "type": "string",
            "description": "This field can be optionally used to send and receive comments by service providers. Issuers can optionally include new text in this field in the response. If the issuer does not include this field, Visa will inject the value from the request in the response and send it back to the service provider."
          },
          "responseSource": {
            "$ref": "#/components/schemas/ResponseSource"
          },
          "motoECIIndicator": {
            "maximum": 8,
            "minimum": 1,
            "type": "integer",
            "description": "network returned security level\n"
          },
          "customerReference": {
            "maxLength": 17,
            "minLength": 1,
            "type": "string",
            "description": "<b>Conditional.</b><br><br>This field contains a value that identifies the customer.<br>This field needs to be populated for Argentina domestic transaction where businessApplicationId is \"PS\"."
          },
          "transactionAmount": {
            "description": "This field contains the transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "originalActionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Contains a code that provides the result of original payout request when current request is identified as duplicate of original and actionCode will be 94."
          },
          "prepaidBalanceData": {
            "$ref": "#/components/schemas/PrepaidBalanceData"
          },
          "acquirerCountryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "feeProgramIndicator": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Note: If present, a valid value is required. Spaces or special characters are not allowed."
          },
          "riskAssessmentResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RiskAssessmentResult"
              }
            ]
          },
          "transmissionDateTime": {
            "description": "The time the request was processed by Visa\n",
            "example": "2021-01-01T22:52:46.000Z",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "settlementServiceFlag": {
            "description": "This field identifies the SettlementServiceFlag\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementServiceFlag"
              }
            ]
          },
          "systemTraceAuditNumber": {
            "description": "This field contains a number generated by Visa that uniquely identifies a transaction and all message types. The trace number is a key data element used to match a response to its request or to match a message to others for a given transaction set\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemTraceAuditNumber"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: \"PHP\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "givPreviouslyUpdatedFlag": {
            "description": "This field identifies the GivPreviouslyUpdatedFlag. Possible values are true or false\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/GivPreviouslyUpdatedFlag"
              }
            ]
          },
          "retrievalReferenceNumber": {
            "description": "This is a unique identifier generated by Visa for a card transaction\n\nThe format is ydddhhnnnnnn\nyddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). \nhh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. \nnnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/RetrievalReferenceNumber"
              }
            ]
          },
          "cardAuthenticationResults": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "A Visa-defined code indicating Online Card Authentication Method results.\nRefer to cardAuthenticationResults (https://developer.visa.com/request_response_codes#cardAuthenticationResults)\n"
          },
          "merchantVerificationValue": {
            "required": [
              "mvvAcquirerAssigned",
              "mvvVisaAssigned"
            ],
            "type": "object",
            "properties": {
              "mvvVisaAssigned": {
                "maxLength": 6,
                "minLength": 6,
                "type": "string",
                "description": "Visa assigned MVV value. E.g. 0A45AF"
              },
              "mvvAcquirerAssigned": {
                "maxLength": 4,
                "minLength": 4,
                "type": "string",
                "description": "Visa assists the acquirer in assigning the last four. E.g. 98FC"
              }
            },
            "description": "Merchant Verification Value(MVV) is used to identify merchants that participate in a variety of programs. The MVV is unique to the merchant."
          },
          "addressVerificationResults": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string"
          },
          "settlementResponsibilityFlag": {
            "description": "This field identifies the settlementResponsibilityFlag. Possible values are true or false\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementResponsibilityFlag"
              }
            ]
          },
          "senderIdentificationNumberIndividual": {
            "maxLength": 13,
            "minLength": 1,
            "type": "string",
            "description": "<b>Conditional.</b><br><br>This field contains the identification number issued to the individual by the government or an authorized national entity. For Argentina domestic purchase transactions this field contains the customer’s VAT registration number for tax identification."
          },
          "cpsAuthorizationCharacteristicsIndicator": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "<b>Conditional</b><br>Indicates whether AFT transaction has qualified for CPS. Possible values are : F (Meets CPS/Account Funding requirements) , N (Not Qualified), T (Not Qualified).<br><br><b>Note:</b> Supported only in US for CPS (Custom Payment Service). <br>Please reach out to your Visa representative for details."
          }
        }
      },
      "NetworkResponses-2": {
        "required": [
          "acquirerCountryCode",
          "acquiringBin",
          "cardAcceptorId",
          "retrievalReferenceNumber",
          "systemTraceAuditNumber",
          "terminalId",
          "transactionAmount",
          "transactionCurrencyCode",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PullFundsTransaction",
              "PushFundsTransaction",
              "PullFundsTransactionReversal"
            ]
          },
          "vauData": {
            "$ref": "#/components/schemas/VAUData"
          },
          "networkId": {
            "$ref": "#/components/schemas/NetworkId"
          },
          "tokenData": {
            "$ref": "#/components/schemas/CardResponseTokenData-1"
          },
          "actionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Response code that provides the result of the payout request. List of <a href=\"https://developer.visa.com/request_response_codes#action_code\">valid response codes</a>\n",
            "example": "00"
          },
          "last4ofPAN": {
            "maxLength": 4,
            "minLength": 4,
            "type": "integer",
            "description": "This field contains the last four digits of the cardholder primary account number (PAN).            This field is returned only when token is provided in the payout request.\n"
          },
          "terminalId": {
            "$ref": "#/components/schemas/TerminalId"
          },
          "acquiringBin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringBin"
              }
            ]
          },
          "approvalCode": {
            "description": "This is a unique authorization code for an approved transaction from Issuer\n\nISO20022 field name: N/A\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalCode"
              }
            ]
          },
          "dafIndicator": {
            "type": "string",
            "description": "An authentication program indicator to identify transactions qualified by the Digital Authentication Framework for requests containing a CAVV and/or TAVV.\n\nPossible values are true or false\n",
            "enum": [
              "true",
              "false"
            ]
          },
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            ]
          },
          "approvedAmount": {
            "description": "This field contains the partially approved AFT transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "cardAcceptorId": {
            "description": "An identifier that uniquely identifies the Originating Entity.  For Push to Card transactions, Card Acceptor Terminal ID (CAID) should be populated\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardAcceptorId"
              }
            ]
          },
          "cavvResultCode": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "The cavvResultCode identifies the outcome of the CAVV validation.<br><br>Note: When using dual cryptograms (both TAVV and CAVV ), If TAVV is valid than cavvResultCode would convey the outcome of the CAVV validation. <br><br>Refer to <a href=\"/request_response_codes#cardholder_authentication_verification_value\">cavvResultCode</a>"
          },
          "givUpdatedFlag": {
            "description": "This field identifies the GivUpdatedFlag. Possible values are true or false\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/GivUpdatedFlag"
              }
            ]
          },
          "memberComments": {
            "maxLength": 254,
            "minLength": 1,
            "type": "string",
            "description": "This field can be optionally used to send and receive comments by service providers. Issuers can optionally include new text in this field in the response. If the issuer does not include this field, Visa will inject the value from the request in the response and send it back to the service provider."
          },
          "responseSource": {
            "$ref": "#/components/schemas/ResponseSource"
          },
          "motoECIIndicator": {
            "maximum": 8,
            "minimum": 1,
            "type": "integer",
            "description": "network returned security level\n"
          },
          "customerReference": {
            "maxLength": 17,
            "minLength": 1,
            "type": "string",
            "description": "<b>Conditional.</b><br><br>This field contains a value that identifies the customer.<br>This field needs to be populated for Argentina domestic transaction where businessApplicationId is \"PS\"."
          },
          "transactionAmount": {
            "description": "This field contains the transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "originalActionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Contains a code that provides the result of original payout request when current request is identified as duplicate of original and actionCode will be 94."
          },
          "acquirerCountryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "feeProgramIndicator": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Note: If present, a valid value is required. Spaces or special characters are not allowed."
          },
          "riskAssessmentResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RiskAssessmentResult"
              }
            ]
          },
          "transmissionDateTime": {
            "description": "The time the request was processed by Visa\n",
            "example": "2021-01-01T22:52:46.000Z",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "settlementServiceFlag": {
            "description": "This field identifies the SettlementServiceFlag\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementServiceFlag"
              }
            ]
          },
          "systemTraceAuditNumber": {
            "description": "This field contains a number generated by Visa that uniquely identifies a transaction and all message types. The trace number is a key data element used to match a response to its request or to match a message to others for a given transaction set\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemTraceAuditNumber"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: \"PHP\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "givPreviouslyUpdatedFlag": {
            "description": "This field identifies the GivPreviouslyUpdatedFlag. Possible values are true or false\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/GivPreviouslyUpdatedFlag"
              }
            ]
          },
          "retrievalReferenceNumber": {
            "description": "This is a unique identifier generated by Visa for a card transaction\n\nThe format is ydddhhnnnnnn\nyddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). \nhh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. \nnnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/RetrievalReferenceNumber"
              }
            ]
          },
          "cardAuthenticationResults": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "A Visa-defined code indicating Online Card Authentication Method results.\nRefer to cardAuthenticationResults (https://developer.visa.com/request_response_codes#cardAuthenticationResults)\n"
          },
          "merchantVerificationValue": {
            "required": [
              "mvvAcquirerAssigned",
              "mvvVisaAssigned"
            ],
            "type": "object",
            "properties": {
              "mvvVisaAssigned": {
                "maxLength": 6,
                "minLength": 6,
                "type": "string",
                "description": "Visa assigned MVV value. E.g. 0A45AF"
              },
              "mvvAcquirerAssigned": {
                "maxLength": 4,
                "minLength": 4,
                "type": "string",
                "description": "Visa assists the acquirer in assigning the last four. E.g. 98FC"
              }
            },
            "description": "Merchant Verification Value(MVV) is used to identify merchants that participate in a variety of programs. The MVV is unique to the merchant."
          },
          "addressVerificationResults": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string"
          },
          "settlementResponsibilityFlag": {
            "description": "This field identifies the settlementResponsibilityFlag. Possible values are true or false\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementResponsibilityFlag"
              }
            ]
          },
          "senderIdentificationNumberIndividual": {
            "maxLength": 13,
            "minLength": 1,
            "type": "string",
            "description": "<b>Conditional.</b><br><br>This field contains the identification number issued to the individual by the government or an authorized national entity. For Argentina domestic purchase transactions this field contains the customer’s VAT registration number for tax identification."
          },
          "cpsAuthorizationCharacteristicsIndicator": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "<b>Conditional</b><br>Indicates whether AFT transaction has qualified for CPS. Possible values are : F (Meets CPS/Account Funding requirements) , N (Not Qualified), T (Not Qualified).<br><br><b>Note:</b> Supported only in US for CPS (Custom Payment Service). <br>Please reach out to your Visa representative for details."
          }
        }
      },
      "NetworkResponses-1": {
        "required": [
          "acquirerCountryCode",
          "acquiringBin",
          "cardAcceptorId",
          "retrievalReferenceNumber",
          "settlementResponsibilityFlag",
          "systemTraceAuditNumber",
          "terminalId",
          "transactionAmount",
          "transactionCurrencyCode",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PullFundsTransaction",
              "PushFundsTransaction",
              "PullFundsTransactionReversal"
            ]
          },
          "vauData": {
            "$ref": "#/components/schemas/VAUData"
          },
          "networkId": {
            "$ref": "#/components/schemas/NetworkId"
          },
          "tokenData": {
            "$ref": "#/components/schemas/CardResponseTokenData"
          },
          "actionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Response code that provides the result of the payout request. List of <a href=\"https://developer.visa.com/request_response_codes#action_code\">valid response codes</a>\n",
            "example": "00"
          },
          "last4ofPAN": {
            "maxLength": 4,
            "minLength": 4,
            "type": "integer",
            "description": "This field contains the last four digits of the cardholder primary account number (PAN).            This field is returned only when token is provided in the payout request.\n"
          },
          "terminalId": {
            "$ref": "#/components/schemas/TerminalId"
          },
          "acquiringBin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringBin"
              }
            ]
          },
          "approvalCode": {
            "description": "This is a unique authorization code for an approved transaction from Issuer\n\nISO20022 field name: N/A\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalCode"
              }
            ]
          },
          "dafIndicator": {
            "type": "string",
            "description": "An authentication program indicator to identify transactions qualified by the Digital Authentication Framework for requests containing a CAVV and/or TAVV.\n\nPossible values are true or false          \n",
            "enum": [
              "true",
              "false"
            ]
          },
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            ]
          },
          "approvedAmount": {
            "description": "This field contains the partially approved AFT transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount            \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "cardAcceptorId": {
            "description": "An identifier that uniquely identifies the Originating Entity.  For Push to Card transactions, Card Acceptor Terminal ID (CAID) should be populated\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardAcceptorId"
              }
            ]
          },
          "cavvResultCode": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "The cavvResultCode identifies the outcome of the CAVV validation.<br><br>Note: When using dual cryptograms (both TAVV and CAVV ), If TAVV is valid than cavvResultCode would convey the outcome of the CAVV validation. <br><br>Refer to <a href=\"/request_response_codes#cardholder_authentication_verification_value\">cavvResultCode</a>"
          },
          "givUpdatedFlag": {
            "description": "This field identifies the GivUpdatedFlag. Possible values are true or false\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/GivUpdatedFlag"
              }
            ]
          },
          "memberComments": {
            "maxLength": 254,
            "minLength": 1,
            "type": "string",
            "description": "This field can be optionally used to send and receive comments by service providers. Issuers can optionally include new text in this field in the response. If the issuer does not include this field, Visa will inject the value from the request in the response and send it back to the service provider."
          },
          "responseSource": {
            "$ref": "#/components/schemas/ResponseSource"
          },
          "motoECIIndicator": {
            "maximum": 8,
            "minimum": 1,
            "type": "integer",
            "description": "network returned security level\n"
          },
          "customerReference": {
            "maxLength": 17,
            "minLength": 1,
            "type": "string",
            "description": "<b>Conditional.</b><br><br>This field contains a value that identifies the customer.<br>This field needs to be populated for Argentina domestic transaction where businessApplicationId is \"PS\"."
          },
          "transactionAmount": {
            "description": "This field contains the transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "originalActionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Contains a code that provides the result of original payout request when current request is identified as duplicate of original and actionCode will be 94."
          },
          "prepaidBalanceData": {
            "$ref": "#/components/schemas/PrepaidBalanceData"
          },
          "acquirerCountryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "feeProgramIndicator": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Note: If present, a valid value is required. Spaces or special characters are not allowed."
          },
          "riskAssessmentResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RiskAssessmentResult"
              }
            ]
          },
          "transmissionDateTime": {
            "description": "The time the request was processed by Visa\n",
            "example": "2021-01-01T22:52:46.000Z",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "settlementServiceFlag": {
            "description": "This field identifies the SettlementServiceFlag\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementServiceFlag"
              }
            ]
          },
          "systemTraceAuditNumber": {
            "description": "This field contains a number generated by Visa that uniquely identifies a transaction and all message types. The trace number is a key data element used to match a response to its request or to match a message to others for a given transaction set\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemTraceAuditNumber"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: \"PHP\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "givPreviouslyUpdatedFlag": {
            "description": "This field identifies the GivPreviouslyUpdatedFlag. Possible values are true or false\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/GivPreviouslyUpdatedFlag"
              }
            ]
          },
          "retrievalReferenceNumber": {
            "description": "This is a unique identifier generated by Visa for a card transaction\n\nThe format is ydddhhnnnnnn\nyddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). \nhh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. \nnnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/RetrievalReferenceNumber"
              }
            ]
          },
          "cardAuthenticationResults": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "A Visa-defined code indicating Online Card Authentication Method results.\nRefer to cardAuthenticationResults (https://developer.visa.com/request_response_codes#cardAuthenticationResults)\n"
          },
          "merchantVerificationValue": {
            "required": [
              "mvvAcquirerAssigned",
              "mvvVisaAssigned"
            ],
            "type": "object",
            "properties": {
              "mvvVisaAssigned": {
                "maxLength": 6,
                "minLength": 6,
                "type": "string",
                "description": "Visa assigned MVV value. E.g. 0A45AF"
              },
              "mvvAcquirerAssigned": {
                "maxLength": 4,
                "minLength": 4,
                "type": "string",
                "description": "Visa assists the acquirer in assigning the last four. E.g. 98FC"
              }
            },
            "description": "Merchant Verification Value(MVV) is used to identify merchants that participate in a variety of programs. The MVV is unique to the merchant."
          },
          "addressVerificationResults": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string"
          },
          "settlementResponsibilityFlag": {
            "description": "This field identifies the settlementResponsibilityFlag. Possible values are true or false\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementResponsibilityFlag"
              }
            ]
          },
          "senderIdentificationNumberIndividual": {
            "maxLength": 13,
            "minLength": 1,
            "type": "string",
            "description": "<b>Conditional.</b><br><br>This field contains the identification number issued to the individual by the government or an authorized national entity. For Argentina domestic purchase transactions this field contains the customer’s VAT registration number for tax identification."
          },
          "cpsAuthorizationCharacteristicsIndicator": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "<b>Conditional</b><br>Indicates whether AFT transaction has qualified for CPS. Possible values are : F (Meets CPS/Account Funding requirements) , N (Not Qualified), T (Not Qualified).<br><br><b>Note:</b> Supported only in US for CPS (Custom Payment Service). <br>Please reach out to your Visa representative for details."
          }
        }
      },
      "ActionCode-1": {
        "type": "string",
        "description": "Represents action on the payout",
        "enum": [
          "CANCEL",
          "REVERSAL"
        ]
      },
      "202AccountPayoutCreatedResponse": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "properties": {
              "status": {
                "$ref": "#/components/schemas/202TransactionStatus"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "OriginatorId": {
        "maxLength": 15,
        "minLength": 1,
        "type": "string",
        "description": "An alphanumeric field that uniquely identifies the Originating Entity for Push to Account transactions. The Orignating Entity should populate Card Acceptor ID (CAID)  for Push to Card transactions. \n\nISO20022 field name: Debtor - Originating Entity Identification\n",
        "example": "1234567890"
      },
      "FirstName": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Required when recipient is an individual.",
        "example": "Joe"
      },
      "StatementNarrative-1": {
        "maxLength": 140,
        "minLength": 1,
        "type": "string",
        "description": "Originating Entity is advised to provide a narrative that helps the recipient clearly identify the sender and reason for the payment. Text will be displayed on the recipient’s statement when the payment gets posted to the recipient’s account or wallet statement. \nNot all wallet operators support a statement narrative.\n\nConditional - (Refer to Payouts Endpoint Guide on country-specific required fields and lengths).\n\nISO20022 field name: Remittance Information Unstructured\n",
        "example": "testing narrative"
      },
      "CardAcceptorId": {
        "maxLength": 15,
        "minLength": 1,
        "type": "string",
        "description": "An alphanumeric field that uniquely identifies the Originating Entity for Push to Account transactions. The Orignating Entity should populate Card Acceptor Terminal ID (CAID)  for Push to Card transactions. \n\nISO20022 field name: Debtor - Originating Entity Identification\n",
        "example": "1234567890"
      },
      "FundingStatus-1": {
        "type": "string",
        "description": "Indicates funding status of the payout transaction. This field is applicable for account payments only.\n",
        "enum": [
          "FUNDED",
          "NOT_FUNDED"
        ]
      },
      "BuildingNumber": {
        "maxLength": 16,
        "minLength": 1,
        "type": "string",
        "description": "This field contains building number of address.",
        "example": "Building 4"
      },
      "SystemTraceAuditNumber": {
        "maxLength": 6,
        "minLength": 6,
        "type": "string",
        "description": "This field contains a number assigned by the Originating Entity that uniquely identifies a transaction and all message types. The trace number is one of the key data elements used to match a response to its request or to match a message to others for a given transaction set\n\nISO20022 field name: N/A\n",
        "example": "685420"
      },
      "EndToEndId": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Identifier assigned by the Originating Entity's customer to track the transaction end-to-end\n\nConditional: Required if payout to a wallet recipient\n\nISO20022 field name: end-to-end identification \n",
        "example": "5003f6a02c4411b2aa5747378ae5331"
      },
      "PayoutWalletRequest": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“W” – Visa Direct Wallet\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress"
              },
              "cityOfBirth": {
                "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CityOfBirth"
                  }
                ]
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name: Ultimate Debtor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447809713678\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData"
              },
              "countryOfBirth": {
                "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCountryCode"
                  }
                ]
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "wallet"
            ],
            "properties": {
              "wallet": {
                "$ref": "#/components/schemas/Wallet"
              },
              "cityOfBirth": {
                "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CityOfBirth"
                  }
                ]
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447809713678 \n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData"
              },
              "countryOfBirth": {
                "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCountryCode"
                  }
                ]
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Identification Code\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail"
              }
            ]
          }
        }
      },
      "401ErrorResponseWithKey-1": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/401ErrorResponseObject"
              }
            ]
          }
        }
      },
      "AccountId": {
        "maxLength": 31,
        "minLength": 12,
        "type": "string",
        "description": "The accountId uniquely identifies the ledger account as a virtual account number(i.e. VAN), with a value or number assigned by Visa."
      },
      "NameI": {
        "maxLength": 70,
        "minLength": 3,
        "type": "string",
        "description": "Full name of Individual",
        "example": "Visa"
      },
      "TransactionStatus": {
        "type": "string",
        "description": "- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received\n- AWAITING_INFORMATION: Awaiting more information before transaction is processed .\n- PAYMENT_SENT: The payout has been submitted to the Network partner\n- PAYMENT_DELIVERED: The payout has been posted to the recipient's account. This status is only applicable for Wallet Payments\n- PENDING_CANCELLATION: Cancel payout status is pending\n- CANCELLED - Payout is cancelled\n- RETURNED: Returned request is refunded to Originating Entity\n- REJECTED: Rejected request is refunded to Originating Entity\n",
        "example": "PAYMENT_SENT",
        "enum": [
          "PAYMENT_RECEIVED",
          "AWAITING_INFORMATION",
          "PAYMENT_SENT",
          "PAYMENT_DELIVERED",
          "PENDING_CANCELLATION",
          "CANCELLED",
          "RETURNED",
          "REJECTED"
        ]
      },
      "SenderCompany-1": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Sender company name. <br>Must not contain exclusively numeric characters\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Name\"<br>For 3rd party payments: \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of sender - \"C\" for Company \n\nISO20022 field name: Debtor Identification Type       \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          }
        }
      },
      "SenderCompany-2": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Sender company name. <br>Must not contain exclusively numeric characters\n\nISO20022 field name: \"Ultimate Debtor Name\" or \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of sender - \"C\" for Company \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          }
        }
      },
      "SenderCompany-3": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Sender company name. <br>Must not contain exclusively numeric characters\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Name\"<br>For 3rd party payments: \"Debtor Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyName"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of sender - \"C\" for Company \n\nISO20022 field name: Debtor Identification Type\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          }
        }
      },
      "Name": {
        "maxLength": 70,
        "minLength": 1,
        "type": "string",
        "description": "It can have either company name or fullname based on type (I or C)",
        "example": "Visa"
      },
      "ValidPayoutWithNetworkResponse-2": {
        "required": [
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "expectedPostingDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedPostingDateForValidate"
              }
            ]
          },
          "validationResultCode": {
            "type": "string",
            "description": "- VALID_WITH_NETWORK - Both Visa's and partner network's validations succeed. Only applicable for Wallet Payouts. \n",
            "enum": [
              "VALID_WITH_NETWORK"
            ]
          }
        }
      },
      "ValidPayoutWithNetworkResponse-3": {
        "required": [
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "networkInfo": {
            "type": "array",
            "description": "Validation based on different card networks",
            "items": {
              "type": "object",
              "properties": {
                "domestic": {
                  "maxLength": 1,
                  "minLength": 1,
                  "type": "string",
                  "description": "This is an Optional Field. Indicates domestic transaction is allowed. This is a single-character alphabetic code.<br>Y -  Cross border transfer allowed"
                },
                "fastFunds": {
                  "maxLength": 1,
                  "minLength": 1,
                  "type": "string",
                  "description": "This is an Optional Field. Indicates fastFunds transaction is allowed. This is a single-character alphabetic code.<br>Y -  Both Cross border transfer and domestic fast funds transfer allowed<br>X -  cross border fast funds transfer allowed<br>D -  domestic transfer allowed"
                },
                "networkId": {
                  "maxLength": 4,
                  "type": "integer",
                  "description": "This contains a code that identifies the network.<br>Refer to <a href=\"/request_response_codes#network_id_and_sharing_group_code\">Network Id</a>"
                },
                "issuerName": {
                  "maxLength": 240,
                  "type": "string",
                  "description": "Name of the recipient issuer."
                },
                "accountType": {
                  "maxLength": 8,
                  "minLength": 2,
                  "type": "string",
                  "description": "This is used to identify the account type of the recipientPrimaryAccountNumber in the request. Below are the possible values. <br><br><b>DEBIT</b><br><b>CREDIT</b><br><br> Processing codes for Debit account Type <br>10-Saving account<br>20-Checking account<br><br>Processing codes for Credit account Type<br>30-Credit card account<br><br> If accountType is not provided for Combo Card, then response will display<br><br>10 or 20 for Combo Card  <br>30 for Combo Card"
                },
                "crossBorder": {
                  "maxLength": 1,
                  "minLength": 1,
                  "type": "string",
                  "description": "This is an Optional Field. Indicates crossBorder transaction is allowed. This is a single-character alphabetic code.<br>Y -  Cross border transfer allowed"
                },
                "cardTypeCode": {
                  "maxLength": 1,
                  "minLength": 1,
                  "type": "string",
                  "description": "The code of account funding source for the card, e.g. Credit, Debit, Prepaid, Charge, Deferred Debit.<br>Refer to <a href=\"/.  request_response_codes#card_type\">cardTypeCode</a>"
                },
                "cardSubTypeCode": {
                  "maxLength": 1,
                  "minLength": 1,
                  "type": "string",
                  "description": "This is an Optional Field. Indicates the type of prepaid card. This is a single-character alphabetic code.<br>R -  Reloadable.<br>N -  Non-reloadable."
                },
                "cardPlatformCode": {
                  "maxLength": 2,
                  "minLength": 1,
                  "type": "string",
                  "description": "Indicates the type of card. This is a 2-character alphabetic code.<br>BZ -  Business.<br>CN -  Consumer.<br>CO -  Commercial.<br>GV -  Government."
                },
                "issuerCountryCode": {
                  "maxLength": 3,
                  "minLength": 3,
                  "type": "integer",
                  "description": "Country code of the recipient issuer’s country.<br> Refer to <a href=\"/request_response_codes#iso_country_codes\">ISO Country Codes (numeric)</a>"
                },
                "prepaidSubtypeCode": {
                  "maxLength": 2,
                  "minLength": 2,
                  "type": "string",
                  "description": "Indicates the subtype code of prepaid product. This is a 2-character alphabetic code and below are the possible values.<br>GP = General Purpose <br>AC = Brazil Agriculture Maintenance Account/Custeio <br>AE = Brazil Agriculture Debit Account/Electron <br>AG = Brazil Agriculture <br>AI = Brazil Agriculture Investment Loan/Investimento <br>CG = Brazil Cargo <br>CS = Construction<br> <br>DS = Distribution<br> <br>EN = Large Market Enterprise <br>EX = Small Market Expenses<br> <br>LP = Visa Large-Purchase Advantage (VLPA) <br>MA = mVISA Agent H <br>MB = mVisa Merchant Payment <br>MG = Visa Mobile General <br>MX = Merchant Agent <br>TK = Service Advantage <br>VA = Brazil Food or Supermarket/Alimentacao Visa Vale <br>VF = Brazil Fuel/Flex Visa Vale <br>VM = Meal Voucher <br>VN = Visa Vale Food Voucher <br>VR = Brazil Food or Restaurant/Refeicao Visa Vale"
                },
                "accountCurrencyCode": {
                  "maxLength": 3,
                  "minLength": 3,
                  "type": "integer",
                  "description": "Indicates a currency code, use a 3-digit numeric currency code for the card billing currency of the PAN. Refer <a href='https://developer.visa.com/request_response_codes#iso_country_and_currency_codes'>ISO Codes</a>"
                },
                "billingCurrencyCode": {
                  "maxLength": 3,
                  "minLength": 3,
                  "type": "integer",
                  "description": "Use a 3-digit numeric currency code for the card billing currency of the PAN.<br>Refer to <a href=\"/request_response_codes#currency_codes\">ISO Codes</a>"
                },
                "pushFundsCrossBorderAuthApprovalInd": {
                  "maxLength": 16,
                  "minLength": 2,
                  "type": "string",
                  "description": "Indicates an auth approval rate for Cross border OCT of the issuer account range/BIN of the recipient card for the last three months. Below are the possible values.<br><br> READY<br> OPTIMIZED <br>NON-OPTIMIZED"
                }
              }
            }
          },
          "expectedPostingDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedPostingDateForValidate"
              }
            ]
          },
          "validationResultCode": {
            "type": "string",
            "description": "- VALID_WITH_NETWORK - Both Visa's and partner network's validations succeed.\n",
            "enum": [
              "VALID_WITH_NETWORK"
            ]
          }
        }
      },
      "PaymentCredentialReference": {
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PCI_TOKEN_REFID"
            ]
          },
          "value": {
            "maxLength": 75,
            "minLength": 1,
            "type": "string"
          },
          "merchantId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique Merchant Identification assigned by Token Service Provider."
          }
        },
        "description": "Object to carry a payment instrument that is an alternative to PAN or network token e.g. PCI Token Reference ID.\n"
      },
      "AccountQueryPendingCancelledResponse": {
        "$ref": "#/components/schemas/QueryPendingCancelledResponse"
      },
      "ValidPayoutWithNetworkResponse-1": {
        "required": [
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "networkInfo": {
            "type": "array",
            "description": "Validation based on different card networks",
            "items": {
              "type": "object",
              "properties": {
                "domestic": {
                  "maxLength": 1,
                  "minLength": 1,
                  "type": "string",
                  "description": "This is an Optional Field. Indicates domestic transaction is allowed. This is a single-character alphabetic code.<br>Y -  Cross border transfer allowed"
                },
                "fastFunds": {
                  "maxLength": 1,
                  "minLength": 1,
                  "type": "string",
                  "description": "This is an Optional Field. Indicates fastFunds transaction is allowed. This is a single-character alphabetic code.<br>Y -  Both Cross border transfer and domestic fast funds transfer allowed<br>X -  cross border fast funds transfer allowed<br>D -  domestic transfer allowed"
                },
                "networkId": {
                  "maxLength": 4,
                  "type": "integer",
                  "description": "This contains a code that identifies the network.<br>Refer to <a href=\"/request_response_codes#network_id_and_sharing_group_code\">Network Id</a>"
                },
                "issuerName": {
                  "maxLength": 240,
                  "type": "string",
                  "description": "Name of the recipient issuer."
                },
                "accountType": {
                  "maxLength": 8,
                  "minLength": 2,
                  "type": "string",
                  "description": "This is used to identify the account type of the recipientPrimaryAccountNumber in the request. Below are the possible values. <br><br><b>DEBIT</b><br><b>CREDIT</b><br><br> Processing codes for Debit account Type <br>10-Saving account<br>20-Checking account<br><br>Processing codes for Credit account Type<br>30-Credit card account<br><br> If accountType is not provided for Combo Card, then response will display<br><br>10 or 20 for Combo Card  <br>30 for Combo Card"
                },
                "crossBorder": {
                  "maxLength": 1,
                  "minLength": 1,
                  "type": "string",
                  "description": "This is an Optional Field. Indicates crossBorder transaction is allowed. This is a single-character alphabetic code.<br>Y -  Cross border transfer allowed"
                },
                "cardTypeCode": {
                  "maxLength": 1,
                  "minLength": 1,
                  "type": "string",
                  "description": "The code of account funding source for the card, e.g. Credit, Debit, Prepaid, Charge, Deferred Debit.<br>Refer to <a href=\"/.  request_response_codes#card_type\">cardTypeCode</a>"
                },
                "cardSubTypeCode": {
                  "maxLength": 1,
                  "minLength": 1,
                  "type": "string",
                  "description": "This is an Optional Field. Indicates the type of prepaid card. This is a single-character alphabetic code.<br>R -  Reloadable.<br>N -  Non-reloadable."
                },
                "cardPlatformCode": {
                  "maxLength": 2,
                  "minLength": 1,
                  "type": "string",
                  "description": "Indicates the type of card. This is a 2-character alphabetic code.<br>BZ -  Business.<br>CN -  Consumer.<br>CO -  Commercial.<br>GV -  Government."
                },
                "issuerCountryCode": {
                  "maxLength": 3,
                  "minLength": 3,
                  "type": "integer",
                  "description": "Country code of the recipient issuer’s country.<br> Refer to <a href=\"/request_response_codes#iso_country_codes\">ISO Country Codes (numeric)</a>"
                },
                "prepaidSubtypeCode": {
                  "maxLength": 2,
                  "minLength": 2,
                  "type": "string",
                  "description": "Indicates the subtype code of prepaid product. This is a 2-character alphabetic code and below are the possible values.<br>GP = General Purpose <br>AC = Brazil Agriculture Maintenance Account/Custeio <br>AE = Brazil Agriculture Debit Account/Electron <br>AG = Brazil Agriculture <br>AI = Brazil Agriculture Investment Loan/Investimento <br>CG = Brazil Cargo <br>CS = Construction<br> <br>DS = Distribution<br> <br>EN = Large Market Enterprise <br>EX = Small Market Expenses<br> <br>LP = Visa Large-Purchase Advantage (VLPA) <br>MA = mVISA Agent H <br>MB = mVisa Merchant Payment <br>MG = Visa Mobile General <br>MX = Merchant Agent <br>TK = Service Advantage <br>VA = Brazil Food or Supermarket/Alimentacao Visa Vale <br>VF = Brazil Fuel/Flex Visa Vale <br>VM = Meal Voucher <br>VN = Visa Vale Food Voucher <br>VR = Brazil Food or Restaurant/Refeicao Visa Vale"
                },
                "accountCurrencyCode": {
                  "maxLength": 3,
                  "minLength": 3,
                  "type": "integer",
                  "description": "Indicates a currency code, use a 3-digit numeric currency code for the card billing currency of the PAN. Refer <a href='https://developer.visa.com/request_response_codes#iso_country_and_currency_codes'>ISO Codes</a>"
                },
                "billingCurrencyCode": {
                  "maxLength": 3,
                  "minLength": 3,
                  "type": "integer",
                  "description": "Use a 3-digit numeric currency code for the card billing currency of the PAN.<br>Refer to <a href=\"/request_response_codes#currency_codes\">ISO Codes</a>"
                },
                "pushFundsCrossBorderAuthApprovalInd": {
                  "maxLength": 16,
                  "minLength": 2,
                  "type": "string",
                  "description": "Indicates an auth approval rate for Cross border OCT of the issuer account range/BIN of the recipient card for the last three months. Below are the possible values.<br><br> READY<br> OPTIMIZED <br>NON-OPTIMIZED"
                }
              }
            }
          },
          "expectedPostingDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedPostingDateForValidate"
              }
            ]
          },
          "validationResultCode": {
            "type": "string",
            "description": "- VALID_WITH_NETWORK - Both Visa's and partner network's validations succeed. \n",
            "enum": [
              "VALID_WITH_NETWORK"
            ]
          }
        }
      },
      "ClientReferenceId-1": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Identifier assigned by the Originating Entity to uniquely identify the transaction.\n\nISO20022 field name: Transaction Identification\n\nOnly alphanumeric and '-' characters are allowed.\n"
      },
      "RiskAssessmentData-1": {
        "type": "object",
        "properties": {
          "scpExemptionIndicator": {
            "type": "string",
            "description": "Secure Corporate Payment (SCP) Indicator.\n\nValid Values :\nFALSE - Secure corporate payment exemption not claimed/requested\nTRUE - Secure corporate payment exemption claimed/requested\n\nIf this exemption does not apply to the transaction, the value of \"FALSE\" is optional and the field may be omitted entirely.\n\nThis field maps to ISO8583->TLV Field 34, Dataset ID 4A, Tag 88.\n",
            "enum": [
              "true",
              "false"
            ]
          },
          "traExemptionIndicator": {
            "type": "string",
            "description": "Transaction Risk Analysis (TRA) Exemption Indicator.\n\nValid Values :\nFALSE - Transaction risk analysis exemption not claimed/requested\nTRUE - Transaction risk analysis exemption claimed/requested\n\nIf this exemption does not apply to the transaction, the value of \"FALSE\" is optional and the field may be omitted entirely.\n\nThis field maps to ISO8583->TLV Field 34, Dataset ID 4A, Tag 89.\n",
            "enum": [
              "true",
              "false"
            ]
          },
          "lowValueExemptionIndicator": {
            "type": "string",
            "description": "Low Value Exemption Indicator.\n\nValid Values :\nFALSE - Low value exemption not claimed/requested\nTRUE - Low value exemption claimed/requested\n\nIf this exemption does not apply to the transaction, the value of \"FALSE\" is optional and the field may be omitted entirely.\n\nThis field maps to ISO8583->TLV Field 34, Dataset ID 4A, Tag 87.\n",
            "enum": [
              "true",
              "false"
            ]
          },
          "scaEnvironmentOutageIndicator": {
            "type": "string",
            "description": "Acceptance Environment Authentication Outage Indicator.\n\nValid Values :\nFALSE - No authentication outage\nTRUE - Authentication outage\n\nIf this exemption does not apply to the transaction, the value of \"FALSE\" is optional and the field may be omitted entirely.This field maps to ISO8583 Field 34 – Dataset ID 02 -Tag 87.\n",
            "enum": [
              "true",
              "false"
            ]
          },
          "delegatedAuthenticationIndicator": {
            "type": "string",
            "description": "Delegated Authentication Indicator.\n\nValid Values :\nFALSE - Delegated authentication not claimed/requested\nTRUE - Delegated authentication claimed/requested\n\nIf this exemption does not apply to the transaction, the value of \"FALSE\" is optional and the field may be omitted entirely.\nClients requesting this exemption should also provide the the following request parameters:\n1. visaMerchantIdentifier value, which is an unique identifier assigned by Visa for each merchant included in the identification program.Issuers can obtain a list of Visa-assigned merchant identifiers from Visa Online (VOL).\n2. Cardholder Authentication Verification Value (CAVV) OR Token Authentication Verification Value (TAVV)\n\nProgram Qualification: Acquirers that choose to participate will identify and qualify potential Delegates that meet the qualification criteria and work with them to evidence how their authentication capabilities are compliant and to obtain their agreement to the requirements of the Program through the Readiness Questionnaire. Token requestors may submit their Readiness Questionnaire directly to Visa. On a per transaction basis, the delegated entity will flag to the Issuer that SCA was performed through EMV 3DS (2.2 only) or VTS.\n\nThis field maps to ISO8583->TLV Field 34, Dataset ID 4A, Tag 8A.\n",
            "enum": [
              "true",
              "false"
            ]
          },
          "trustedMerchantExemptionIndicator": {
            "type": "string",
            "description": "Trusted Merchant Exemption Indicator.\n\nValid Values :\nFALSE - Trusted merchant exemption not claimed/requested\nTRUE - Trusted merchant exemption claimed/requested\n\nIf this exemption does not apply to the transaction, the value of \"FALSE\" is optional and the field may be omitted entirely.\n\nThis field maps to ISO8583->TLV Field 34, Dataset ID 4A, Tag 84.\n",
            "enum": [
              "true",
              "false"
            ]
          }
        }
      },
      "ValidatePayoutResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidPayoutResponse"
          },
          {
            "$ref": "#/components/schemas/ValidPayoutWithNetworkResponse"
          },
          {
            "$ref": "#/components/schemas/InvalidPayoutResponse"
          }
        ]
      },
      "LedgerNotification-2": {
        "required": [
          "accountId",
          "amount",
          "creditDebitIndicator",
          "currencyCode",
          "entryId",
          "entryType",
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "Funding amount that is credited by the Originating Entity. Expressed in the currency provided in field currencyCode\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "entryId": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The entry Id is used to uniquely identify a ledger notification for a single account and currency"
          },
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "entryType": {
            "type": "string",
            "description": "Entry type helps to classify entries in ledger. \n\nPossible values:\n* 'FUNDING'\n* 'REPATRIATION'\n* 'JOURNAL'\n* 'MANAGED_LIQUIDITY'\n",
            "enum": [
              "FUNDING",
              "REPATRIATION",
              "JOURNAL",
              "MANAGED_LIQUIDITY"
            ]
          },
          "narrative": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "An optional description for the reason why a ledger notification was performed."
          },
          "valueDate": {
            "description": "The date at which the funds are available to fund transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Date-1"
              }
            ]
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId-1"
          },
          "bookingDate": {
            "description": "THe date at which funds are received into the ledger.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Date-1"
              }
            ]
          },
          "currencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "additionalInfo1": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "additionalInfo2": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "additionalInfo3": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "creditDebitIndicator": {
            "type": "string",
            "description": "Indicates that money credited to or debited from the account\n\nPossible values:\n* `CREDIT` - Indicates that the client has funded their account.\n* `DEBIT` - Indicates that money was removed from a client account.\n",
            "enum": [
              "CREDIT",
              "DEBIT"
            ]
          }
        },
        "description": "Used to indicate to originators that various ledger entries has been received by Visa."
      },
      "LedgerNotification-1": {
        "required": [
          "accountId",
          "amount",
          "creditDebitIndicator",
          "currencyCode",
          "entryId",
          "entryType",
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "Funding amount that is credited by the Originating Entity. Expressed in the currency provided in field currencyCode\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "entryId": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The entry Id is used to uniquely identify a ledger notification for a single account and currency"
          },
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "entryType": {
            "type": "string",
            "description": "Entry type helps to classify entries in ledger. \n\nPossible values:\n* 'FUNDING'\n* 'REPATRIATION'\n* 'JOURNAL'\n* 'MANAGED_LIQUIDITY'\n",
            "enum": [
              "FUNDING",
              "REPATRIATION",
              "JOURNAL",
              "MANAGED_LIQUIDITY"
            ]
          },
          "narrative": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "An optional description for the reason why a ledger notification was performed."
          },
          "valueDate": {
            "description": "The date at which the funds are available to fund transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Date-1"
              }
            ]
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "bookingDate": {
            "description": "THe date at which funds are received into the ledger.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Date-1"
              }
            ]
          },
          "currencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "additionalInfo1": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "additionalInfo2": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "additionalInfo3": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "creditDebitIndicator": {
            "type": "string",
            "description": "Indicates that money credited to or debited from the account\n\nPossible values:\n* `CREDIT` - Indicates that the client has funded their account.\n* `DEBIT` - Indicates that money was removed from a client account.\n",
            "enum": [
              "CREDIT",
              "DEBIT"
            ]
          }
        },
        "description": "Used to indicate to originators that various ledger entries has been received by Visa."
      },
      "WalletTransactionDetail": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "RecipientAccountPayoutAddress": {
        "type": "object",
        "properties": {
          "city": {
            "description": "Recipient address city\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Town Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ]
          },
          "state": {
            "description": "Recipient address state or province\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Country Sub-division\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "Recipient address country\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Country\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "postalCode": {
            "description": "Recipient address postal code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Postal Code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PostalCode"
              }
            ]
          },
          "addressLine1": {
            "description": "Recipient address line 1\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Line 1\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine1"
              }
            ]
          },
          "addressLine2": {
            "description": "Recipient address line 2\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Address Line 2\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine2"
              }
            ]
          }
        }
      },
      "ValidatePayoutCardRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionValidateDetail-1"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutCardRequest-1"
          }
        ]
      },
      "CardPayoutValidateRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionValidateDetail-1"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutCardRequest-1"
          }
        ]
      },
      "CardPayoutValidateRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionValidateDetail-2"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutCardRequest-3"
          }
        ]
      },
      "RetrievalReferenceNumber": {
        "maxLength": 12,
        "minLength": 12,
        "pattern": "^\\d{12}$",
        "type": "string",
        "description": "This is a unique identifier generated by the Orignating Entity for a transaction and its one of the key fields for matching a transaction with the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for P2A and Reversals, Chargeback, Response, Advice for P2C. It is also used for duplicate validation check done by Visa.\n\nThe format is recommended to be ydddhhnnnnnn\nyddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). \nhh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. \nnnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\n\nISO20022 field name: Payment Identification - Instruction Identification\n",
        "example": "410721685200"
      },
      "AccountBalanceWithTimestamp-1": {
        "required": [
          "balance"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "balanceTimestamp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "lastTransactionTimestamp": {
            "description": "The timestamp of the last money movement on the client's account. \n\nThis is a valid ISO 8601 timestamp, such as YYYY-MM-DDThh:mm:ss.sss±hh:mm.                  \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          }
        }
      },
      "CardPayoutValidateRequest-3": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionValidateDetail-3"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutCardRequest-1"
          }
        ]
      },
      "ValidatePayoutCardRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionValidateDetail-2"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutCardRequest-3"
          }
        ]
      },
      "AccountBalanceWithTimestamp-2": {
        "required": [
          "balance"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "payoutMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "balanceTimestamp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "lastTransactionTimestamp": {
            "description": "The timestamp of the last money movement on the client's account. \n\nThis is a valid ISO 8601 timestamp, such as YYYY-MM-DDThh:mm:ss.sss±hh:mm.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          }
        }
      },
      "LastName": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Required when recipient is an individual.",
        "example": "Anderson"
      },
      "ValidatePayoutCardRequest-3": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionValidateDetail-3"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutCardRequest-1"
          }
        ]
      },
      "BankId": {
        "maximum": 99999999999,
        "minimum": 100000,
        "maxLength": 11,
        "minLength": 6,
        "type": "integer",
        "description": "Originating bank ID is the Bank Identification Number (BIN) assigned to each Visa Member upon enrollment. If the Originator is not a Financial Institution (FI) and will be processing using a sponsor FI (i.e. Acquirer ) , this is the BIN of the sponsoring FI (Acquirer). It uniquely identifies the Bank/FI that is sponsoring the Originating Entity in Visa’s core system. \n\nNote: This is also referred to as the “Acquiring BIN” by Visa\n\nISO20022 field name: Debtor Agent FI Identification\n",
        "example": 408999
      },
      "401ErrorResponseWithKey": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/401ErrorResponseWithKey"
              }
            ]
          }
        }
      },
      "SourceOfFunds": {
        "type": "string",
        "description": "Sender source of funds indicator i.e. the funding method used by the sender to fund the payout.Valid values are:\nConditional - source of funds is required by some endpoints, please check for Visa Payment Guide for details  \n\n01 = Visa credit\n02 = Visa debit\n03 = Visa prepaid\n04 = Cash\n05 = Deposit accounts other than those linked to a Visa card (includes checking/savings accounts and proprietary debit/ATMcards)\n06 = Credit accounts other than those linked to a Visa card (includes credit cards and proprietary credit lines)\n\nNote: For any Company to Company (C2C) or Company to Individual (C2I) use-case, this should be “05”, since the funds come from the sender’s bank account. This field is required for Money Transfers and Funds Disbursements.\n\nISO20022 field name: Debtor Account Type Source of Funds\n"
      },
      "PendingCancelledTransactionStatus-1": {
        "type": "string",
        "description": "- PENDING: Payout is accepted but has not been acknowledged\n- PENDING_CANCELLATION: Cancel payout status is pending\n- CANCELLED - Payout is cancelled when in pending status\n",
        "enum": [
          "PENDING",
          "PENDING_CANCELLATION",
          "CANCELLED"
        ]
      },
      "SendPayoutRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountPayoutRequest"
          },
          {
            "$ref": "#/components/schemas/WalletPayoutRequest"
          },
          {
            "$ref": "#/components/schemas/CardPayoutRequest"
          }
        ]
      },
      "AccountBalance": {
        "required": [
          "amount",
          "currencyCode"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "The balance amount for a particular currency.\n\nNote: The number of decimal places assumed for this field depends on the currency.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SignedAmount"
              }
            ]
          },
          "currencyCode": {
            "description": "The currency code is a three letter ISO 4217 code. \n\nE.g. GBP for British sterling pounds.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          }
        },
        "description": "Represents a monetary value containing a decimal amount value along with a currency code. \n"
      },
      "TransactionStatus-1": {
        "type": "string",
        "description": "- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received\n- AWAITING_INFORMATION: Awaiting more information before transaction is processed .\n- PAYMENT_SENT: The payout has been submitted to the Network partner\n- PAYMENT_DELIVERED: The payout has been posted to the recipient's account.\n- PENDING_CANCELLATION: Cancel payout status is pending\n- CANCELLED - Payout is cancelled\n- RETURNED: Returned request is refunded to Originating Entity\n- REJECTED: Rejected request is refunded to Originating Entity\n",
        "example": "PAYMENT_SENT",
        "enum": [
          "PAYMENT_RECEIVED",
          "AWAITING_INFORMATION",
          "PAYMENT_SENT",
          "PAYMENT_DELIVERED",
          "PENDING_CANCELLATION",
          "CANCELLED",
          "RETURNED",
          "REJECTED"
        ]
      },
      "IdentityListItem": {
        "title": "IdentityListItem",
        "required": [
          "label",
          "value"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "The visible label to be presented in the UI list."
          },
          "value": {
            "type": "string",
            "description": "The stored value for the visible list item label."
          }
        },
        "description": "This is used to populate a recipient identity field which needs to be displayed as a list in the UI."
      },
      "AccountHolder": {
        "required": [
          "accountNumber",
          "accountNumberType"
        ],
        "type": "object",
        "properties": {
          "accountNumber": {
            "description": "beneficiary bank account number\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Number or IBAN\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountNumber"
              }
            ]
          },
          "accountNumberType": {
            "type": "string",
            "description": "beneficiary bank account number type. Valid values: \"IBAN\" and \"DEFAULT\"\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Financial Institution Account Number Type\n",
            "example": "DEFAULT",
            "enum": [
              "IBAN",
              "DEFAULT"
            ]
          }
        },
        "description": "Account Holder Information\n"
      },
      "PaymentInstrumentAddress": {
        "required": [
          "postalCode"
        ],
        "type": "object",
        "properties": {
          "postalCode": {
            "description": "Postal Code provided by the account holder for the primaryAccountNumber in the request.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PostalCode"
              }
            ]
          },
          "addressLine1": {
            "description": "Address provided by the account holder for the primaryAccountNumber in the request.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine1"
              }
            ]
          }
        }
      },
      "CancelPayoutResponse": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CancelAccountandWalletPayoutResponse"
          },
          {
            "$ref": "#/components/schemas/CancelCardPayoutResponse"
          }
        ]
      },
      "PullCard": {
        "required": [
          "accountNumber"
        ],
        "type": "object",
        "properties": {
          "cavv": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "The Cardholder Authentication Verification Value (CAVV) is a value generated by an Access Control Server (ACS) and signed by the Issuer using account and password information of cardholders registered for the Verified by Visa (also known as Visa Secure) program. This field should be in hex-encoded format."
          },
          "tavv": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "The Token Authentication Verification Value (TAVV) is a value generated using tokenized PAN by Visa Token Service (VTS) and signed by the Issuer. This field should be in hex-encoded format."
          },
          "vauFlag": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "If present, a valid value is required. Spaces or special characters are not allowed. Possible values are : Y (will cause VAU to be performed)\n\nISO20022 field name: N/A\n"
          },
          "accountType": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Used to identify the account type of the recipientPrimaryAccountNumber in the request. Below are the possible values.\n\n00-Not applicable\n\n10-Saving account\n\n20-Checking account\n\n30-Credit card account\n\n40-Universal account\n\nDefault is set to \"00\" if not provided.\n",
            "enum": [
              "00",
              "10",
              "20",
              "30",
              "40"
            ]
          },
          "accountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "^\\d*$",
            "type": "string",
            "description": "Recipient primary account number, or token account number\n\nISO20022 field name: N/A\n"
          },
          "cardCvv2Value": {
            "maxLength": 4,
            "minLength": 3,
            "type": "string",
            "description": "The cardCvv2Value value provided by the account holder for the senderPrimaryAccountNumber in the request."
          },
          "expirationDate": {
            "maxLength": 7,
            "minLength": 7,
            "pattern": "YYYY-MM",
            "type": "string",
            "description": "Conditional\nThis field contains the expiration date for the recipient's primary account number or token in recipientPrimaryAccountNumber.\nNote: Visa requires expiration date to be present in all OCTs destined to U.S. issuers\nFormat: YYYY-MM\nExample: 2021-10\n\nISO20022 field name: N/A\n",
            "example": "2022-01"
          },
          "motoECIIndicator": {
            "maximum": 8,
            "minimum": 1,
            "type": "integer",
            "description": "Identifies the level of security used in an electronic commerce transaction over an open network (for example, the Internet) or the type of mail or telephone order. Acquirers supply indicator values, which Visa forwards in requests and advices to issuers that have successfully tested to receive them. The subfield is dropped if issuers have not successfully completed testing or choose not to receive it.\nIf not provided, Visa will default its value to 7 for US and 5 for rest of the world, when posConditionCode is 59\n"
          }
        }
      },
      "CardPaymentFacilitator-1": {
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 11,
            "minLength": 1,
            "type": "string",
            "description": "Marketplace ID or Payment Facilitator's ID. This field is conditionally required when a payment facilitator is involved.\n"
          },
          "name": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "Payment facilitator name in OCTs. This field is conditionally required when a payment facilitator is involved.\n"
          },
          "subMerchantId": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string",
            "description": "Sub-Merchant ID containing the sponsored merchant ID. This field is conditionally required when a payment facilitator is involved.\n"
          },
          "independentSalesOrganizationID": {
            "maxLength": 11,
            "minLength": 1,
            "type": "string",
            "description": "This field contains the \"Company ID\" that is assigned during the time of registration with Mastercard Connect as a service provider and must be provided by the acquirer.\n"
          }
        }
      },
      "ValidPayoutResponse-2": {
        "required": [
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "expectedPostingDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedPostingDateForValidate"
              }
            ]
          },
          "validationResultCode": {
            "type": "string",
            "description": "- VALID - Visa's validation succeeds.\n",
            "enum": [
              "VALID"
            ]
          }
        }
      },
      "PayoutCancelStatus": {
        "type": "string",
        "description": "Status of the cancel request\n\nValid Value are: PENDING_CANCELLATION, CANCELLED\n",
        "example": "CANCELLED",
        "enum": [
          "PENDING_CANCELLATION",
          "CANCELLED"
        ]
      },
      "ValidatePayoutCardRequest": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionValidateDetail"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutCardRequest-1"
          }
        ]
      },
      "AdditionalTokenRespInfo-1": {
        "maxLength": 1,
        "minLength": 1,
        "type": "string",
        "description": "This field will contain a value used to identify transactions eligible for token services.\n\nValid value:\n\n1 - Token program.\n"
      },
      "ValidPayoutResponse-1": {
        "required": [
          "validationResultCode"
        ],
        "type": "object",
        "properties": {
          "expectedPostingDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedPostingDateForValidate"
              }
            ]
          },
          "validationResultCode": {
            "type": "string",
            "description": "- VALID - Visa's validation succeeds. \n",
            "enum": [
              "VALID"
            ]
          }
        }
      },
      "SenderAccountNumber": {
        "maxLength": 34,
        "minLength": 1,
        "type": "string",
        "description": "CONDITIONAL - This field is Mandatory if a senderReferenceNumber is not sent. \nNote:\nClient should provide either a sender reference number or a sender account number but not both.\nClient should not send any PANs in this field for payout.         \n",
        "example": "A42434234S324234"
      },
      "NotificationsErrorResponse": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The short description of the error."
          },
          "status": {
            "maximum": 999,
            "minimum": 100,
            "type": "integer",
            "description": "3 digit HTTP status code",
            "example": 400
          },
          "details": {
            "type": "array",
            "description": "Reserved for future use.",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "A short code indicating the specific error that occurred."
                },
                "message": {
                  "type": "string",
                  "description": "The long description of the specific error that occurred."
                },
                "location": {
                  "type": "string",
                  "description": "The place in the incoming message that the particular error occurred."
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "The long description of the error"
          }
        }
      },
      "StructuredReferenceValue": {
        "maxLength": 100,
        "minLength": 1,
        "type": "string",
        "description": "SRI Value of the field."
      },
      "BeneficiaryRelationship": {
        "maxLength": 30,
        "minLength": 1,
        "type": "string",
        "description": "Sender's relationship with recipient"
      },
      "CardQueryResponse-6": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardQueryTransactionResponse-3"
          }
        ]
      },
      "B2BBank": {
        "required": [
          "accountNumber",
          "accountNumberType",
          "bankAccountNumber",
          "bankAccountNumberType"
        ],
        "type": "object",
        "properties": {
          "BIC": {
            "maxLength": 11,
            "minLength": 8,
            "type": "string",
            "description": "beneficiary bank's  Business Identifier Code (BIC)\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Creditor Agent Financial Institution BIC\n"
          },
          "bid": {
            "maxLength": 8,
            "minLength": 1,
            "type": "string",
            "description": "Recipient Bank's BID\n"
          },
          "bankCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "beneficiary bank's code\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification\n"
          },
          "branchCode": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "beneficiary bank's branch code\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Creditor Agent Branch Identification\n"
          },
          "branchName": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "beneficiary bank's branch name\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Creditor Agent Branch Name\n"
          },
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "bankCodeType": {
            "type": "string",
            "description": "beneficiary bank's bank code type\nAllowed enums are \"BSB\", \"PRN\", \"APSC\", \"SORT_CODE\", \"IFSC\", \"NCC\", \"ABA\", \"PID\"\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification Type\n",
            "enum": [
              "BSB",
              "PRN",
              "APSC",
              "SORT_CODE",
              "IFSC",
              "NCC",
              "ABA",
              "PID"
            ]
          },
          "accountNumber": {
            "maxLength": 34,
            "minLength": 1,
            "type": "string",
            "description": "Beneficiary bank account number/IBAN\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Creditor Account Number or IBAN\n"
          },
          "accountNumberType": {
            "type": "string",
            "description": "beneficiary bank account number type. Valid values: \"IBAN\" and \"DEFAULT\"\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Creditor Financial Institution Account Number Type\n",
            "enum": [
              "DEFAULT",
              "IBAN"
            ]
          },
          "bankAccountNumber": {
            "maxLength": 34,
            "minLength": 1,
            "type": "string",
            "description": "Recipient bank's IBAN\n"
          },
          "bankAccountNumberType": {
            "type": "string",
            "description": "beneficiary bank's account number type. Valid value: \"IBAN\"\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Creditor Financial Institution Account Number Type\n",
            "enum": [
              "IBAN"
            ]
          }
        },
        "description": "Recipient's bank object\n"
      },
      "CardQueryResponse-4": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardQueryTransactionResponse-1"
          }
        ]
      },
      "CardQueryResponse-5": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardQueryTransactionResponse-2"
          }
        ]
      },
      "200CancelCardTransactionStatus": {
        "type": "string",
        "description": "- PAYMENT_RETURNED: Visa has reverted the card payout instruction, fund is returned\n- PAYMENT_DECLINED: Visa has declined the card payout instruction, fund is not moved\n- PAYMENT_ERROR: Visa encountered error when processing the card payout instruction, fund is in unknown state\n",
        "enum": [
          "PAYMENT_DECLINED",
          "PAYMENT_RETURNED",
          "PAYMENT_ERROR"
        ]
      },
      "PurposeOfPayment": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Purpose of payment code is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Purpose of Payment\n",
        "example": "0210000001"
      },
      "ContactNumber-1": {
        "maxLength": 16,
        "minLength": 1,
        "pattern": "^\\+[1-9]\\d{1,14}$",
        "type": "string",
        "description": "Contact phone number\n+ symbol followed by digits, no other symbols, e.g. +447700123456 \n(note, refer ISO spec E.164)\n",
        "example": "447700123456"
      },
      "CardEligbilityCheckRequest": {
        "required": [
          "initiatingPartyId",
          "paymentInstrument",
          "requestId"
        ],
        "properties": {
          "requestId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestId"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "paymentInstrument": {
            "properties": {
              "card": {
                "required": [
                  "accountNumber"
                ],
                "type": "object",
                "properties": {
                  "fastFunds": {
                    "type": "string",
                    "description": "Provide FastFunds response only if the request has true and nonFastFunds if it is false.\n",
                    "enum": [
                      "true",
                      "false"
                    ]
                  },
                  "accountType": {
                    "type": "string",
                    "description": "This is used to identify the account type of the primaryAccountNumber in the request.\n",
                    "enum": [
                      "debit",
                      "credit"
                    ]
                  },
                  "accountNumber": {
                    "maxLength": 19,
                    "minLength": 13,
                    "type": "string",
                    "description": "The primary account number for which account validations are being performed\n"
                  },
                  "transactionType": {
                    "type": "string",
                    "description": "Internal Filter Transaction Type:\nmoneyTransfer-For any money Transfer BAI in OCT\nnomoneyTransfer-For any non money transfer BAIs in OCT.\npull-AFT transfer\n",
                    "enum": [
                      "moneyTransfer",
                      "nonMoneyTransfer",
                      "gambling",
                      "pull"
                    ]
                  },
                  "sharingGroupCode": {
                    "description": "Sharing group code\n",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SharingGroupCode"
                      }
                    ]
                  },
                  "transactionJurisdiction": {
                    "type": "string",
                    "description": "Designates the scope of transfer as Domestic or Cross Border\n",
                    "enum": [
                      "domestic",
                      "crossBorder"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "CardEligibilityCheckResponse": {
        "required": [
          "eligibiltyStatus"
        ],
        "type": "object",
        "properties": {
          "eligibiltyStatus": {
            "type": "string",
            "description": "Elibility status\n",
            "enum": [
              "COMPLETED",
              "NOT_COMPLETED"
            ]
          },
          "cardEligibilityResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardEligibilityResult"
              }
            ]
          }
        }
      },
      "SenderIdentificationList-2": {
        "type": "array",
        "description": "Identification list of sender",
        "items": {
          "type": "object",
          "properties": {
            "idType": {
              "description": "Sender identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nValid values : \n* P- Passport \n* D-Driving License\n* N-National Id\n* T-Tax Id\n* L-Legal Entity Registration Number\n* F-Foreign Id\n\nISO20022 field name:<br> For 4th  party payments:\"Ultimate Debtor Private Identification Code\" or \"Ultimate Debtor Organisation Identification Code\" <br> For 3rd party payments: \"Debtor Private Identification Code\" or \"Debtor Organisation Identification Code\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdType"
                }
              ]
            },
            "idNumber": {
              "description": "Sender identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments:\"Ultimate Debtor Private Identification\" or  \"Ultimate Debtor Organisation Identification\" <br> For 3rd party payments:\"Debtor Private Identification\" or\"Debtor Organisation Identification\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdNumber"
                }
              ]
            },
            "idIssueCountry": {
              "description": "Sender identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \n\nFormat: 3-character ISO (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Private Identification Issuer\" or \"Ultimate Debtor Organisation Identification Issuer\" <br> For 3rd party payments: \"Debtor Private Identification Issuer\" or \"Debtor Organisation Identification Issuer\"\n",
              "example": "USD",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCountryCode"
                }
              ]
            }
          }
        }
      },
      "SenderIdentificationList-1": {
        "type": "array",
        "description": "Identification list of sender",
        "items": {
          "type": "object",
          "properties": {
            "idType": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdType-1"
                }
              ]
            },
            "idNumber": {
              "description": "Sender identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments:\"Ultimate Debtor Private Identification\" or  \"Ultimate Debtor Organisation Identification\" <br> For 3rd party payments:\"Debtor Private Identification\" or\"Debtor Organisation Identification\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdNumber"
                }
              ]
            },
            "idIssueCountry": {
              "description": "Sender identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \n\nFormat: 3-character ISO (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br>For 4th party payments: \"Ultimate Debtor Private Identification Issuer\" or \"Ultimate Debtor Organisation Identification Issuer\" <br> For 3rd party payments: \"Debtor Private Identification Issuer\" or \"Debtor Organisation Identification Issuer\"\n",
              "example": "USD",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCountryCode"
                }
              ]
            }
          }
        }
      },
      "Network": {
        "type": "string",
        "description": "Network\n",
        "enum": [
          "VISA",
          "VISA_DEBIT",
          "VISA_CREDIT",
          "E",
          "C",
          "G",
          "8",
          "Y",
          "F",
          "S",
          "L",
          "H",
          "W",
          "N",
          "Z",
          "Q",
          "M",
          "V"
        ]
      },
      "200TransactionStatus": {
        "type": "string",
        "description": "- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received\n",
        "enum": [
          "PAYMENT_RECEIVED"
        ]
      },
      "PayoutResponse": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/200TransactionStatus"
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Transaction Information And Status - Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "$ref": "#/components/schemas/ExpectedPostingDate"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "ReturnedTransactionStatus": {
        "type": "string",
        "description": "- RETURNED: Returned request is refunded to Originating Entity\n- REJECTED: Rejected request is refunded to Originating Entity\n",
        "enum": [
          "RETURNED",
          "REJECTED"
        ]
      },
      "ReturnReasonCodeComment": {
        "maxLength": 255,
        "minLength": 1,
        "type": "string",
        "description": "comment for the action"
      },
      "RequestId": {
        "type": "string",
        "description": "Request identifier.\n",
        "format": "uuid"
      },
      "202AccountPayoutCreatedResponse-1": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "properties": {
              "status": {
                "$ref": "#/components/schemas/202TransactionStatus"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "202AccountPayoutCreatedResponse-2": {
        "type": "object",
        "properties": {
          "transactionalDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "status"
            ],
            "properties": {
              "status": {
                "$ref": "#/components/schemas/202TransactionStatus"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId-1"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              }
            }
          }
        },
        "description": "Transaction is accepted and will be processed & notified status."
      },
      "Bank-1": {
        "required": [
          "accountName",
          "accountNumber",
          "accountNumberType",
          "countryCode",
          "currencyCode"
        ],
        "type": "object",
        "properties": {
          "BIC": {
            "description": "beneficiary bank account Business Identifier Code (BIC)\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution BIC\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BIC"
              }
            ]
          },
          "bankCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "beneficiary bank account bank code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification\n",
            "example": "173"
          },
          "bankName": {
            "description": "Recipient's bank name\n\nISO20022 field name: Creditor Agent Financial Institution Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BankName"
              }
            ]
          },
          "branchCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "beneficiary bank account branch code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Branch Identification\n",
            "example": "123456"
          },
          "accountName": {
            "description": "beneficiary bank account name i.e. account holder name as recorded on beneficiary bank account\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountName"
              }
            ]
          },
          "accountType": {
            "type": "string",
            "description": "Recipient bank account type\n\n* `1` - Checking\n* `2` - Saving \n* `3` - Maestra\n* `4` - Visa\n* `5` - Loan\n* `6` - Nre\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Type\n",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6"
            ]
          },
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "bankCodeType": {
            "type": "string",
            "description": "beneficiary bank account bank code type\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification Type\n",
            "enum": [
              "ABA",
              "SORT_CODE",
              "DEFAULT"
            ]
          },
          "currencyCode": {
            "description": "beneficiary bank account currency code\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Currency\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "accountNumber": {
            "description": "beneficiary bank account number\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Number or IBAN\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountNumber"
              }
            ]
          },
          "accountNumberType": {
            "type": "string",
            "description": "beneficiary bank account number type. Valid values: \"IBAN\" and \"DEFAULT\"\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Financial Institution Account Number Type\n",
            "example": "DEFAULT",
            "enum": [
              "IBAN",
              "DEFAULT"
            ]
          }
        },
        "description": "Recipient's bank object\n\nConditional object when payoutMethod has value 'B'\n"
      },
      "Bank-2": {
        "required": [
          "accountName",
          "accountNumber",
          "accountNumberType",
          "countryCode",
          "currencyCode"
        ],
        "type": "object",
        "properties": {
          "BIC": {
            "description": "beneficiary bank account Business Identifier Code (BIC)\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution BIC\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BIC"
              }
            ]
          },
          "bankCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "beneficiary bank account bank code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Financial Institution Clearing System Member Identification\n",
            "example": "173"
          },
          "bankName": {
            "description": "Recipient's bank name\n\nISO20022 field name: Creditor Agent Financial Institution Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BankName"
              }
            ]
          },
          "branchCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "beneficiary bank account branch code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Agent Branch Identification\n",
            "example": "123456"
          },
          "accountName": {
            "description": "beneficiary bank account name i.e. account holder name as recorded on beneficiary bank account\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountName"
              }
            ]
          },
          "accountType": {
            "type": "string",
            "description": "Recipient bank account type\n\n* `1` - Checking\n* `2` - Saving \n* `3` - Maestra\n* `4` - Visa\n* `5` - Loan\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Type\n",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "bankCodeType": {
            "type": "string",
            "description": "beneficiary bank account bank code type\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
            "enum": [
              "ABA",
              "SORT_CODE",
              "DEFAULT"
            ]
          },
          "currencyCode": {
            "description": "beneficiary bank account currency code\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Currency\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "accountNumber": {
            "description": "beneficiary bank account number\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Account Number or IBAN\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountNumber"
              }
            ]
          },
          "accountNumberType": {
            "type": "string",
            "description": "beneficiary bank account number type. Valid values: \"IBAN\" and \"DEFAULT\"\n\n(Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
            "example": "DEFAULT",
            "enum": [
              "IBAN",
              "DEFAULT"
            ]
          }
        },
        "description": "Recipient's bank object\n\nConditional object when payoutMethod has value 'B'\n"
      },
      "Card": {
        "required": [
          "accountNumber"
        ],
        "type": "object",
        "properties": {
          "cvc": {
            "maxLength": 4,
            "minLength": 3,
            "type": "string",
            "description": "The card verification code It can be cvv2 from the back of Card or dtvv which is token cryptogram.\n"
          },
          "tavv": {
            "type": "string",
            "description": "tavv of the card.\n"
          },
          "cvcType": {
            "type": "string",
            "description": "Type of the cvc. \n",
            "enum": [
              "CVV2",
              "DTVV"
            ]
          },
          "expiryDate": {
            "maxLength": 7,
            "minLength": 7,
            "pattern": "YYYY-MM",
            "type": "string",
            "description": "The expiration date for the primaryAccountNumber in the request. The date should not be a past date. Required when the cvv2Value is present.\n",
            "example": "2022-01"
          },
          "accountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "type": "string",
            "description": "Primary account number for which the account verifications are being performed\n",
            "example": "1233434564375"
          }
        }
      },
      "AddressLine3": {
        "maxLength": 50,
        "minLength": 1,
        "type": "string",
        "description": "This field contains individual recipient's 3rd line of address.",
        "example": "Building 4"
      },
      "AddressLine2": {
        "maxLength": 50,
        "minLength": 1,
        "type": "string",
        "description": "This field contains individual recipient's 2nd line of address."
      },
      "GivPreviouslyUpdatedFlag": {
        "type": "boolean",
        "description": "This field carries a boolean flag to identify the GivPreviouslyUpdated state. Possible values are true or false\n"
      },
      "AddressLine1": {
        "maxLength": 50,
        "minLength": 1,
        "type": "string",
        "description": "This field contains individual recipient's 1st line of address.",
        "example": "555 Dragon Drive"
      },
      "AdditionalTokenRespInfo": {
        "maxLength": 1,
        "minLength": 1,
        "type": "string",
        "description": "This field will contain a value used to identify transactions eligible for token services.\n\nValid value:\n\n1 - Token program.  \n"
      },
      "WalletTransactionDetail-2": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId-1"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-2"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "RecipientTransactorDetail-2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RecipientIndividual-2"
          },
          {
            "$ref": "#/components/schemas/RecipientCompany-2"
          }
        ]
      },
      "WalletTransactionDetail-1": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-1"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "RecipientTransactorDetail-3": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RecipientIndividual-3"
          },
          {
            "$ref": "#/components/schemas/RecipientCompany-3"
          }
        ]
      },
      "PayoutMethod-1": {
        "type": "string",
        "description": "Originating Entity must indicate the payout method i.e. Account or Wallet\n\nValid values:\n- \"B\" Visa Direct Account\n- \"W\" Visa Direct Wallet\n",
        "enum": [
          "B",
          "W"
        ]
      },
      "WalletTransactionDetail-4": {
        "required": [
          "businessApplicationId",
          "clientReferenceId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId-1"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId-1"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative-1"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-1"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "RecipientTransactorDetail-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RecipientIndividual-1"
          },
          {
            "$ref": "#/components/schemas/RecipientCompany-1"
          }
        ]
      },
      "ValidateAccountTransactionDetail": {
        "required": [
          "businessApplicationId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds"
          },
          "structuredRemittance": {
            "description": "This object carries ISO20022 SMI data. It applies to Visa Direct Account payouts only.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalStructuredRemittance"
              }
            ]
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "PurposeOfPaymentCodes-1": {
        "title": "PurposeOfPaymentCodes",
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/PurposeOfPayment-1"
          },
          "description": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Description of purpose of payment code.",
            "example": "Salary/payroll"
          },
          "senderCompany": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the sender is a company."
          },
          "recipientCompany": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the recipient is a company."
          },
          "senderIndividual": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the sender is an individual."
          },
          "recipientIndividual": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the recipient is an individual."
          }
        }
      },
      "ValidatePayoutWalletRequest": {
        "required": [
          "transactionDetail"
        ],
        "properties": {
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateWalletTransactionDetail"
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/PayoutWalletRequest"
          }
        ]
      },
      "SendPayoutRequest-4": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountPayoutRequest-4"
          },
          {
            "$ref": "#/components/schemas/WalletPayoutRequest-4"
          },
          {
            "$ref": "#/components/schemas/CardPayoutRequest-3"
          }
        ]
      },
      "SendPayoutRequest-5": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountPayoutRequest-1"
          },
          {
            "$ref": "#/components/schemas/WalletPayoutRequest-1"
          },
          {
            "$ref": "#/components/schemas/CardPayoutRequest-4"
          }
        ]
      },
      "PayoutResponse-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/200TransactionStatus"
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Transaction Information And Status - Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "$ref": "#/components/schemas/ExpectedPostingDate-1"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "SendPayoutRequest-2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountPayoutRequest-2"
          },
          {
            "$ref": "#/components/schemas/WalletPayoutRequest-2"
          }
        ]
      },
      "SendPayoutRequest-3": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountPayoutRequest-1"
          },
          {
            "$ref": "#/components/schemas/WalletPayoutRequest-1"
          },
          {
            "$ref": "#/components/schemas/CardPayoutRequest-2"
          }
        ]
      },
      "SendPayoutRequest-1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountPayoutRequest-1"
          },
          {
            "$ref": "#/components/schemas/WalletPayoutRequest-1"
          },
          {
            "$ref": "#/components/schemas/CardPayoutRequest-1"
          }
        ]
      },
      "PayoutResponse-3": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/200TransactionStatus"
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId-1"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Transaction Information And Status - Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "$ref": "#/components/schemas/ExpectedPostingDate-1"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "PayoutResponse-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "destinationAmount",
              "destinationCurrencyCode",
              "initiatingPartyId",
              "payoutId",
              "settlementAmount",
              "settlementCurrencyCode",
              "status",
              "transactionAmount",
              "transactionCurrencyCode",
              "transactionDateTime"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/200TransactionStatus"
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "payoutSpeed": {
                "description": "The payout processing speed send in the request. Currently supported value is \"STANDARD\". This field will be enhanced in future to include additional speed options\n\nConditional (Mandatory for an approved transaction and send in the request) \n\nISO20022 field name: Instruction Priority\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutSpeed"
                  }
                ]
              },
              "fxConversionRate": {
                "description": "This field contains the exchange rate applied to the pair of settlementCurrencyCode and destinationCurrencyCode\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConversionRate"
                  }
                ]
              },
              "settlementAmount": {
                "description": "This is the amount to be debited from Originating Entity/Visa Client's funding account.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "clientReferenceId": {
                "$ref": "#/components/schemas/ClientReferenceId-1"
              },
              "destinationAmount": {
                "description": "The destination amount that will be deposited to the beneficiary account, expressed in the Recipient bank currency code provided in the original request. If the Originating Entity sends a payout in a currency that is not the same as the destination currency then Visa will perform FX conversion and calculate the amount to be deposited to the beneficiary bank account, and provide this information back to the Originating Entity.\n\nNote: Destination amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "transactionAmount": {
                "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  }
                ]
              },
              "expectedPostingDate": {
                "$ref": "#/components/schemas/ExpectedPostingDate-2"
              },
              "transactionDateTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimestampType"
                  }
                ]
              },
              "settlementCurrencyCode": {
                "description": "The settlement currency code\n\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: GBP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "destinationCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount\n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Transaction Information And Status - Instructed Amount Currency Code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              },
              "transactionCurrencyCode": {
                "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: PHP\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCurrencyCode"
                  }
                ]
              }
            }
          }
        }
      },
      "UpdatePayoutRequest": {
        "required": [
          "actionCode",
          "idType",
          "initiatingPartyId",
          "payoutMethod"
        ],
        "type": "object",
        "properties": {
          "idType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionIdType-1"
              }
            ]
          },
          "actionCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionCode-1"
              }
            ]
          },
          "payoutMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          }
        }
      },
      "PurposeOfPayment-1": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Purpose of payment code is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Purpose of Payment\n",
        "example": "ISBEXP"
      },
      "ExpectedPostingDateForValidate": {
        "maxLength": 10,
        "minLength": 10,
        "description": "This is an estimated date by which the payout should be posted to the recipient’s account. This date should be communicated to the sender and recipient (if possible) to ensure that they know when to expect the funds.\n\nIt is optional field, if exists, indicates expected posting date. \n\nThe EPD is a variable field that may alter between the responses of validate payout API and send payout API.\n\nISO20022 field name: Interbank Settlement Date\n",
        "format": "date",
        "example": "1980-02-01"
      },
      "SenderIdentificationList": {
        "type": "array",
        "description": "Identification list of sender",
        "items": {
          "type": "object",
          "properties": {
            "idType": {
              "description": "Sender identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nValid values : \n* P- Passport \n* D-Driving License\n* N-National Id\n* T-Tax Id\n* L-Legal Entity Registration Number\n* F-Foreign Id\n\nISO20022 field name: Ultimate Debtor Identification Code\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdType"
                }
              ]
            },
            "idNumber": {
              "description": "Sender identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Identification\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdNumber"
                }
              ]
            },
            "idIssueCountry": {
              "description": "Sender identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \n\nFormat: 3-character ISO (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Identification Issuer Country\n",
              "example": "USD",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCountryCode"
                }
              ]
            }
          }
        }
      },
      "RecipientIdentificationList-1": {
        "type": "array",
        "description": "Identification list of recipient",
        "items": {
          "type": "object",
          "properties": {
            "idType": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdType-1"
                }
              ]
            },
            "idNumber": {
              "description": "Recipient identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification\" or \"Creditor Organisation Identification\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdNumber"
                }
              ]
            },
            "idIssueCountry": {
              "description": "Recipient identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \n\nFormat: 3-character ISO (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Issuer Country\" or \"Creditor Organisation Identification Issuer Country\"\n",
              "example": "US",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCountryCode"
                }
              ]
            }
          }
        }
      },
      "RecipientIdentificationList-2": {
        "type": "array",
        "description": "Identification list of recipient",
        "items": {
          "type": "object",
          "properties": {
            "idType": {
              "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdType"
                }
              ]
            },
            "idNumber": {
              "description": "Recipient identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification\" or \"Creditor Organisation Identification\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdNumber"
                }
              ]
            },
            "idIssueCountry": {
              "description": "Recipient identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \n\nFormat: 3-character ISO (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Issuer Country\" or \"Creditor Organisation Identification Issuer Country\"\n",
              "example": "US",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCountryCode"
                }
              ]
            }
          }
        }
      },
      "PayoutAccountRequest-4": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“B” – Visa Direct Account\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-1"
              },
              "cityOfBirth": {
                "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CityOfBirth"
                  }
                ]
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name:<br>For 4th  party payments: \"Ultimate Debtor Contact Email Address\" <br>For 3rd party payments: \"Debtor Contact Email Address\"\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData"
              },
              "countryOfBirth": {
                "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCountryCode"
                  }
                ]
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/AccountAndWalletSenderIdentificationList"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber-2"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-3"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/Bank-1"
              },
              "cityOfBirth": {
                "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CityOfBirth"
                  }
                ]
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447809713678\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData"
              },
              "countryOfBirth": {
                "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCountryCode"
                  }
                ]
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccountAndWalletRecipientIdentificationList"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-3"
              }
            ]
          }
        }
      },
      "PayoutAccountRequest-1": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“B” – Visa Direct Account\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod"
              }
            ]
          },
          "senderDetail": {
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-1"
              },
              "cityOfBirth": {
                "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CityOfBirth"
                  }
                ]
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name:<br>For 4th  party payments: \"Ultimate Debtor Contact Email Address\" <br>For 3rd party payments: \"Debtor Contact Email Address\"\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData"
              },
              "countryOfBirth": {
                "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCountryCode"
                  }
                ]
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList-1"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber-1"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-1"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/Bank-1"
              },
              "cityOfBirth": {
                "description": "Recipient city of birth\n\nISO20022 field name: Creditor City of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CityOfBirth"
                  }
                ]
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447809713678\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData"
              },
              "countryOfBirth": {
                "description": "Recipient country of birth\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nISO20022 field name: Creditor Country of Birth\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlphaCountryCode"
                  }
                ]
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-1"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-1"
              }
            ]
          }
        }
      },
      "PayoutAccountRequest-2": {
        "required": [
          "payoutMethod",
          "recipientDetail",
          "senderDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "description": "Originating Entity must indicate the payout method i.e. To Account or Wallet\n\nValid values:\n“B” – Visa Direct Account\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutMethod-1"
              }
            ]
          },
          "senderDetail": {
            "properties": {
              "address": {
                "$ref": "#/components/schemas/SenderAccountPayoutAddress-2"
              },
              "contactEmail": {
                "description": "Sender email address\n\nISO20022 field name:<br>For 4th  party payments: \"Ultimate Debtor Contact Email Address\" <br>For 3rd party payments: \"Debtor Contact Email Address\"\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Sender contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-1"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/SenderAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "$ref": "#/components/schemas/SenderIdentificationList-2"
              },
              "senderAccountNumber": {
                "$ref": "#/components/schemas/SenderAccountNumber-1"
              },
              "senderReferenceNumber": {
                "$ref": "#/components/schemas/SenderReferenceNumber"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SenderTransactorDetail-2"
              }
            ]
          },
          "recipientDetail": {
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/components/schemas/Bank-2"
              },
              "contactEmail": {
                "description": "Recipient email address\n\nISO20022 field name: Ultimate Creditor Contact Email Address\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactEmail"
                  }
                ]
              },
              "contactNumber": {
                "description": "Recipient contact number\n+ symbol followed by digits, no other symbols, e.g. +447700123456\n",
                "example": 447700123456,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactNumber-1"
                  }
                ]
              },
              "additionalData": {
                "$ref": "#/components/schemas/RecipientAdditionalData"
              },
              "contactNumberType": {
                "type": "string",
                "enum": [
                  "MOBILE",
                  "WORK",
                  "HOME"
                ]
              },
              "identificationList": {
                "properties": {
                  "idType": {
                    "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Code\" or \"Creditor Organisation Identification Code\"\n"
                  }
                },
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecipientIdentificationList-2"
                  }
                ]
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientTransactorDetail-2"
              }
            ]
          }
        }
      },
      "Type": {
        "type": "string",
        "description": "Identifies the type of sender or recipient - Individual or Company \n* I - Individual\n* C - Company\n",
        "example": "I",
        "enum": [
          "I",
          "C"
        ]
      },
      "ValidatePayoutRequest": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidatePayoutAccountRequest"
          },
          {
            "$ref": "#/components/schemas/ValidatePayoutWalletRequest"
          }
        ]
      },
      "QuoteId-1": {
        "type": "integer",
        "description": "This is a unique FX quote ID generated by Visa for a payout currency pair.\n",
        "format": "int64",
        "example": 987654321
      },
      "QueryResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountQuerySuccessResponse-1"
          },
          {
            "$ref": "#/components/schemas/AccountQueryErrorResponse-3"
          },
          {
            "$ref": "#/components/schemas/AccountQueryPendingCancelledResponse-1"
          },
          {
            "$ref": "#/components/schemas/CardQueryResponse-3"
          }
        ]
      },
      "InitiatingPartyId-1": {
        "type": "integer",
        "description": "Identifier assigned by Visa to uniquely identify the Originating Entity who initiates the transaction\n\nISO20022 field name: Initiating Party Identification<br>\nVisa uses integer instead of string(1-35) for uniformed value generation and presentation.\n",
        "format": "int64",
        "example": 100111
      },
      "CardQueryResponse-2": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardPayoutResponse-2"
          }
        ]
      },
      "NetworkResponses": {
        "required": [
          "acquirerCountryCode",
          "acquiringBin",
          "cardAcceptorId",
          "retrievalReferenceNumber",
          "settlementResponsibilityFlag",
          "systemTraceAuditNumber",
          "terminalId",
          "transactionAmount",
          "transactionCurrencyCode",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PullFundsTransaction",
              "PushFundsTransaction",
              "PullFundsTransactionReversal"
            ]
          },
          "vauData": {
            "$ref": "#/components/schemas/VAUData"
          },
          "networkId": {
            "$ref": "#/components/schemas/NetworkId"
          },
          "tokenData": {
            "$ref": "#/components/schemas/CardResponseTokenData"
          },
          "actionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Response code that provides the result of the payout request. List of <a href=\"https://developer.visa.com/request_response_codes#action_code\">valid response codes</a>\n",
            "example": "00"
          },
          "last4ofPAN": {
            "maxLength": 4,
            "minLength": 4,
            "type": "integer",
            "description": "This field contains the last four digits of the cardholder primary account number (PAN).            This field is returned only when token is provided in the payout request.\n"
          },
          "terminalId": {
            "$ref": "#/components/schemas/TerminalId"
          },
          "acquiringBin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringBin"
              }
            ]
          },
          "approvalCode": {
            "description": "This is a unique authorization code for an approved transaction from Issuer\n\nISO20022 field name: N/A\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalCode"
              }
            ]
          },
          "dafIndicator": {
            "type": "string",
            "description": "An authentication program indicator to identify transactions qualified by the Digital Authentication Framework for requests containing a CAVV and/or TAVV.\n\nPossible values are true or false          \n",
            "enum": [
              "true",
              "false"
            ]
          },
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            ]
          },
          "approvedAmount": {
            "description": "This field contains the partially approved AFT transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount            \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "cardAcceptorId": {
            "description": "An identifier that uniquely identifies the Originating Entity.  For Push to Card transactions, Card Acceptor Terminal ID (CAID) should be populated\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardAcceptorId"
              }
            ]
          },
          "cavvResultCode": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "The cavvResultCode identifies the outcome of the CAVV validation.<br><br>Note: When using dual cryptograms (both TAVV and CAVV ), If TAVV is valid than cavvResultCode would convey the outcome of the CAVV validation. <br><br>Refer to <a href=\"/request_response_codes#cardholder_authentication_verification_value\">cavvResultCode</a>"
          },
          "givUpdatedFlag": {
            "description": "This field identifies the GivUpdatedFlag. Possible values are true or false\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/GivUpdatedFlag"
              }
            ]
          },
          "memberComments": {
            "maxLength": 254,
            "minLength": 1,
            "type": "string",
            "description": "This field can be optionally used to send and receive comments by service providers. Issuers can optionally include new text in this field in the response. If the issuer does not include this field, Visa will inject the value from the request in the response and send it back to the service provider."
          },
          "responseSource": {
            "$ref": "#/components/schemas/ResponseSource"
          },
          "motoECIIndicator": {
            "maximum": 8,
            "minimum": 1,
            "type": "integer",
            "description": "network returned security level\n"
          },
          "customerReference": {
            "maxLength": 17,
            "minLength": 1,
            "type": "string",
            "description": "<b>Conditional.</b><br><br>This field contains a value that identifies the customer.<br>This field needs to be populated for Argentina domestic transaction where businessApplicationId is \"PS\"."
          },
          "transactionAmount": {
            "description": "This field contains the transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "originalActionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Contains a code that provides the result of original payout request when current request is identified as duplicate of original and actionCode will be 94."
          },
          "prepaidBalanceData": {
            "$ref": "#/components/schemas/PrepaidBalanceData"
          },
          "acquirerCountryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "feeProgramIndicator": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Note: If present, a valid value is required. Spaces or special characters are not allowed."
          },
          "riskAssessmentResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RiskAssessmentResult"
              }
            ]
          },
          "transmissionDateTime": {
            "description": "The time the request was processed by Visa\n",
            "example": "2021-01-01T22:52:46.000Z",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "settlementServiceFlag": {
            "description": "This field identifies the SettlementServiceFlag\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementServiceFlag"
              }
            ]
          },
          "systemTraceAuditNumber": {
            "description": "This field contains a number generated by Visa that uniquely identifies a transaction and all message types. The trace number is a key data element used to match a response to its request or to match a message to others for a given transaction set\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemTraceAuditNumber"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: \"PHP\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "givPreviouslyUpdatedFlag": {
            "description": "This field identifies the GivPreviouslyUpdatedFlag. Possible values are true or false\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/GivPreviouslyUpdatedFlag"
              }
            ]
          },
          "retrievalReferenceNumber": {
            "description": "This is a unique identifier generated by Visa for a card transaction\n\nThe format is ydddhhnnnnnn\nyddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). \nhh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. \nnnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/RetrievalReferenceNumber"
              }
            ]
          },
          "cardAuthenticationResults": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "A Visa-defined code indicating Online Card Authentication Method results.\nRefer to cardAuthenticationResults (https://developer.visa.com/request_response_codes#cardAuthenticationResults)\n"
          },
          "merchantVerificationValue": {
            "required": [
              "mvvAcquirerAssigned",
              "mvvVisaAssigned"
            ],
            "type": "object",
            "properties": {
              "mvvVisaAssigned": {
                "maxLength": 6,
                "minLength": 6,
                "type": "string",
                "description": "Visa assigned MVV value. E.g. 0A45AF"
              },
              "mvvAcquirerAssigned": {
                "maxLength": 4,
                "minLength": 4,
                "type": "string",
                "description": "Visa assists the acquirer in assigning the last four. E.g. 98FC"
              }
            },
            "description": "Merchant Verification Value(MVV) is used to identify merchants that participate in a variety of programs. The MVV is unique to the merchant."
          },
          "addressVerificationResults": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string"
          },
          "settlementResponsibilityFlag": {
            "description": "This field identifies the settlementResponsibilityFlag. Possible values are true or false\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementResponsibilityFlag"
              }
            ]
          },
          "senderIdentificationNumberIndividual": {
            "maxLength": 13,
            "minLength": 1,
            "type": "string",
            "description": "<b>Conditional.</b><br><br>This field contains the identification number issued to the individual by the government or an authorized national entity. For Argentina domestic purchase transactions this field contains the customer’s VAT registration number for tax identification."
          },
          "cpsAuthorizationCharacteristicsIndicator": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "<b>Conditional</b><br>Indicates whether AFT transaction has qualified for CPS. Possible values are : F (Meets CPS/Account Funding requirements) , N (Not Qualified), T (Not Qualified).<br><br><b>Note:</b> Supported only in US for CPS (Custom Payment Service). <br>Please reach out to your Visa representative for details."
          }
        }
      },
      "CardQueryResponse-3": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardQueryTransactionResponse"
          }
        ]
      },
      "CardQueryResponse-1": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardPayoutResponse-1"
          }
        ]
      },
      "S2AMetaData-1": {
        "required": [
          "recipientDetail",
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "recipientDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientDetailMetadata"
              }
            ]
          },
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDetailMetadata-1"
              }
            ]
          }
        }
      },
      "PayoutIdentifier": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          {
            "$ref": "#/components/schemas/PayoutId"
          }
        ]
      },
      "S2AMetaData-2": {
        "required": [
          "recipientDetail",
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "recipientDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecipientDetailMetadata-1"
              }
            ]
          },
          "transactionDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDetailMetadata-2"
              }
            ]
          }
        }
      },
      "ErrorResponseWithKey": {
        "type": "object",
        "properties": {
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            ]
          }
        }
      },
      "BalanceNotification-1": {
        "required": [
          "accountId",
          "balance",
          "eventType",
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "balance": {
            "type": "array",
            "description": "array of balances for all currencies of the 'accountId'",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountBalance"
                },
                {
                  "type": "object",
                  "properties": {
                    "operator": {
                      "type": "string",
                      "description": "operator only applies to 'THRESHOLD' and 'LIQUIDITY_FAILURE' eventType",
                      "enum": [
                        "LESS_THAN"
                      ]
                    },
                    "threshold": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/AmountWithZero-1"
                        }
                      ]
                    },
                    "balanceTimestamp": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TimestampType"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "eventType": {
            "type": "string",
            "description": "Indicates why the balance notification is triggered\n\nPossible values:\n* `THRESHOLD` - When balance threshold is exceeded\n* `LIQUIDITY_FAILURE` - when balance is negative\n* `PERIODIC` - Regular balance snapshot at certain day/time\n",
            "enum": [
              "THRESHOLD",
              "LIQUIDITY_FAILURE",
              "PERIODIC"
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          }
        }
      },
      "BalanceNotification-4": {
        "required": [
          "accountId",
          "balance",
          "eventType",
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "balance": {
            "type": "array",
            "description": "array of balances for all currencies of the 'accountId'",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountBalance-1"
                },
                {
                  "type": "object",
                  "properties": {
                    "operator": {
                      "type": "string",
                      "description": "operator only applies to 'THRESHOLD' and 'LIQUIDITY_FAILURE' eventType",
                      "enum": [
                        "LESS_THAN"
                      ]
                    },
                    "threshold": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/AmountWithZero-1"
                        }
                      ]
                    },
                    "balanceTimestamp": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TimestampType"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "eventType": {
            "type": "string",
            "description": "Indicates why the balance notification is triggered\n\nPossible values:\n* `THRESHOLD` - When balance threshold is exceeded\n* `LIQUIDITY_FAILURE` - when balance is negative\n* `PERIODIC` - Regular balance snapshot at certain day/time\n",
            "enum": [
              "THRESHOLD",
              "LIQUIDITY_FAILURE",
              "PERIODIC"
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          }
        }
      },
      "FundingStatus": {
        "type": "string",
        "description": "Indicates funding status of the payout transaction\n",
        "enum": [
          "FUNDED",
          "NOT_FUNDED"
        ]
      },
      "BalanceNotification-2": {
        "required": [
          "accountId",
          "balance",
          "eventType",
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "balance": {
            "type": "array",
            "description": "array of balances for all currencies of the 'accountId'",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountBalance"
                },
                {
                  "type": "object",
                  "properties": {
                    "operator": {
                      "type": "string",
                      "description": "This field only applies to 'THRESHOLD' and 'LIQUIDITY_FAILURE' eventType",
                      "enum": [
                        "LESS_THAN"
                      ]
                    },
                    "threshold": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/AmountWithZero-1"
                        }
                      ]
                    },
                    "balanceTimestamp": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TimestampType"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "eventType": {
            "type": "string",
            "description": "Indicates why the balance notification is triggered\n\nPossible values:\n* `THRESHOLD` - When balance threshold is exceeded\n* `LIQUIDITY_FAILURE` - when balance is negative\n* `PERIODIC` - Regular balance snapshot at certain day/time\n",
            "enum": [
              "THRESHOLD",
              "LIQUIDITY_FAILURE",
              "PERIODIC"
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          }
        }
      },
      "RecipientAccountNumber": {
        "maxLength": 34,
        "minLength": 1,
        "type": "string",
        "description": "Recipient Account number\n"
      },
      "IdentityGroup": {
        "title": "IdentityGroup",
        "required": [
          "groupLabel",
          "groupName",
          "identityFields",
          "mandatory"
        ],
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "The name of the metadata element/enum.\nThis generic Identity Group object can represent either 'Beneficiary Identity Field Group object' or 'Bank Account Registration Field Group object' . \nEnum value signifies the particular metadata element. \n\nFor example : \n a) if enum is \"address\", this can contain array of 'IdentityField' object where each object can represent elements like addressLine1, addressLine2, city, countryCode, postalCode etc    \n\n b) enum can be \"identificationList\", which contains array of \"IdentityField' objects, one of the IdentityField object can have elementName=\"idType\" and inputType=\"list\", in this scenario array of IdentityListItem will have \n [\n   {\n     \"label\": \"Passport\",\n     \"value\": \"Passport\"\n   },\n   {\n     \"label\": \"National ID Card\",\n     \"value\": \"National ID Card\"\n   },\n   {\n     \"label\": \"Driving License\",\n     \"value\": \"Driving License\"\n   }\n ], \n second 'IdentityField' Object -> elementName as \"identificationNumber\" with inputType=\"text\" \n third 'IdentityField' Object -> elementName as \"identificationCountry\" with inputType=\"text\" \n fourth 'IdentityField' Object -> elementName as \"validFromDate\" with inputType=\"text\"\n fifth  'IdentityField' Object -> elementName as \"validToDate\" with inputType=\"text\" and so on.\n\n c) If enum is \"additionalData\",this will have array of two 'IdentityField' objects, one representing 'additionalDataKey' and other one 'additionalDataValue'.\n\n d) If enum is \"name\", \"middleName\" may be required for some countries (e.g. Africa). This can be accommodated by appending a space and then middleName to <firstName> \n",
            "enum": [
              "bank",
              "address",
              "name",
              "additionalData",
              "identificationList",
              "legalEntityIdentity",
              "contactInfo",
              "birthInfo"
            ]
          },
          "mandatory": {
            "type": "boolean",
            "description": "Indicates if the identity group is mandatory."
          },
          "groupLabel": {
            "type": "string",
            "description": "Displays a label for this group of identity fields."
          },
          "identityFields": {
            "type": "array",
            "description": "This type defines a list of recipient identity fields.",
            "items": {
              "$ref": "#/components/schemas/IdentityField"
            }
          }
        },
        "description": "This type defines a recipient identity data group. Each group is normally represented as a section of fields on the UI. 'groupLabel' is the UI test to display as a name for this section. 'mandatory' indicates whether all section is mandatory. 'elementName' is the name of the element in the request for the corresponding section."
      },
      "PostingDate-2": {
        "required": [
          "cutoffDateTime",
          "expectedPostingDate"
        ],
        "type": "object",
        "properties": {
          "cutoffDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          },
          "expectedPostingDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedPostingDate-2"
              }
            ]
          }
        }
      },
      "PostingDate-1": {
        "required": [
          "cutoffDateTime",
          "expectedPostingDate"
        ],
        "type": "object",
        "properties": {
          "cutoffDateTime": {
            "$ref": "#/components/schemas/TimestampType"
          },
          "expectedPostingDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedPostingDate-1"
              }
            ]
          }
        }
      },
      "ValidatePayoutRequest-1": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidatePayoutAccountRequest-1"
          },
          {
            "$ref": "#/components/schemas/ValidatePayoutWalletRequest-1"
          },
          {
            "$ref": "#/components/schemas/ValidatePayoutCardRequest"
          }
        ]
      },
      "ValidatePayoutRequest-4": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidatePayoutAccountRequest-4"
          },
          {
            "$ref": "#/components/schemas/ValidatePayoutWalletRequest-4"
          },
          {
            "$ref": "#/components/schemas/ValidatePayoutCardRequest-2"
          }
        ]
      },
      "ValidatePayoutRequest-5": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidatePayoutAccountRequest-1"
          },
          {
            "$ref": "#/components/schemas/ValidatePayoutWalletRequest-1"
          },
          {
            "$ref": "#/components/schemas/ValidatePayoutCardRequest-3"
          }
        ]
      },
      "SenderIndividual": {
        "required": [
          "type"
        ],
        "properties": {
          "name": {
            "description": "Full name of sender, conditionally required when firstName and lastName are not provided.",
            "example": "Joe Smith",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "type": {
            "description": "Identifies the type of sender - \"I\" for Individual \n\nISO20022 field name: Debtor Identification Type       \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              }
            ]
          },
          "lastName": {
            "description": "Sender last name, conditionally required when name is not provided\n\nISO20022 field name: Ultimate Debtor Last Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/LastName"
              }
            ]
          },
          "firstName": {
            "description": "Sender first name, conditionally required when name is not provided\n\nISO20022 field name: Ultimate Debtor First Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstName"
              }
            ]
          },
          "dateOfBirth": {
            "description": "Sender date of birth (Format: \"YYYY-MM-DD\", e.g. \"1980-02-01\")\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Birth Date \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateOfBirth"
              }
            ]
          }
        }
      },
      "ValidatePayoutRequest-2": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidatePayoutAccountRequest-2"
          },
          {
            "$ref": "#/components/schemas/ValidatePayoutWalletRequest-2"
          }
        ]
      },
      "ValidatePayoutRequest-3": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ValidatePayoutAccountRequest-1"
          },
          {
            "$ref": "#/components/schemas/ValidatePayoutWalletRequest-1"
          },
          {
            "$ref": "#/components/schemas/ValidatePayoutCardRequest-1"
          }
        ]
      },
      "AcquiringBin": {
        "maximum": 99999999999,
        "minimum": 100000,
        "maxLength": 11,
        "minLength": 6,
        "type": "integer",
        "description": "Originating bank ID is the Bank Identification Number (BIN) assigned to each Visa Member upon enrollment. If the Originator is not a Financial Institution (FI) and will be processing using a sponsor FI (i.e. Acquirer ) , this is the BIN of the sponsoring FI (Acquirer). It uniquely identifies the Bank/FI that is sponsoring the Originating Entity in Visa’s core system. \n\nNote: This is referred to as the “Acquiring BIN” by Visa\n\nISO20022 field name: Debtor Agent FI Identification\n",
        "example": 408999
      },
      "CardResponseTokenData-1": {
        "type": "object",
        "properties": {
          "minimumAccountRange": {
            "maximum": 999999999,
            "minimum": 1,
            "type": "integer"
          },
          "tokenAssuranceMethod": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          },
          "additionalTokenRespInfo": {
            "$ref": "#/components/schemas/AdditionalTokenRespInfo-1"
          }
        }
      },
      "LedgerNotification": {
        "required": [
          "accountId",
          "amount",
          "creditDebitIndicator",
          "currencyCode",
          "entryId",
          "entryType",
          "initiatingPartyId"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "Funding amount that is credited by the Originating Entity. Expressed in the currency provided in field currencyCode\n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "entryId": {
            "maxLength": 35,
            "minLength": 1,
            "type": "string",
            "description": "The entry Id is used to uniquely identify a ledger notification for a single account and currency"
          },
          "accountId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "entryType": {
            "type": "string",
            "description": "Entry type helps to classify entries in ledger. \n\nPossible values:\n* 'FUNDING'\n* 'REPATRIATION'\n* 'JOURNAL'\n* 'MANAGED_LIQUIDITY'\n",
            "enum": [
              "FUNDING",
              "REPATRIATION",
              "JOURNAL",
              "MANAGED_LIQUIDITY"
            ]
          },
          "narrative": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "An optional description for the reason why a ledger notification was performed."
          },
          "valueDate": {
            "description": "The date at which the funds are available to fund transactions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Date-1"
              }
            ]
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "bookingDate": {
            "description": "THe date at which funds are received into the ledger.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Date-1"
              }
            ]
          },
          "currencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the destination amount \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "additionalInfo1": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "additionalInfo2": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "additionalInfo3": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Additional information that may be in the original funding to the bank, and passed along in this field.\n"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId"
              }
            ]
          },
          "creditDebitIndicator": {
            "type": "string",
            "description": "Indicates that money credited to or debited from the account\n\nPossible values:\n* `CREDIT` - Indicates that the client has funded their account.\n* `DEBIT` - Indicates that money was removed from a client account.\n",
            "enum": [
              "CREDIT",
              "DEBIT"
            ]
          }
        },
        "description": "Used to indicate to originators that various ledger entries has been received by Visa."
      },
      "RecipientIdentificationList": {
        "type": "array",
        "description": "Identification list of recipient",
        "items": {
          "type": "object",
          "properties": {
            "idType": {
              "description": "Recipient identification type (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nValid values : \n* P- Passport \n* D-Driving License \n* N-National Id \n* T-Tax Id \n* L-Legal Entity Registration Number \n* F-Foreign Id\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Identification Code\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdType"
                }
              ]
            },
            "idNumber": {
              "description": "Recipient identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Identification\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdNumber"
                }
              ]
            },
            "idIssueCountry": {
              "description": "Recipient identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \n\nFormat: 3-character ISO (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Creditor Identification Issuer Country\n",
              "example": "US",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCountryCode"
                }
              ]
            }
          }
        }
      },
      "SenderAccountPayoutAddress-2": {
        "required": [
          "addressLine1",
          "city",
          "country"
        ],
        "type": "object",
        "properties": {
          "city": {
            "description": "Sender address city\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments: \"Ultimate Debtor Address Town Name\" <br> For 3rd party payments: \"Debtor Address Town Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ]
          },
          "state": {
            "description": "Sender address state\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments:  \"Ultimate Debtor Address Country Sub-division\" <br> For 3rd party payments: \"Debtor Address Country Sub-division\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "Sender address country\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments: \"Ultimate Debtor Address Country\" <br> For 3rd party payments: \"Debtor Address Country\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "postalCode": {
            "description": "Sender address postal code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: <br> For 4th  party payments: \"Ultimate Debtor Address Postal Code\" <br> For 3rd party payments: \"Debtor Address Postal Code\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PostalCode"
              }
            ]
          },
          "addressLine1": {
            "description": "Sender address line 1\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments:  \"Ultimate Debtor Address Street Name\" <br> For 3rd party payments: \"Debtor Address Street Name\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine1"
              }
            ]
          },
          "addressLine2": {
            "description": "Sender address line 2\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name:<br> For 4th  party payments: \"Ultimate Debtor Address Floor\" <br> For 3rd party payments: \"Debtor Address Floor\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine2"
              }
            ]
          }
        }
      },
      "SenderAccountPayoutAddress-1": {
        "required": [
          "addressLine1",
          "city",
          "country"
        ],
        "type": "object",
        "properties": {
          "city": {
            "description": "Sender address city\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Town Name\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/City"
              }
            ]
          },
          "state": {
            "description": "Sender address state\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Country Sub-division\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "Sender address country\n\nFormat: 3-character ISO-3166 (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Country\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "postalCode": {
            "description": "Sender address postal code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Postal Code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PostalCode"
              }
            ]
          },
          "addressLine1": {
            "description": "Sender address line 1\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Line 1\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine1"
              }
            ]
          },
          "addressLine2": {
            "description": "Sender address line 2\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Ultimate Debtor Address Line 2\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressLine2"
              }
            ]
          },
          "buildingNumber": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BuildingNumber"
              }
            ]
          }
        }
      },
      "Province": {
        "maxLength": 25,
        "minLength": 1,
        "type": "string",
        "description": "When present, this field contains individual recipient's address subdivision Major code, state or province",
        "example": "New Mexico"
      },
      "PayoutNotificationProcessRequest": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- PAYMENT_RECEIVED: This event can be repeated when 'fundingStatus' or 'expectedPostingDate' fields change value\n- AWAITING_INFORMATION: PSP is awaiting more information from Originating Entity before transaction can be processed\n- PAYMENT_SENT: The payout has been submitted to the Network partner by PSP. This event can be repeated 'fundingStatus' or 'expectedPostingDate' fields change value\n- PAYMENT_DELIVERED: The payout has been posted to the recipient's account. This status is only applicable for Wallet Payments\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_SENT",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED",
                  "AWAITING_INFORMATION",
                  "PAYMENT_SENT",
                  "PAYMENT_DELIVERED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              }
            }
          }
        }
      },
      "PurposeOfPaymentCodes": {
        "title": "PurposeOfPaymentCodes",
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/PurposeOfPayment"
          },
          "description": {
            "maxLength": 140,
            "minLength": 1,
            "type": "string",
            "description": "Description of purpose of payment code.",
            "example": "Salary/payroll"
          },
          "senderCompany": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the sender is a company."
          },
          "recipientCompany": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the recipient is a company."
          },
          "senderIndividual": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the sender is an individual."
          },
          "recipientIndividual": {
            "type": "boolean",
            "description": "Is the purpose of payment code valid if the recipient is an individual."
          }
        }
      },
      "PayoutMethod": {
        "type": "string",
        "description": "Originating Entity must indicate the payout method i.e. Account, Wallet or Card\n\nValid values:\n- \"B\" Visa Direct Account\n- \"W\" Visa Direct Wallet\n- \"C\" Visa Direct Card\n",
        "enum": [
          "B",
          "W",
          "C"
        ]
      },
      "TransactionIdType": {
        "type": "string",
        "description": "This field indicates the type of identifier\n- CLIENT_REFERENCE_ID is merchant's transaction reference ID\n- PAYOUT_ID is Visa's transaction reference ID \n",
        "enum": [
          "CLIENT_REFERENCE_ID",
          "PAYOUT_ID"
        ]
      },
      "ExpectedPostingDate": {
        "maxLength": 10,
        "minLength": 10,
        "type": "string",
        "description": "This is an estimated date by which the payout should be posted to the recipient’s account. This date should be communicated to the sender and recipient (if possible) to ensure that they know when to expect the funds\n\nISO20022 field name: Transaction Information And Status - Effective Interbank Settlement Date\n",
        "format": "date"
      },
      "ReturnReasonDetails-1": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReturnReasonCode"
              }
            ]
          },
          "comment": {
            "$ref": "#/components/schemas/ReturnReasonCodeComment"
          },
          "description": {
            "$ref": "#/components/schemas/ReturnReasonCodeDescription"
          }
        }
      },
      "SourceOfFunds-1": {
        "type": "string",
        "description": "Sender source of funds indicator i.e. the funding method used by the sender to fund the payout.Valid values are:\nConditional - source of funds is required by some endpoints, please check for Visa Payment Guide for details  \n\n01 = Visa credit\n02 = Visa debit\n03 = Visa prepaid\n04 = Cash\n05 = Deposit accounts other than those linked to a Visa card (includes checking/savings accounts and proprietary debit/ATMcards)\n06 = Credit accounts other than those linked to a Visa card (includes credit cards and proprietary credit lines)\n\nNote: For any Company to Company (C2C) or Company to Individual (C2I) use-case, this should be “05”, since the funds come from the sender’s bank account. This field is required for Money Transfers and Funds Disbursements.\n\nISO20022 field name: Debtor Account Type\n"
      },
      "PayoutNotificationProcessRequest-4": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. This event can be repeated when 'fundingStatus' or 'expectedPostingDate' fields change value\n- AWAITING_INFORMATION: PSP is awaiting more information from Originating Entity before transaction can be processed\n- PAYMENT_SENT: The payout has been submitted to the Network partner by PSP. This event can be repeated 'fundingStatus' or 'expectedPostingDate' fields change value\n- PAYMENT_DELIVERED: The payout has been posted to the recipient's account. This status is only applicable for Wallet Payments\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_SENT",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED",
                  "AWAITING_INFORMATION",
                  "PAYMENT_SENT",
                  "PAYMENT_DELIVERED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId-1"
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus-1"
                  }
                ]
              },
              "reasonDetails": {
                "$ref": "#/components/schemas/ReasonDetails"
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail"
              },
              "secondaryStatus": {
                "type": "string",
                "description": "Secondary Status of the transaction, only received in 202",
                "example": "RECALL_REQUESTED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SecondaryStatus"
                  }
                ],
                "enum": [
                  "RECALL_REQUESTED",
                  "RECALL_REJECTED",
                  "RECALL_ACCEPTED",
                  "RECALL_PROCESSING",
                  "PENDING_SETTLEMENT",
                  "SETTLEMENT_INITIATED",
                  "SETTLED"
                ]
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate-1"
                  }
                ]
              },
              "actualSettlementDate": {
                "type": "string",
                "description": "Actual Settlement Date of the Payment"
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "fundsAvailableDateTime": {
                "type": "string",
                "description": "Funds available Date and Time of the payment"
              }
            }
          }
        }
      },
      "PayoutNotificationProcessRequest-2": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod-1"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. This event can be repeated when 'fundingStatus' or 'expectedPostingDate' fields change value\n- AWAITING_INFORMATION: PSP is awaiting more information from Originating Entity before transaction can be processed\n- PAYMENT_SENT: The payout has been submitted to the Network partner by PSP. This event can be repeated 'fundingStatus' or 'expectedPostingDate' fields change value\n- PAYMENT_DELIVERED: The payout has been posted to the recipient's account. This status is only applicable for Wallet Payments\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_SENT",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED",
                  "AWAITING_INFORMATION",
                  "PAYMENT_SENT",
                  "PAYMENT_DELIVERED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus-1"
                  }
                ]
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail"
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId-1"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate-2"
                  }
                ]
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              }
            }
          }
        }
      },
      "PostalCode": {
        "maxLength": 16,
        "minLength": 1,
        "type": "string",
        "description": "When present, this field contains individual recipient's address postal code.",
        "example": "94320"
      },
      "TransactionalAdditionalData": {
        "type": "array",
        "description": "Additional fields that are needed in order to complete the additional screening. The additional fields can be included as name value pairs (Field name, Field value)",
        "items": {
          "required": [
            "name",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "Originating Entity to send additional transaction information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the name component of the name-value pair.\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataName"
                }
              ]
            },
            "value": {
              "description": "Originating Entity to send additional transaction information needed in order to process the payment. The additional fields can be included as name value pairs (Field name, Field value). This field represents the value  component of the name-value pair.\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AdditionalDataValue"
                }
              ]
            }
          }
        }
      },
      "CardTransactionResponse-1": {
        "required": [
          "clientReferenceId",
          "initiatingPartyId",
          "status",
          "transactionAmount",
          "transactionCurrencyCode",
          "transactionDateTime"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/200CardTransactionStatus-1"
          },
          "payoutId": {
            "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutId"
              }
            ]
          },
          "networkResponses": {
            "type": "array",
            "description": "The array of 'networkResponses' contains card network's processing details.\n",
            "items": {
              "$ref": "#/components/schemas/NetworkResponses-1"
            }
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionDateTime": {
            "description": "The time the request was processed by Visa. \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          }
        }
      },
      "CardResponseTokenData": {
        "type": "object",
        "properties": {
          "minimumAccountRange": {
            "maximum": 999999999,
            "minimum": 1,
            "type": "integer"
          },
          "tokenAssuranceMethod": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          },
          "additionalTokenRespInfo": {
            "$ref": "#/components/schemas/AdditionalTokenRespInfo"
          }
        }
      },
      "PayoutNotificationProcessRequest-1": {
        "required": [
          "transactionDetail"
        ],
        "type": "object",
        "properties": {
          "payoutMethod": {
            "$ref": "#/components/schemas/PayoutMethod"
          },
          "transactionDetail": {
            "required": [
              "clientReferenceId",
              "initiatingPartyId",
              "notificationDateTime",
              "payoutId",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the transaction\n- PAYMENT_RECEIVED: Visa has acknowledged the payout instruction has been received. This event can be repeated when 'fundingStatus' or 'expectedPostingDate' fields change value\n- AWAITING_INFORMATION: PSP is awaiting more information from Originating Entity before transaction can be processed\n- PAYMENT_SENT: The payout has been submitted to the Network partner by PSP. This event can be repeated 'fundingStatus' or 'expectedPostingDate' fields change value\n- PAYMENT_DELIVERED: The payout has been posted to the recipient's account. This status is only applicable for Wallet Payments\nISO20022 field name: Transaction Information And Status - Transaction Status\n",
                "example": "PAYMENT_SENT",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutNotificationRequestStatus"
                  }
                ],
                "enum": [
                  "PAYMENT_RECEIVED",
                  "AWAITING_INFORMATION",
                  "PAYMENT_SENT",
                  "PAYMENT_DELIVERED"
                ]
              },
              "payoutId": {
                "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout\n\nISO20022 field name: Transaction Information And Status - Original Additional Remittance Information\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PayoutId"
                  }
                ]
              },
              "endToEndId": {
                "$ref": "#/components/schemas/EndToEndId"
              },
              "fundingStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FundingStatus-1"
                  }
                ]
              },
              "reasonDetails": {
                "$ref": "#/components/schemas/ReasonDetails"
              },
              "serviceDetail": {
                "$ref": "#/components/schemas/ServiceDetail"
              },
              "secondaryStatus": {
                "type": "string",
                "description": "Secondary Status of the transaction, only received in 202",
                "example": "RECALL_REQUESTED",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SecondaryStatus"
                  }
                ],
                "enum": [
                  "RECALL_REQUESTED",
                  "RECALL_REJECTED",
                  "RECALL_ACCEPTED",
                  "RECALL_PROCESSING",
                  "PENDING_SETTLEMENT",
                  "SETTLEMENT_INITIATED",
                  "SETTLED"
                ]
              },
              "clientReferenceId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientReferenceId"
                  }
                ]
              },
              "initiatingPartyId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InitiatingPartyId-1"
                  }
                ]
              },
              "expectedPostingDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExpectedPostingDate-1"
                  }
                ]
              },
              "actualSettlementDate": {
                "type": "string",
                "description": "Actual Settlement Date of the Payment"
              },
              "notificationDateTime": {
                "$ref": "#/components/schemas/TimestampType"
              },
              "fundsAvailableDateTime": {
                "type": "string",
                "description": "Funds available Date and Time of the payment"
              }
            }
          }
        }
      },
      "CardTransactionResponse-3": {
        "required": [
          "clientReferenceId",
          "initiatingPartyId",
          "status",
          "transactionAmount",
          "transactionCurrencyCode",
          "transactionDateTime"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/200CardTransactionStatus-1"
          },
          "payoutId": {
            "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card. \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutId"
              }
            ]
          },
          "networkResponses": {
            "type": "array",
            "description": "The array of 'networkResponses' contains card network's processing details.\n",
            "items": {
              "$ref": "#/components/schemas/NetworkResponses-3"
            }
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionDateTime": {
            "description": "The time the request was processed by Visa. \n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          }
        }
      },
      "CardTransactionResponse-2": {
        "required": [
          "clientReferenceId",
          "initiatingPartyId",
          "status",
          "transactionAmount",
          "transactionCurrencyCode",
          "transactionDateTime"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/200CardTransactionStatus-1"
          },
          "payoutId": {
            "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payouts and Reversals, Chargeback, Response, Advice for to Card.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutId"
              }
            ]
          },
          "networkResponses": {
            "type": "array",
            "description": "The array of 'networkResponses' contains card network's processing details.\n",
            "items": {
              "$ref": "#/components/schemas/NetworkResponses-2"
            }
          },
          "clientReferenceId": {
            "$ref": "#/components/schemas/ClientReferenceId"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionDateTime": {
            "description": "The time the request was processed by Visa.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          }
        }
      },
      "TransactionResult-1": {
        "required": [
          "acquirerCountryCode",
          "acquiringBin",
          "cardAcceptorId",
          "retrievalReferenceNumber",
          "systemTraceAuditNumber",
          "terminalId",
          "transactionAmount",
          "transactionCurrencyCode",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PullFundsTransaction",
              "PushFundsTransaction",
              "PullFundsTransactionReversal"
            ]
          },
          "vauData": {
            "$ref": "#/components/schemas/VAUData"
          },
          "networkId": {
            "$ref": "#/components/schemas/NetworkId"
          },
          "actionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Response code that provides the result of the payout request. List of <a href=\"https://developer.visa.com/request_response_codes#action_code\">valid response codes</a>\n",
            "example": "00"
          },
          "terminalId": {
            "$ref": "#/components/schemas/TerminalId"
          },
          "acquiringBin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringBin"
              }
            ]
          },
          "approvalCode": {
            "description": "This is a unique authorization code for an approved transaction from Issuer\n\nISO20022 field name: N/A\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalCode"
              }
            ]
          },
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            ]
          },
          "cardAcceptorId": {
            "description": "An identifier that uniquely identifies the Originating Entity.  For Push to Card transactions, Card Acceptor Terminal ID (CAID) should be populated\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardAcceptorId"
              }
            ]
          },
          "responseSource": {
            "$ref": "#/components/schemas/ResponseSource"
          },
          "transactionAmount": {
            "description": "This field contains the transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "originalActionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Contains a code that provides the result of original payout request when current request is identified as duplicate of original and actionCode will be 94."
          },
          "acquirerCountryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "transmissionDateTime": {
            "description": "The time the request was processed by Visa\n",
            "example": "2021-01-01T22:52:46.000Z",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "systemTraceAuditNumber": {
            "description": "This field contains a number generated by Visa that uniquely identifies a transaction and all message types. The trace number is a key data element used to match a response to its request or to match a message to others for a given transaction set\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemTraceAuditNumber"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: \"PHP\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "retrievalReferenceNumber": {
            "description": "This is a unique identifier generated by Visa for a card transaction\n\nThe format is ydddhhnnnnnn\nyddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). \nhh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. \nnnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/RetrievalReferenceNumber"
              }
            ]
          }
        }
      },
      "AccountAndWalletRecipientIdentificationList": {
        "type": "array",
        "description": "Identification list of recipient",
        "items": {
          "type": "object",
          "properties": {
            "idType": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdTypeAccountAndWallet"
                }
              ]
            },
            "idNumber": {
              "description": "Recipient identification number (issued by a government or similar authority) needs to be provided by Originating Entity along with the payment in certain markets. \n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification\" or \"Creditor Organisation Identification\"\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IdNumber"
                }
              ]
            },
            "idIssueCountry": {
              "description": "Recipient identification issuing country needs to be provided by Originating Entity along with the payment in certain markets. \n\nFormat: 3-character ISO (Alpha-3) country code\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: \"Creditor Private Identification Issuer Country\" or \"Creditor Organisation Identification Issuer Country\"\n",
              "example": "US",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AlphaCountryCode"
                }
              ]
            }
          }
        }
      },
      "ReturnReasonCodeDescription": {
        "maxLength": 105,
        "minLength": 1,
        "type": "string",
        "description": "Indicates the PSP return description when the payout is returned. Refer to PSP Return Description (add link to VDP)\n\nISO20022 field name: Payment Return - PSP Return Description\n"
      },
      "SecondaryStatus": {
        "type": "string",
        "description": "Secondary Status of the transaction being queried"
      },
      "PayoutId": {
        "maxLength": 50,
        "minLength": 1,
        "type": "string",
        "description": "This is a globally unique identifier generated by Visa for a payout transaction\n\nISO20022 field name: Transaction Information And Status - Additional Remittance Information\n",
        "example": "5003f6a0-2c44-11b2-aa57-47378ae53313_1"
      },
      "KeyId": {
        "type": "string",
        "description": "VDP Gateway client MLE (Message Level Key) Key-ID used for callback message encryption (if enabled by client)\n",
        "format": "uuid",
        "example": "fffe3feb-3c22-488d-9381-23453289773b"
      },
      "OriginatorName": {
        "maxLength": 25,
        "minLength": 1,
        "type": "string",
        "description": "The name of the merchant or originating entity sending the payment instruction to Visa.\n\nISO20022 field name: Debtor Name\n",
        "example": "12345678"
      },
      "MiddleName": {
        "maxLength": 35,
        "minLength": 1,
        "type": "string",
        "description": "Optional middle name or middle initial when recipient is an individual.",
        "example": "A"
      },
      "ValidateWalletTransactionDetail-3": {
        "required": [
          "businessApplicationId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId-1"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId-1"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative-1"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-1"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "Date": {
        "maxLength": 10,
        "minLength": 10,
        "pattern": "^\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d$",
        "type": "string",
        "example": "1980-02-01"
      },
      "ValidateWalletTransactionDetail-2": {
        "required": [
          "businessApplicationId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-2"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "ValidateWalletTransactionDetail-1": {
        "required": [
          "businessApplicationId",
          "endToEndId",
          "initiatingPartyId",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "endToEndId": {
            "$ref": "#/components/schemas/EndToEndId"
          },
          "payoutSpeed": {
            "$ref": "#/components/schemas/PayoutSpeed"
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "purposeOfPayment": {
            "description": "Purpose of payment is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\nISO20022 field name: Purpose of Payment\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurposeOfPayment-1"
              }
            ]
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "transactionAmount": {
            "description": "The amount to debit from merchant's funding account or credit to beneficiary's bank account.\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "statementNarrative": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementNarrative"
              }
            ]
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "businessApplicationId": {
            "$ref": "#/components/schemas/BusinessApplicationId-1"
          },
          "settlementCurrencyCode": {
            "description": "The settlement currency code\nThe 3-character ISO-4217 code in this field reflects the currency for the Settlement amount to be debited from Originating Entity/Visa Client's funding account.\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\n<b>This field is mandatory</b>\n\nExample: GBP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \nFormat: 3-character ISO-4217 (Alpha-3) currency code\nExample: PHP\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "senderBeneficiaryRelationship": {
            "$ref": "#/components/schemas/BeneficiaryRelationship"
          }
        }
      },
      "TransactionResult-2": {
        "required": [
          "acquirerCountryCode",
          "acquiringBin",
          "cardAcceptorId",
          "retrievalReferenceNumber",
          "systemTraceAuditNumber",
          "terminalId",
          "transactionAmount",
          "transactionCurrencyCode",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "PullFundsTransaction",
              "PushFundsTransaction",
              "PullFundsTransactionReversal"
            ]
          },
          "vauData": {
            "$ref": "#/components/schemas/VAUData"
          },
          "networkId": {
            "$ref": "#/components/schemas/NetworkId"
          },
          "actionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Response code that provides the result of the payout request. List of <a href=\"https://developer.visa.com/request_response_codes#action_code\">valid response codes</a>\n",
            "example": "00"
          },
          "terminalId": {
            "$ref": "#/components/schemas/TerminalId"
          },
          "acquiringBin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringBin"
              }
            ]
          },
          "approvalCode": {
            "description": "This is a unique authorization code for an approved transaction from Issuer\n\nISO20022 field name: N/A\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApprovalCode"
              }
            ]
          },
          "errorResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            ]
          },
          "cardAcceptorId": {
            "description": "An identifier that uniquely identifies the Originating Entity.  For Push to Card transactions, Card Acceptor Terminal ID (CAID) should be populated\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/CardAcceptorId"
              }
            ]
          },
          "responseSource": {
            "$ref": "#/components/schemas/ResponseSource"
          },
          "transactionAmount": {
            "description": "This field contains the transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount can have decimal point for currencies that allow it. Refer to the Payouts Endpoint Guide for Payout on country-specific currency minor units. \n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JPY is 0. If the amount is JPY 10,000, then this field should populate “10000”.\n\nISO20022 field name: Instructed Amount\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "originalActionCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "Contains a code that provides the result of original payout request when current request is identified as duplicate of original and actionCode will be 94."
          },
          "acquirerCountryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCountryCode"
              }
            ]
          },
          "transmissionDateTime": {
            "description": "The time the request was processed by Visa\n",
            "example": "2021-01-01T22:52:46.000Z",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "systemTraceAuditNumber": {
            "description": "This field contains a number generated by Visa that uniquely identifies a transaction and all message types. The trace number is a key data element used to match a response to its request or to match a message to others for a given transaction set\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/SystemTraceAuditNumber"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount. \n\nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nExample: \"PHP\"\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "retrievalReferenceNumber": {
            "description": "This is a unique identifier generated by Visa for a card transaction\n\nThe format is ydddhhnnnnnn\nyddd - The first four digits must be a valid Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). \nhh - can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed. \nnnnnnn - can be the systemsTraceAuditNumber or any 6 digit number\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/RetrievalReferenceNumber"
              }
            ]
          }
        }
      },
      "PointOfServiceCapability": {
        "required": [
          "acceptsPartialAuthorizations"
        ],
        "type": "object",
        "properties": {
          "acceptsPartialAuthorizations": {
            "type": "string",
            "description": "This field is optional. This field is sent only to participating issuers. <br>Participating originators/acquirers may submit a value of TRUE in this field if the POS systems can accept partially approved transactions. Valid values: FALSE - Terminal does not support partial authorization. TRUE - Terminal accepts partial authorization responses.\n",
            "example": "false",
            "enum": [
              "TRUE",
              "FALSE"
            ]
          }
        },
        "description": "Point of Service Capability"
      },
      "CardTransactionValidateDetail-2": {
        "required": [
          "businessApplicationId",
          "initiatingPartyId",
          "localTransactionDateTime",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "payoutId": {
            "description": "For a Push transaction the identifier of Pull transaction that funds it can be provided, to associate the Pull and Push transactions\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutId"
              }
            ]
          },
          "surcharge": {
            "description": "When present, this field contains surcharge as assessed by the Originating Entity. Values in this field must be included in the transactionAmount and should be in the same currency and format as defined in the transactionAmount field.\n\nNote: if card credential is provided in senderDetail, fund is debited by transactionAmount from sender's card; but credited by transactionAmount - surcharge to recipient's card\nTechnical Specifications - Appendix E Country and Currency codes for VDC.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "motoECIIndicator": {
            "maximum": 8,
            "minimum": 1,
            "type": "integer",
            "description": "Identifies the level of security used in an electronic commerce transaction over an open network (for example, the Internet) or the type of mail or telephone order. Acquirers supply indicator values, which Visa forwards in requests and advices to issuers that have successfully tested to receive them. The subfield is dropped if issuers have not successfully completed testing or choose not to receive it.\nIf not provided, Visa will default its value to 7 for US and 5 for rest of the world, for e-Commerce transaction\n"
          },
          "purposeOfPayment": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "Purpose of payment code is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Purpose of Payment\n",
            "example": "ISBEXP"
          },
          "customProgramData": {
            "$ref": "#/components/schemas/CustomProgramData-1"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "messageReasonCode": {
            "type": "integer",
            "description": "<b>Conditional.</b><br><br>Contains codes that combined with some other fields such as the BAI (Business Application Id) identify some unique use cases. For Sales Tax rebates this field should be populated with the value 5120 (Value-added tax/Sales Tax) along with the businessApplicationId field set to the value 'FD' which indicates this push funds transfer is being conducted in order to facilitate a sales tax refund."
          },
          "transactionAmount": {
            "description": "This field contains the transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount should be numeric. Refer to the Payouts Endpoint Guide on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for Card.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JOD is 3, the amount is JOD 100.996.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "riskAssessmentData": {
            "$ref": "#/components/schemas/RiskAssessmentData-1"
          },
          "feeProgramIndicator": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Note: If present, a valid value is required. Spaces or special characters are not allowed."
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "businessApplicationId": {
            "description": "Business Application Identifier (BAI) identifies the type of program for which the payment is being sent, i.e. whether it is a funds disbursement, money transfer etc. It should be a valid value allowed by Visa and approved for the program during onboarding.\n\nValid BAI for Push to Cards:\n- Money transfer: AA, PP, BI, FT, WT; \n- Non-money transfer: BB, BP, CP, FD, GD, GP, LO, MD, OG, PD\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessApplicationId-1"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Instructed Amount Currency Code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "localTransactionDateTime": {
            "description": "The date and time when the transaction takes place, expressed in the local time of the Originating Entity request\n\nFormat: YYYY-MM-DDThh:mm:ss\n\nISO20022 field name: Message Creation Date Time\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          }
        }
      },
      "ContactEmail": {
        "maxLength": 210,
        "minLength": 1,
        "type": "string",
        "description": "Contact Email."
      },
      "RecipientDetailMetadata-1": {
        "title": "RecipientDetail",
        "required": [
          "identityGroups"
        ],
        "type": "object",
        "properties": {
          "identityGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityGroup-1"
            }
          }
        }
      },
      "CardTransactionValidateDetail-3": {
        "required": [
          "businessApplicationId",
          "initiatingPartyId",
          "localTransactionDateTime",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "payoutId": {
            "description": "For a Push transaction the identifier of Pull transaction that funds it can be provided, to associate the Pull and Push transactions\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutId"
              }
            ]
          },
          "surcharge": {
            "description": "When present, this field contains surcharge as assessed by the Originating Entity. Values in this field must be included in the transactionAmount and should be in the same currency and format as defined in the transactionAmount field.\n\nNote: if card credential is provided in senderDetail, fund is debited by transactionAmount from sender's card; but credited by transactionAmount - surcharge to recipient's card\nTechnical Specifications - Appendix E Country and Currency codes for VDC.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "sencondaryId": {
            "maxLength": 28,
            "type": "string",
            "description": "secondaryId is used for C2B use case in the CEMEA region where payee initiates the OCT to the payer. The merchant or acquirer may use this field to obtain an Agreement Id in order to process the request."
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "motoECIIndicator": {
            "maximum": 8,
            "minimum": 1,
            "type": "integer",
            "description": "Identifies the level of security used in an electronic commerce transaction over an open network (for example, the Internet) or the type of mail or telephone order. Acquirers supply indicator values, which Visa forwards in requests and advices to issuers that have successfully tested to receive them. The subfield is dropped if issuers have not successfully completed testing or choose not to receive it.\nIf not provided, Visa will default its value to 7 for US and 5 for rest of the world, for e-Commerce transaction\n"
          },
          "purposeOfPayment": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "Purpose of payment code is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Purpose of Payment\n",
            "example": "ISBEXP"
          },
          "customProgramData": {
            "$ref": "#/components/schemas/CustomProgramData"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "messageReasonCode": {
            "type": "integer",
            "description": "<b>Conditional.</b><br><br>Contains codes that combined with some other fields such as the BAI (Business Application Id) identify some unique use cases. For Sales Tax rebates this field should be populated with the value 5120 (Value-added tax/Sales Tax) along with the businessApplicationId field set to the value 'FD' which indicates this push funds transfer is being conducted in order to facilitate a sales tax refund."
          },
          "transactionAmount": {
            "description": "This field contains the transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount should be numeric. Refer to the Payouts Endpoint Guide on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for Card.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JOD is 3, the amount is JOD 100.996.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "riskAssessmentData": {
            "$ref": "#/components/schemas/RiskAssessmentData"
          },
          "feeProgramIndicator": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Note: If present, a valid value is required. Spaces or special characters are not allowed."
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "businessApplicationId": {
            "description": "Business Application Identifier (BAI) identifies the type of program for which the payment is being sent, i.e. whether it is a funds disbursement, money transfer etc. It should be a valid value allowed by Visa and approved for the program during onboarding.\n\nValid BAI for Push to Cards:\n- Money transfer: AA, PP, BI, FT, WT; \n- Non-money transfer: BB, BP, CP, FD, GD, GP, LO, MD, OG, PD\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessApplicationId-1"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Instructed Amount Currency Code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "localTransactionDateTime": {
            "description": "The date and time when the transaction takes place, expressed in the local time of the Originating Entity request\n\nFormat: YYYY-MM-DDThh:mm:ss\n\nISO20022 field name: Message Creation Date Time\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "scheduledPushFundsTransaction": {
            "$ref": "#/components/schemas/ScheduleTransaction"
          }
        }
      },
      "CardTransactionValidateDetail-1": {
        "required": [
          "businessApplicationId",
          "initiatingPartyId",
          "localTransactionDateTime",
          "transactionAmount",
          "transactionCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "payoutId": {
            "description": "For a Push transaction the identifier of Pull transaction that funds it can be provided, to associate the Pull and Push transactions\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayoutId"
              }
            ]
          },
          "surcharge": {
            "description": "When present, this field contains surcharge as assessed by the Originating Entity. Values in this field must be included in the transactionAmount and should be in the same currency and format as defined in the transactionAmount field.\n\nNote: if card credential is provided in senderDetail, fund is debited by transactionAmount from sender's card; but credited by transactionAmount - surcharge to recipient's card\nTechnical Specifications - Appendix E Country and Currency codes for VDC.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "sencondaryId": {
            "maxLength": 28,
            "type": "string",
            "description": "secondaryId is used for C2B use case in the CEMEA region where payee initiates the OCT to the payer. The merchant or acquirer may use this field to obtain an Agreement Id in order to process the request."
          },
          "additionalData": {
            "$ref": "#/components/schemas/TransactionalAdditionalData"
          },
          "motoECIIndicator": {
            "maximum": 8,
            "minimum": 1,
            "type": "integer",
            "description": "Identifies the level of security used in an electronic commerce transaction over an open network (for example, the Internet) or the type of mail or telephone order. Acquirers supply indicator values, which Visa forwards in requests and advices to issuers that have successfully tested to receive them. The subfield is dropped if issuers have not successfully completed testing or choose not to receive it.\nIf not provided, Visa will default its value to 7 for US and 5 for rest of the world, for e-Commerce transaction\n"
          },
          "purposeOfPayment": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "Purpose of payment code is required in certain markets to clearly identify the purpose of the payment based on the standard values defined for respective market\n\nConditional (Refer to Payouts Endpoint Guide on country-specific required fields and lengths)\n\nISO20022 field name: Purpose of Payment\n",
            "example": "ISBEXP"
          },
          "customProgramData": {
            "$ref": "#/components/schemas/CustomProgramData"
          },
          "initiatingPartyId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitiatingPartyId-1"
              }
            ]
          },
          "messageReasonCode": {
            "type": "integer",
            "description": "<b>Conditional.</b><br><br>Contains codes that combined with some other fields such as the BAI (Business Application Id) identify some unique use cases. For Sales Tax rebates this field should be populated with the value 5120 (Value-added tax/Sales Tax) along with the businessApplicationId field set to the value 'FD' which indicates this push funds transfer is being conducted in order to facilitate a sales tax refund."
          },
          "transactionAmount": {
            "description": "This field contains the transaction amount in the currency specified by the currency code in 'transactionCurrencyCode'. \nThe amount of POS funds requested by the cardholder, expressed in the local currency in an original authorization or financial transaction. \nThis field also contains the acquirer-assessed surcharge.            \n\nNote: Transaction amount should be numeric. Refer to the Payouts Endpoint Guide on country-specific currency minor units. Refer to SMS POS Visa & Visa Electron\nTechnical Specifications - Appendix E Country and Currency codes for Card.\n\nExample: Currency exponent for USD is 2, the amount is $100.99. Currency exponent for JOD is 3, the amount is JOD 100.996.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "riskAssessmentData": {
            "$ref": "#/components/schemas/RiskAssessmentData"
          },
          "feeProgramIndicator": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Note: If present, a valid value is required. Spaces or special characters are not allowed."
          },
          "senderSourceOfFunds": {
            "$ref": "#/components/schemas/SourceOfFunds-1"
          },
          "businessApplicationId": {
            "description": "Business Application Identifier (BAI) identifies the type of program for which the payment is being sent, i.e. whether it is a funds disbursement, money transfer etc. It should be a valid value allowed by Visa and approved for the program during onboarding.\n\nValid BAI for Push to Cards:\n- Money transfer: AA, PP, BI, FT, WT; \n- Non-money transfer: BB, BP, CP, FD, GD, GP, LO, MD, OG, PD\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessApplicationId-1"
              }
            ]
          },
          "transactionCurrencyCode": {
            "description": "The 3-character ISO-4217 code in this field reflects the currency associated to the transaction amount \nFormat: 3-character ISO-4217 (Alpha-3) currency code\n\nISO20022 field name: Instructed Amount Currency Code\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/AlphaCurrencyCode"
              }
            ]
          },
          "localTransactionDateTime": {
            "description": "The date and time when the transaction takes place, expressed in the local time of the Originating Entity request\n\nFormat: YYYY-MM-DDThh:mm:ss\n\nISO20022 field name: Message Creation Date Time\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampType"
              }
            ]
          },
          "scheduledPushFundsTransaction": {
            "$ref": "#/components/schemas/ScheduleTransaction"
          }
        }
      },
      "GivUpdatedFlag": {
        "type": "boolean",
        "description": "This field carries a boolean flag to indicate Giv Updated state. Possible values are true or false\n"
      }
    },
    "responses": {
      "QueryResponseAccount": {
        "description": "Transaction details response for account",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountQueryResponse"
                }
              ]
            }
          }
        }
      },
      "GetPostingCalendarResponse-1": {
        "description": "An array of PostingDate objects. \n\nEach PostingDate represents the expected posting date along with that date's cut-off time.   \n",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "postingCalendar"
              ],
              "type": "object",
              "properties": {
                "postingCalendar": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostingDate-1"
                  }
                }
              }
            }
          }
        }
      },
      "400NotificationsErrorResponse-1": {
        "description": "When any field fails schematic validation or when any required field is missing or when request is inconsistent with the Request definitions.",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/NotificationsErrorResponseWithKey-1"
            }
          }
        }
      },
      "400ErrorResponse": {
        "description": "When any field fails schematic validation or when any required field is missing or when request is inconsistent with the Request definitions.",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey"
            }
          }
        }
      },
      "GetPostingCalendarResponse-3": {
        "description": "An array of PostingDate objects. \n\nEach PostingDate represents the expected posting date along with that date's cut-off time.\n",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "postingCalendar"
              ],
              "type": "object",
              "properties": {
                "postingCalendar": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostingDate-1"
                  }
                }
              }
            }
          }
        }
      },
      "GetPostingCalendarResponse-2": {
        "description": "An array of PostingDate objects. \n\nEach PostingDate represents the expected posting date along with that date's cut-off time.   \n",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "postingCalendar"
              ],
              "type": "object",
              "properties": {
                "postingCalendar": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostingDate-2"
                  }
                }
              }
            }
          }
        }
      },
      "GetAccountBalanceResponse": {
        "description": "An array of the balances of the accounts for contracting or managed merchants. \nThe array can have a list of balances for all the currencies the merchant may have or has transacted with.    \n",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccountBalanceWithTimestamp"
                  },
                  {
                    "required": [
                      "balance"
                    ],
                    "type": "object",
                    "properties": {
                      "balance": {
                        "$ref": "#/components/schemas/AccountBalance"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "202CreatedResponse": {
        "description": "Transaction is accepted and will be processed & notified status.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "transactionDetail"
              ],
              "properties": {
                "transactionalDetail": {
                  "required": [
                    "payoutId"
                  ],
                  "type": "object",
                  "properties": {
                    "payoutId": {
                      "$ref": "#/components/schemas/PayoutId"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "400NotificationsErrorResponse": {
        "description": "When any field fails schematic validation or when any required field is missing or when request is inconsistent with the Request definitions.",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/NotificationsErrorResponseWithKey"
            }
          }
        }
      },
      "403ErrorResponse-3": {
        "description": "Request is forbidden",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/403ErrorResponseWithKey"
            }
          }
        }
      },
      "400ErrorResponses-7": {
        "description": "Comprehensive array of errors",
        "content": {
          "application/problem+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            }
          }
        }
      },
      "403ErrorResponse-4": {
        "description": "Request is forbidden",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/403ErrorResponseWithKey-1"
            }
          }
        }
      },
      "403ErrorResponse-1": {
        "description": "Request is forbidden",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey-1"
            }
          }
        }
      },
      "400ErrorResponses-5": {
        "description": "Comprehensive array of errors",
        "content": {
          "application/problem+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            }
          }
        }
      },
      "403ErrorResponse-2": {
        "description": "Request is forbidden",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey-2"
            }
          }
        }
      },
      "QueryResponse-1": {
        "description": "Transaction details response for account",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/QueryResponse-1"
                }
              ]
            }
          }
        }
      },
      "400ErrorResponses-6": {
        "description": "Comprehensive array of errors",
        "content": {
          "application/problem+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            }
          }
        }
      },
      "429ErrorResponse": {
        "description": "Too Many Requests",
        "content": {
          "application/problem+json": {}
        }
      },
      "400ErrorResponses-3": {
        "description": "Comprehensive array of errors",
        "content": {
          "application/problem+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            }
          }
        }
      },
      "QueryResponse-2": {
        "description": "Transaction details response for account",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/QueryResponse-2"
                }
              ]
            },
            "examples": {
              "QueryPayoutCardsResponse": {
                "value": {
                  "transactionDetail": {
                    "status": "PAYMENT_DELIVERED",
                    "payoutId": "234234322342343",
                    "networkResponses": [
                      {
                        "type": "PushFundsTransaction",
                        "networkId": 2,
                        "actionCode": "00",
                        "terminalId": "jAYcnj6V",
                        "acquiringBin": 445654,
                        "approvalCode": "21324K",
                        "cardAcceptorId": "CA-IDCode-89",
                        "responseSource": "5",
                        "transactionAmount": 100.21,
                        "originalActionCode": "230423",
                        "acquirerCountryCode": "840",
                        "transmissionDateTime": "2024-07-22T15:26:12.000Z",
                        "systemTraceAuditNumber": "420419",
                        "transactionCurrencyCode": "USD",
                        "retrievalReferenceNumber": "420419001676"
                      }
                    ],
                    "clientReferenceId": "98148028712",
                    "initiatingPartyId": 1002,
                    "transactionDateTime": "2024-07-22T15:26:12.000Z"
                  }
                }
              },
              "QueryPayoutWalletResponse": {
                "value": {
                  "transactionDetail": {
                    "status": "PAYMENT_RECEIVED",
                    "payoutId": "172167453453637",
                    "endToEndId": "330016463808",
                    "payoutSpeed": "STANDARD",
                    "fxConversionRate": 3613.25,
                    "settlementAmount": 1000,
                    "clientReferenceId": "13501445172",
                    "destinationAmount": 3613250,
                    "initiatingPartyId": 1002,
                    "transactionAmount": 3613250,
                    "expectedPostingDate": "2023-05-03",
                    "transactionDateTime": "2024-07-22T18:55:34.000Z",
                    "settlementCurrencyCode": "USD",
                    "destinationCurrencyCode": "UGX",
                    "transactionCurrencyCode": "UGX"
                  }
                }
              },
              "QueryPayoutAccountResponse": {
                "value": {
                  "transactionDetail": {
                    "status": "PAYMENT_RECEIVED",
                    "payoutId": "172167337682452",
                    "endToEndId": "330016463808",
                    "payoutSpeed": "STANDARD",
                    "fxConversionRate": 1,
                    "settlementAmount": 1557,
                    "clientReferenceId": "32917133186",
                    "destinationAmount": 1557,
                    "initiatingPartyId": 1002,
                    "transactionAmount": 1557,
                    "expectedPostingDate": "2022-11-16",
                    "transactionDateTime": "2024-07-22T18:36:16.000Z",
                    "settlementCurrencyCode": "GBP",
                    "destinationCurrencyCode": "GBP",
                    "transactionCurrencyCode": "GBP"
                  }
                }
              }
            }
          }
        }
      },
      "400ErrorResponses-4": {
        "description": "Comprehensive array of errors",
        "content": {
          "application/problem+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ErrorResponse-2"
              }
            }
          }
        }
      },
      "QueryResponse-3": {
        "description": "Transaction details response for account",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/QueryResponse-3"
                }
              ]
            }
          }
        }
      },
      "400ErrorResponses-1": {
        "description": "Comprehensive array of errors",
        "content": {
          "application/problem+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            }
          }
        }
      },
      "400ErrorResponses-2": {
        "description": "Comprehensive array of errors",
        "content": {
          "application/problem+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            }
          }
        }
      },
      "GetAccountBalanceResponse-1": {
        "description": "An array of the balances of the accounts for contracting or managed merchants. \nThe array can have a list of balances for all the currencies the merchant may have or has transacted with.    \n",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccountBalanceWithTimestamp-1"
                  },
                  {
                    "required": [
                      "balance"
                    ],
                    "type": "object",
                    "properties": {
                      "balance": {
                        "$ref": "#/components/schemas/AccountBalance"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "GetAccountBalanceResponse-2": {
        "description": "An array of the balances of the accounts for contracting or managed merchants. \nThe array can have a list of balances for all the currencies the merchant may have or has transacted with.\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccountBalanceWithTimestamp-2"
                  },
                  {
                    "required": [
                      "balance"
                    ],
                    "type": "object",
                    "properties": {
                      "balance": {
                        "$ref": "#/components/schemas/AccountBalance-1"
                      }
                    }
                  }
                ]
              }
            },
            "examples": {
              "GetBalanceResponse": {
                "value": [
                  {
                    "balance": {
                      "amount": 1234567890.12,
                      "currencyCode": "USD"
                    },
                    "accountId": "34000190226300",
                    "payoutMethod": "W",
                    "balanceTimestamp": "2022-06-16T10:46:07.000Z",
                    "lastTransactionTimestamp": "2022-06-16T10:46:07.000Z"
                  },
                  {
                    "balance": {
                      "amount": 12345,
                      "currencyCode": "AUD"
                    },
                    "accountId": "34000190226301",
                    "payoutMethod": "W",
                    "balanceTimestamp": "2022-06-16T10:46:07.000Z",
                    "lastTransactionTimestamp": "2022-06-16T10:46:07.000Z"
                  }
                ]
              },
              "GetBalanceResponseBasedOnCurrency": {
                "value": [
                  {
                    "balance": {
                      "amount": 1234567890.12,
                      "currencyCode": "USD"
                    },
                    "accountId": "34000190226300",
                    "payoutMethod": "W",
                    "balanceTimestamp": "2022-06-16T10:46:07.000Z",
                    "lastTransactionTimestamp": "2022-06-16T10:46:07.000Z"
                  }
                ]
              }
            }
          }
        }
      },
      "401ErrorResponse-3": {
        "description": "Request is unauthorized",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/401ErrorResponseWithKey"
            }
          }
        }
      },
      "401ErrorResponse-4": {
        "description": "Request is unauthorized",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/401ErrorResponseWithKey-1"
            }
          }
        }
      },
      "401ErrorResponse-1": {
        "description": "Request is unauthorized",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey-1"
            }
          }
        }
      },
      "401ErrorResponse-2": {
        "description": "Request is unauthorized",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey-2"
            }
          }
        }
      },
      "GetMetaDataResponse-3": {
        "description": "Returns the metadata of fields for creating the SendPayout request.\n\nNote:  \nGet Metadata API response varies based on the recipeint individual, recipient company and for a given country and currency combinations.\n\nSample response payload under the 'examples' represents different types of 'Identity groups' and 'Element Names' based on the given request parameters.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/S2AMetaData-2"
            },
            "examples": {
              "GetMetadaResponse": {
                "value": {
                  "recipientDetail": {
                    "identityGroups": [
                      {
                        "groupName": "name",
                        "mandatory": true,
                        "groupLabel": "Recipient name details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The first name of the recipient",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the first name of the recipient",
                            "displaySize": 35,
                            "elementName": "firstName",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The last name of the recipient",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the family name of the recipient",
                            "displaySize": 35,
                            "elementName": "lastName",
                            "valueRegexp": "*"
                          }
                        ]
                      },
                      {
                        "groupName": "legalEntityIdentity",
                        "mandatory": true,
                        "groupLabel": "Legal Entity Identity",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 70,
                            "subTitle": "Name of the company",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the name of the recipient company",
                            "displaySize": 35,
                            "elementName": "name"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Registration number of the company",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the registration number of the recipient company",
                            "displaySize": 10,
                            "elementName": "idNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Company registration ISO country",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code where recipient company is registered",
                            "displaySize": 2,
                            "elementName": "country"
                          }
                        ]
                      },
                      {
                        "groupName": "bank",
                        "mandatory": true,
                        "groupLabel": "Bank details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "Bank Name",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the Bank Name",
                            "displaySize": 30,
                            "elementName": "bankName",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 70,
                            "subTitle": "Account Holder",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Account Holders Name",
                            "displaySize": 35,
                            "elementName": "accountName"
                          },
                          {
                            "locale": "en",
                            "maxSize": 34,
                            "subTitle": "Account",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the Account Number",
                            "displaySize": 8,
                            "elementName": "accountNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Currency Code",
                            "tabOrder": 4,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account currency code",
                            "displaySize": 3,
                            "elementName": "currencyCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 12,
                            "subTitle": "Branch Code",
                            "tabOrder": 5,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account branch code",
                            "displaySize": 12,
                            "elementName": "branchCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Country Code",
                            "tabOrder": 6,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "this element contains ISO3166 country code (Alpha-3)",
                            "displaySize": 3,
                            "elementName": "countryCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 12,
                            "subTitle": "Bank Code",
                            "tabOrder": 7,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the Bank Code",
                            "displaySize": 12,
                            "elementName": "bankCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 8,
                            "subTitle": "Account Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "Checking",
                                "value": "1"
                              },
                              {
                                "label": "Savings",
                                "value": "2"
                              },
                              {
                                "label": "Loan",
                                "value": "5"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Select the Account Type",
                            "displaySize": 8,
                            "elementName": "accountType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 7,
                            "subTitle": "Account Number Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "DEFAULT",
                                "value": "DEFAULT"
                              },
                              {
                                "label": "IBAN",
                                "value": "IBAN"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account number type. Valid values: 'IBAN' and 'DEFAULT'",
                            "displaySize": 7,
                            "elementName": "accountNumberType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 9,
                            "subTitle": "Bank Code Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "DEFAULT",
                                "value": "DEFAULT"
                              },
                              {
                                "label": "ABARouting",
                                "value": "ABA"
                              },
                              {
                                "label": "SORT_CODE",
                                "value": "SORT_CODE"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account - bank code type. Valid values: 'DEFAULT', 'ABA' and 'SORT_CODE'",
                            "displaySize": 9,
                            "elementName": "bankCodeType"
                          }
                        ]
                      },
                      {
                        "groupName": "address",
                        "mandatory": false,
                        "groupLabel": "Address details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "First line of address of recipient",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the first line of address of recipient",
                            "displaySize": 35,
                            "elementName": "addressLine1",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "Second line of address of recipient",
                            "tabOrder": 4,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the second line of address of recipient",
                            "displaySize": 35,
                            "elementName": "addressLine2",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "City of residency of recipient",
                            "tabOrder": 6,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the city of residency of recipient",
                            "displaySize": 35,
                            "elementName": "city",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 25,
                            "subTitle": "State of residency of recipient",
                            "tabOrder": 7,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the state of residency of recipient",
                            "displaySize": 25,
                            "elementName": "state",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 16,
                            "subTitle": "Postal Code of residency of recipient",
                            "tabOrder": 8,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the Postal Code of residency of recipient",
                            "displaySize": 10,
                            "elementName": "postalCode",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "ISO county of residency of recipient",
                            "tabOrder": 9,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the ISO county code of residency of recipient",
                            "displaySize": 3,
                            "elementName": "country",
                            "valueRegexp": "*"
                          }
                        ]
                      },
                      {
                        "groupName": "contactInfo",
                        "mandatory": true,
                        "groupLabel": "Contact Information",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 16,
                            "subTitle": "Contact Number",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Contact Number of recipient. Symbol + followed by digits, no other symbols, e.g. something like +447809713678 (note, refer ISO spec E.164)",
                            "displaySize": 16,
                            "elementName": "contactNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 210,
                            "subTitle": "Contact Email",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Contact email of recipient",
                            "displaySize": 50,
                            "elementName": "contactEmail"
                          },
                          {
                            "locale": "en",
                            "maxSize": 6,
                            "subTitle": "Contact Number Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "MOBILE",
                                "value": "MOBILE"
                              },
                              {
                                "label": "HOME",
                                "value": "HOME"
                              },
                              {
                                "label": "WORK",
                                "value": "WORK"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Contact Number Type can be 'MOBILE', 'WORK','HOME' ",
                            "displaySize": 6,
                            "elementName": "contactNumberType"
                          }
                        ]
                      },
                      {
                        "groupName": "identificationList",
                        "mandatory": false,
                        "groupLabel": "Identification details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 1,
                            "subTitle": "Identification information of recipient",
                            "tabOrder": 10,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "Passport",
                                "value": "P"
                              },
                              {
                                "label": "National ID Card",
                                "value": "N"
                              },
                              {
                                "label": "Driving License",
                                "value": "D"
                              }
                            ],
                            "mandatory": true,
                            "description": "Enter one of the identification information of recipient",
                            "displaySize": 5,
                            "elementName": "idType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Identifier value of the document",
                            "tabOrder": 11,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the identifier value of the recipient document",
                            "displaySize": 10,
                            "elementName": "idNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "ISO country of issue of the identification document",
                            "tabOrder": 12,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code of issue of the recipient identification document",
                            "displaySize": 3,
                            "elementName": "idIssueCountry"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name (e.g. : validFromDate) for the additional data",
                            "displaySize": 35,
                            "elementName": "name"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value (e.g. : validFromDate) for the additional data",
                            "displaySize": 100,
                            "elementName": "value"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name (e.g. : validToDate) for the additional data",
                            "displaySize": 35,
                            "elementName": "additionalDataKey"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value (e.g. : validToDate) for the additional data",
                            "displaySize": 100,
                            "elementName": "additionalDataValue"
                          }
                        ]
                      },
                      {
                        "groupName": "birthInfo",
                        "mandatory": false,
                        "groupLabel": "birth information of recipient",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 10,
                            "subTitle": "The date of birth of the recipient",
                            "tabOrder": 15,
                            "inputType": "date",
                            "mandatory": true,
                            "description": "Enter the date of birth of the recipient",
                            "displaySize": 10,
                            "elementName": "dateOfBirth"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The city of birth of the recipient",
                            "tabOrder": 16,
                            "inputType": "text",
                            "mandatory": false,
                            "description": "Enter the city of birth of the recipient",
                            "displaySize": 35,
                            "elementName": "cityOfBirth"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "The ISO country of birth of the recipient",
                            "tabOrder": 16,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code of birth of the recipient",
                            "displaySize": 3,
                            "elementName": "countryOfBirth"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 18,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name for the additional data",
                            "displaySize": 35,
                            "elementName": "additionalDataKey"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 19,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value for the additional data",
                            "displaySize": 100,
                            "elementName": "additionalDataValue"
                          }
                        ]
                      }
                    ]
                  },
                  "transactionDetail": {
                    "purposeOfPayment": {
                      "mandatory": true,
                      "purposeOfPaymentCodes": [
                        {
                          "code": "TAX",
                          "description": "Tax",
                          "senderIndividual": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "MOR",
                          "description": "Mortgage",
                          "senderCompany": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "MIS",
                          "description": "Miscellaneous",
                          "recipientCompany": true,
                          "senderIndividual": true
                        },
                        {
                          "code": "SAL",
                          "description": "Salary/payroll",
                          "senderCompany": true,
                          "recipientCompany": true
                        },
                        {
                          "code": "LOA",
                          "description": "Loan",
                          "senderCompany": true,
                          "recipientCompany": true
                        },
                        {
                          "code": "BUS",
                          "description": "Business/commercial payment",
                          "recipientCompany": true,
                          "senderIndividual": true
                        },
                        {
                          "code": "DEP",
                          "description": "Deposit",
                          "senderCompany": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "PEN",
                          "description": "Pension",
                          "recipientCompany": true,
                          "senderIndividual": true
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "400ErrorResponses": {
        "description": "Comprehensive array of errors",
        "content": {
          "application/problem+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ErrorResponse-1"
              }
            }
          }
        }
      },
      "GetMetaDataResponse-2": {
        "description": "Returns the metadata of fields for creating the SendPayout request.\n\nNote:  \nGet Metadata API response varies based on the recipeint individual, recipient company and for a given country and currency combinations.\n\nSample response payload under the 'examples' represents different types of 'Identity groups' and 'Element Names' based on the given request parameters.   \n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/S2AMetaData-1"
            },
            "examples": {
              "GetMetadaResponse": {
                "value": {
                  "recipientDetail": {
                    "identityGroups": [
                      {
                        "groupName": "name",
                        "mandatory": true,
                        "groupLabel": "Recipient name details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The first name of the recipient",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the first name of the recipient",
                            "displaySize": 35,
                            "elementName": "firstName",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The last name of the recipient",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the family name of the recipient",
                            "displaySize": 35,
                            "elementName": "lastName",
                            "valueRegexp": "*"
                          }
                        ]
                      },
                      {
                        "groupName": "legalEntityIdentity",
                        "mandatory": true,
                        "groupLabel": "Legal Entity Identity",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 70,
                            "subTitle": "Name of the company",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the name of the recipient company",
                            "displaySize": 35,
                            "elementName": "name"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Registration number of the company",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the registration number of the recipient company",
                            "displaySize": 10,
                            "elementName": "idNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Company registration ISO country",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code where recipient company is registered",
                            "displaySize": 2,
                            "elementName": "country"
                          }
                        ]
                      },
                      {
                        "groupName": "bank",
                        "mandatory": true,
                        "groupLabel": "Bank details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "Bank Name",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the Bank Name",
                            "displaySize": 30,
                            "elementName": "bankName",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 70,
                            "subTitle": "Account Holder",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Account Holders Name",
                            "displaySize": 35,
                            "elementName": "accountName"
                          },
                          {
                            "locale": "en",
                            "maxSize": 34,
                            "subTitle": "Account",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the Account Number",
                            "displaySize": 8,
                            "elementName": "accountNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Currency Code",
                            "tabOrder": 4,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account currency code",
                            "displaySize": 3,
                            "elementName": "currencyCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 12,
                            "subTitle": "Branch Code",
                            "tabOrder": 5,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account branch code",
                            "displaySize": 12,
                            "elementName": "branchCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Country Code",
                            "tabOrder": 6,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "this element contains ISO3166 country code (Alpha-3)",
                            "displaySize": 3,
                            "elementName": "countryCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 12,
                            "subTitle": "Bank Code",
                            "tabOrder": 7,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the Bank Code",
                            "displaySize": 12,
                            "elementName": "bankCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 8,
                            "subTitle": "Account Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "Checking",
                                "value": "1"
                              },
                              {
                                "label": "Savings",
                                "value": "2"
                              },
                              {
                                "label": "Loan",
                                "value": "5"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Select the Account Type",
                            "displaySize": 8,
                            "elementName": "accountType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 7,
                            "subTitle": "Account Number Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "DEFAULT",
                                "value": "DEFAULT"
                              },
                              {
                                "label": "IBAN",
                                "value": "IBAN"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account number type. Valid values: 'IBAN' and 'DEFAULT'",
                            "displaySize": 7,
                            "elementName": "accountNumberType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 9,
                            "subTitle": "Bank Code Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "DEFAULT",
                                "value": "DEFAULT"
                              },
                              {
                                "label": "ABARouting",
                                "value": "ABA"
                              },
                              {
                                "label": "SORT_CODE",
                                "value": "SORT_CODE"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account - bank code type. Valid values: 'DEFAULT', 'ABA' and 'SORT_CODE'",
                            "displaySize": 9,
                            "elementName": "bankCodeType"
                          }
                        ]
                      },
                      {
                        "groupName": "address",
                        "mandatory": false,
                        "groupLabel": "Address details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "First line of address of recipient",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the first line of address of recipient",
                            "displaySize": 35,
                            "elementName": "addressLine1",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "Second line of address of recipient",
                            "tabOrder": 4,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the second line of address of recipient",
                            "displaySize": 35,
                            "elementName": "addressLine2",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "City of residency of recipient",
                            "tabOrder": 6,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the city of residency of recipient",
                            "displaySize": 35,
                            "elementName": "city",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 25,
                            "subTitle": "State of residency of recipient",
                            "tabOrder": 7,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the state of residency of recipient",
                            "displaySize": 25,
                            "elementName": "state",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 16,
                            "subTitle": "Postal Code of residency of recipient",
                            "tabOrder": 8,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the Postal Code of residency of recipient",
                            "displaySize": 10,
                            "elementName": "postalCode",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "ISO county of residency of recipient",
                            "tabOrder": 9,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the ISO county code of residency of recipient",
                            "displaySize": 3,
                            "elementName": "country",
                            "valueRegexp": "*"
                          }
                        ]
                      },
                      {
                        "groupName": "contactInfo",
                        "mandatory": true,
                        "groupLabel": "Contact Information",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 16,
                            "subTitle": "Contact Number",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Contact Number of recipient. Symbol + followed by digits, no other symbols, e.g. something like +447700123456 (note, refer ISO spec E.164)",
                            "displaySize": 16,
                            "elementName": "contactNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 210,
                            "subTitle": "Contact Email",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Contact email of recipient",
                            "displaySize": 50,
                            "elementName": "contactEmail"
                          },
                          {
                            "locale": "en",
                            "maxSize": 6,
                            "subTitle": "Contact Number Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "MOBILE",
                                "value": "MOBILE"
                              },
                              {
                                "label": "HOME",
                                "value": "HOME"
                              },
                              {
                                "label": "WORK",
                                "value": "WORK"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Contact Number Type can be 'MOBILE', 'WORK','HOME' ",
                            "displaySize": 6,
                            "elementName": "contactNumberType"
                          }
                        ]
                      },
                      {
                        "groupName": "identificationList",
                        "mandatory": false,
                        "groupLabel": "Identification details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 1,
                            "subTitle": "Identification information of recipient",
                            "tabOrder": 10,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "Passport",
                                "value": "P"
                              },
                              {
                                "label": "National ID Card",
                                "value": "N"
                              },
                              {
                                "label": "Driving License",
                                "value": "D"
                              }
                            ],
                            "mandatory": true,
                            "description": "Enter one of the identification information of recipient",
                            "displaySize": 5,
                            "elementName": "idType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Identifier value of the document",
                            "tabOrder": 11,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the identifier value of the recipient document",
                            "displaySize": 10,
                            "elementName": "idNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "ISO country of issue of the identification document",
                            "tabOrder": 12,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code of issue of the recipient identification document",
                            "displaySize": 3,
                            "elementName": "idIssueCountry"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name (e.g. : validFromDate) for the additional data",
                            "displaySize": 35,
                            "elementName": "name"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value (e.g. : validFromDate) for the additional data",
                            "displaySize": 100,
                            "elementName": "value"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name (e.g. : validToDate) for the additional data",
                            "displaySize": 35,
                            "elementName": "additionalDataKey"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value (e.g. : validToDate) for the additional data",
                            "displaySize": 100,
                            "elementName": "additionalDataValue"
                          }
                        ]
                      },
                      {
                        "groupName": "birthInfo",
                        "mandatory": false,
                        "groupLabel": "birth information of recipient",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 10,
                            "subTitle": "The date of birth of the recipient",
                            "tabOrder": 15,
                            "inputType": "date",
                            "mandatory": true,
                            "description": "Enter the date of birth of the recipient",
                            "displaySize": 10,
                            "elementName": "dateOfBirth"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The city of birth of the recipient",
                            "tabOrder": 16,
                            "inputType": "text",
                            "mandatory": false,
                            "description": "Enter the city of birth of the recipient",
                            "displaySize": 35,
                            "elementName": "cityOfBirth"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "The ISO country of birth of the recipient",
                            "tabOrder": 16,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code of birth of the recipient",
                            "displaySize": 3,
                            "elementName": "countryOfBirth"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 18,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name for the additional data",
                            "displaySize": 35,
                            "elementName": "additionalDataKey"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 19,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value for the additional data",
                            "displaySize": 100,
                            "elementName": "additionalDataValue"
                          }
                        ]
                      }
                    ]
                  },
                  "transactionDetail": {
                    "purposeOfPayment": {
                      "mandatory": true,
                      "purposeOfPaymentCodes": [
                        {
                          "code": "TAX",
                          "description": "Tax",
                          "senderIndividual": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "MOR",
                          "description": "Mortgage",
                          "senderCompany": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "MIS",
                          "description": "Miscellaneous",
                          "recipientCompany": true,
                          "senderIndividual": true
                        },
                        {
                          "code": "SAL",
                          "description": "Salary/payroll",
                          "senderCompany": true,
                          "recipientCompany": true
                        },
                        {
                          "code": "LOA",
                          "description": "Loan",
                          "senderCompany": true,
                          "recipientCompany": true
                        },
                        {
                          "code": "BUS",
                          "description": "Business/commercial payment",
                          "recipientCompany": true,
                          "senderIndividual": true
                        },
                        {
                          "code": "DEP",
                          "description": "Deposit",
                          "senderCompany": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "PEN",
                          "description": "Pension",
                          "recipientCompany": true,
                          "senderIndividual": true
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GetMetaDataResponse-1": {
        "description": "Returns the metadata of fields for creating the SendPayout request.\n\nNote:  \nGet Metadata API response varies based on the recipeint individual, recipient company and for a given country and currency combinations.\n\nSample response payload under the 'examples' represents different types of 'Identity groups' and 'Element Names' based on the given request parameters.   \n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/S2AMetaData-1"
            },
            "examples": {
              "GetMetadaResponse": {
                "value": {
                  "recipientDetail": {
                    "identityGroups": [
                      {
                        "groupName": "name",
                        "mandatory": true,
                        "groupLabel": "Recipient name details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The first name of the recipient",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the first name of the recipient",
                            "displaySize": 35,
                            "elementName": "firstName",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The last name of the recipient",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the family name of the recipient",
                            "displaySize": 35,
                            "elementName": "lastName",
                            "valueRegexp": "*"
                          }
                        ]
                      },
                      {
                        "groupName": "legalEntityIdentity",
                        "mandatory": true,
                        "groupLabel": "Legal Entity Identity",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 70,
                            "subTitle": "Name of the company",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the name of the recipient company",
                            "displaySize": 35,
                            "elementName": "name"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Registration number of the company",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the registration number of the recipient company",
                            "displaySize": 10,
                            "elementName": "idNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Company registration ISO country",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code where recipient company is registered",
                            "displaySize": 2,
                            "elementName": "country"
                          }
                        ]
                      },
                      {
                        "groupName": "bank",
                        "mandatory": true,
                        "groupLabel": "Bank details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "Bank Name",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the Bank Name",
                            "displaySize": 30,
                            "elementName": "bankName",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 70,
                            "subTitle": "Account Holder",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Account Holders Name",
                            "displaySize": 35,
                            "elementName": "accountName"
                          },
                          {
                            "locale": "en",
                            "maxSize": 34,
                            "subTitle": "Account",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the Account Number",
                            "displaySize": 8,
                            "elementName": "accountNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Currency Code",
                            "tabOrder": 4,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account currency code",
                            "displaySize": 3,
                            "elementName": "currencyCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 12,
                            "subTitle": "Branch Code",
                            "tabOrder": 5,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account branch code",
                            "displaySize": 12,
                            "elementName": "branchCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Country Code",
                            "tabOrder": 6,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "this element contains ISO3166 country code (Alpha-3)",
                            "displaySize": 3,
                            "elementName": "countryCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 12,
                            "subTitle": "Bank Code",
                            "tabOrder": 7,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the Bank Code",
                            "displaySize": 12,
                            "elementName": "bankCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 8,
                            "subTitle": "Account Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "Checking",
                                "value": "1"
                              },
                              {
                                "label": "Savings",
                                "value": "2"
                              },
                              {
                                "label": "Loan",
                                "value": "5"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Select the Account Type",
                            "displaySize": 8,
                            "elementName": "accountType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 7,
                            "subTitle": "Account Number Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "DEFAULT",
                                "value": "DEFAULT"
                              },
                              {
                                "label": "IBAN",
                                "value": "IBAN"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account number type. Valid values: 'IBAN' and 'DEFAULT'",
                            "displaySize": 7,
                            "elementName": "accountNumberType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 9,
                            "subTitle": "Bank Code Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "DEFAULT",
                                "value": "DEFAULT"
                              },
                              {
                                "label": "ABARouting",
                                "value": "ABA"
                              },
                              {
                                "label": "SORT_CODE",
                                "value": "SORT_CODE"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account - bank code type. Valid values: 'DEFAULT', 'ABA' and 'SORT_CODE'",
                            "displaySize": 9,
                            "elementName": "bankCodeType"
                          }
                        ]
                      },
                      {
                        "groupName": "address",
                        "mandatory": false,
                        "groupLabel": "Address details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "First line of address of recipient",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the first line of address of recipient",
                            "displaySize": 35,
                            "elementName": "addressLine1",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "Second line of address of recipient",
                            "tabOrder": 4,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the second line of address of recipient",
                            "displaySize": 35,
                            "elementName": "addressLine2",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "City of residency of recipient",
                            "tabOrder": 6,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the city of residency of recipient",
                            "displaySize": 35,
                            "elementName": "city",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 25,
                            "subTitle": "State of residency of recipient",
                            "tabOrder": 7,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the state of residency of recipient",
                            "displaySize": 25,
                            "elementName": "state",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 16,
                            "subTitle": "Postal Code of residency of recipient",
                            "tabOrder": 8,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the Postal Code of residency of recipient",
                            "displaySize": 10,
                            "elementName": "postalCode",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "ISO county of residency of recipient",
                            "tabOrder": 9,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the ISO county code of residency of recipient",
                            "displaySize": 3,
                            "elementName": "country",
                            "valueRegexp": "*"
                          }
                        ]
                      },
                      {
                        "groupName": "contactInfo",
                        "mandatory": true,
                        "groupLabel": "Contact Information",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 16,
                            "subTitle": "Contact Number",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Contact Number of recipient. Symbol + followed by digits, no other symbols, e.g. something like +447809713678 (note, refer ISO spec E.164)",
                            "displaySize": 16,
                            "elementName": "contactNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 210,
                            "subTitle": "Contact Email",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Contact email of recipient",
                            "displaySize": 50,
                            "elementName": "contactEmail"
                          },
                          {
                            "locale": "en",
                            "maxSize": 6,
                            "subTitle": "Contact Number Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "MOBILE",
                                "value": "MOBILE"
                              },
                              {
                                "label": "HOME",
                                "value": "HOME"
                              },
                              {
                                "label": "WORK",
                                "value": "WORK"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Contact Number Type can be 'MOBILE', 'WORK','HOME' ",
                            "displaySize": 6,
                            "elementName": "contactNumberType"
                          }
                        ]
                      },
                      {
                        "groupName": "identificationList",
                        "mandatory": false,
                        "groupLabel": "Identification details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 1,
                            "subTitle": "Identification information of recipient",
                            "tabOrder": 10,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "Passport",
                                "value": "P"
                              },
                              {
                                "label": "National ID Card",
                                "value": "N"
                              },
                              {
                                "label": "Driving License",
                                "value": "D"
                              }
                            ],
                            "mandatory": true,
                            "description": "Enter one of the identification information of recipient",
                            "displaySize": 5,
                            "elementName": "idType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Identifier value of the document",
                            "tabOrder": 11,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the identifier value of the recipient document",
                            "displaySize": 10,
                            "elementName": "idNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "ISO country of issue of the identification document",
                            "tabOrder": 12,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code of issue of the recipient identification document",
                            "displaySize": 3,
                            "elementName": "idIssueCountry"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name (e.g. : validFromDate) for the additional data",
                            "displaySize": 35,
                            "elementName": "name"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value (e.g. : validFromDate) for the additional data",
                            "displaySize": 100,
                            "elementName": "value"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name (e.g. : validToDate) for the additional data",
                            "displaySize": 35,
                            "elementName": "additionalDataKey"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value (e.g. : validToDate) for the additional data",
                            "displaySize": 100,
                            "elementName": "additionalDataValue"
                          }
                        ]
                      },
                      {
                        "groupName": "birthInfo",
                        "mandatory": false,
                        "groupLabel": "birth information of recipient",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 10,
                            "subTitle": "The date of birth of the recipient",
                            "tabOrder": 15,
                            "inputType": "date",
                            "mandatory": true,
                            "description": "Enter the date of birth of the recipient",
                            "displaySize": 10,
                            "elementName": "dateOfBirth"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The city of birth of the recipient",
                            "tabOrder": 16,
                            "inputType": "text",
                            "mandatory": false,
                            "description": "Enter the city of birth of the recipient",
                            "displaySize": 35,
                            "elementName": "cityOfBirth"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "The ISO country of birth of the recipient",
                            "tabOrder": 16,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code of birth of the recipient",
                            "displaySize": 3,
                            "elementName": "countryOfBirth"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 18,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name for the additional data",
                            "displaySize": 35,
                            "elementName": "additionalDataKey"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 19,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value for the additional data",
                            "displaySize": 100,
                            "elementName": "additionalDataValue"
                          }
                        ]
                      }
                    ]
                  },
                  "transactionDetail": {
                    "purposeOfPayment": {
                      "mandatory": true,
                      "purposeOfPaymentCodes": [
                        {
                          "code": "TAX",
                          "description": "Tax",
                          "senderIndividual": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "MOR",
                          "description": "Mortgage",
                          "senderCompany": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "MIS",
                          "description": "Miscellaneous",
                          "recipientCompany": true,
                          "senderIndividual": true
                        },
                        {
                          "code": "SAL",
                          "description": "Salary/payroll",
                          "senderCompany": true,
                          "recipientCompany": true
                        },
                        {
                          "code": "LOA",
                          "description": "Loan",
                          "senderCompany": true,
                          "recipientCompany": true
                        },
                        {
                          "code": "BUS",
                          "description": "Business/commercial payment",
                          "recipientCompany": true,
                          "senderIndividual": true
                        },
                        {
                          "code": "DEP",
                          "description": "Deposit",
                          "senderCompany": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "PEN",
                          "description": "Pension",
                          "recipientCompany": true,
                          "senderIndividual": true
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "QueryResponseAccount-3": {
        "description": "Transaction details response for account",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountQueryResponse-3"
                }
              ]
            }
          }
        }
      },
      "GetPartialAccountBalanceResponse": {
        "description": "An array of the balances of the accounts for contracting or managed merchants. \nThe array can have a partial list of balances for all the currencies the merchant may have or has transacted with.\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccountBalanceWithTimestamp-2"
                  },
                  {
                    "required": [
                      "balance"
                    ],
                    "type": "object",
                    "properties": {
                      "balance": {
                        "$ref": "#/components/schemas/AccountBalance-1"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "QueryResponseAccount-1": {
        "description": "Transaction details response for account",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountQueryResponse-1"
                }
              ]
            }
          }
        }
      },
      "QueryResponseAccount-2": {
        "description": "Transaction details response for account",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountQueryResponse-2"
                }
              ]
            }
          }
        }
      },
      "CancelPayoutResponse": {
        "description": "cancel payout response",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "transactionDetail"
              ],
              "type": "object",
              "properties": {
                "transactionDetail": {
                  "required": [
                    "clientReferenceId",
                    "initiatingPartyId",
                    "status"
                  ],
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Status of the cancel request\n\nValid Value are: PENDING_CANCELLATION, CANCELLED\n- PENDING_CANCELLATION: Cancel payout request is pending before cancellation\n- CANCELLED: A transaction has been successfully cancelled in PAYMENT_RECEIVED or PENDING status\n",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PayoutCancelStatus"
                        }
                      ]
                    },
                    "payoutId": {
                      "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout and Reversals, Chargeback, Response, Advice for to Card. \n",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PayoutId"
                        }
                      ]
                    },
                    "clientReferenceId": {
                      "$ref": "#/components/schemas/ClientReferenceId"
                    },
                    "initiatingPartyId": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/InitiatingPartyId"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409ErrorResponse": {
        "description": "Conflict",
        "content": {
          "application/problem+json": {}
        }
      },
      "500ErrorResponse": {
        "description": "Internal Server Error",
        "content": {
          "application/problem+json": {}
        }
      },
      "403ErrorResponse": {
        "description": "Request is forbidden",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey"
            }
          }
        }
      },
      "404ErrorResponse": {
        "description": "Resource not found",
        "content": {
          "application/problem+json": {}
        }
      },
      "401ErrorResponse": {
        "description": "Request is unauthorized",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey"
            }
          }
        }
      },
      "400ErrorResponse-1": {
        "description": "When any field fails schematic validation or when any required field is missing or when request is inconsistent with the Request definitions.",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey-1"
            }
          }
        }
      },
      "400ErrorResponse-2": {
        "description": "When any field fails schematic validation or when any required field is missing or when request is inconsistent with the Request definitions.",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey-2"
            }
          }
        }
      },
      "400ErrorResponse-3": {
        "description": "When any field fails schematic validation or when any required field is missing or when request is inconsistent with the Request definitions.",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey-3"
            }
          }
        }
      },
      "400ErrorResponse-4": {
        "description": "When any field fails schematic validation or when any required field is missing or when request is inconsistent with the Request definitions.",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey-4"
            }
          }
        }
      },
      "400ErrorResponse-5": {
        "description": "When any field fails schematic validation or when any required field is missing or when request is inconsistent with the Request definitions.",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey-5"
            }
          }
        }
      },
      "400ErrorResponse-6": {
        "description": "When any field fails schematic validation or when any required field is missing or when request is inconsistent with the Request definitions.",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey-6"
            }
          }
        }
      },
      "QueryResponse": {
        "description": "Transaction details response for account",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/QueryResponse"
                }
              ]
            }
          }
        }
      },
      "400ErrorResponse-7": {
        "description": "When any field fails schematic validation or when any required field is missing or when request is inconsistent with the Request definitions.",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseWithKey-7"
            }
          }
        }
      },
      "CancelPayoutResponse-1": {
        "description": "cancel payout response",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "transactionDetail"
              ],
              "type": "object",
              "properties": {
                "transactionDetail": {
                  "required": [
                    "clientReferenceId",
                    "initiatingPartyId",
                    "status"
                  ],
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Status of the cancel request\n\nValid Value are: PENDING_CANCELLATION, CANCELLED\n- PENDING_CANCELLATION: Cancel payout request is pending before cancellation\n- CANCELLED: A transaction has been successfully cancelled\n",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PayoutCancelStatus"
                        }
                      ]
                    },
                    "payoutId": {
                      "description": "This is a unique identifier generated by the Visa for a transaction and is key field used in the subsequent messages with in the transaction set example Notification, Returns, Cancel, Exception management via VD Portal for Payout and Reversals, Chargeback, Response, Advice for to Card. \n",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PayoutId"
                        }
                      ]
                    },
                    "clientReferenceId": {
                      "$ref": "#/components/schemas/ClientReferenceId-1"
                    },
                    "initiatingPartyId": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/InitiatingPartyId-1"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "503ErrorResponse": {
        "description": "Service Unavailable",
        "content": {
          "application/problem+json": {}
        }
      },
      "GetMetaDataResponse": {
        "description": "Returns the metadata of fields for creating the SendPayout request.\n\nNote:  \nGet Metadata API response varies based on the recipeint individual, recipient company and for a given country and currency combinations.\n\nSample response payload under the 'examples' represents different types of 'Identity groups' and 'Element Names' based on the given request parameters.   \n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/S2AMetaData"
            },
            "examples": {
              "GetMetadaResponse": {
                "value": {
                  "recipientDetail": {
                    "identityGroups": [
                      {
                        "groupName": "name",
                        "mandatory": true,
                        "groupLabel": "Recipient name details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The first name of the recipient",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the first name of the recipient",
                            "displaySize": 35,
                            "elementName": "firstName",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The last name of the recipient",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the family name of the recipient",
                            "displaySize": 35,
                            "elementName": "lastName",
                            "valueRegexp": "*"
                          }
                        ]
                      },
                      {
                        "groupName": "legalEntityIdentity",
                        "mandatory": true,
                        "groupLabel": "Legal Entity Identity",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 70,
                            "subTitle": "Name of the company",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the name of the recipient company",
                            "displaySize": 35,
                            "elementName": "name"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Registration number of the company",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the registration number of the recipient company",
                            "displaySize": 10,
                            "elementName": "idNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Company registration ISO country",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code where recipient company is registered",
                            "displaySize": 2,
                            "elementName": "country"
                          }
                        ]
                      },
                      {
                        "groupName": "bank",
                        "mandatory": true,
                        "groupLabel": "Bank details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "Bank Name",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the Bank Name",
                            "displaySize": 30,
                            "elementName": "bankName",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 70,
                            "subTitle": "Account Holder",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Account Holders Name",
                            "displaySize": 35,
                            "elementName": "accountName"
                          },
                          {
                            "locale": "en",
                            "maxSize": 34,
                            "subTitle": "Account",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the Account Number",
                            "displaySize": 8,
                            "elementName": "accountNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Currency Code",
                            "tabOrder": 4,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account currency code",
                            "displaySize": 3,
                            "elementName": "currencyCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 12,
                            "subTitle": "Branch Code",
                            "tabOrder": 5,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account branch code",
                            "displaySize": 12,
                            "elementName": "branchCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "Country Code",
                            "tabOrder": 6,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "this element contains ISO3166 country code (Alpha-3)",
                            "displaySize": 3,
                            "elementName": "countryCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 12,
                            "subTitle": "Bank Code",
                            "tabOrder": 7,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Enter the Bank Code",
                            "displaySize": 12,
                            "elementName": "bankCode"
                          },
                          {
                            "locale": "en",
                            "maxSize": 8,
                            "subTitle": "Account Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "Checking",
                                "value": "1"
                              },
                              {
                                "label": "Savings",
                                "value": "2"
                              },
                              {
                                "label": "Loan",
                                "value": "5"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Select the Account Type",
                            "displaySize": 8,
                            "elementName": "accountType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 7,
                            "subTitle": "Account Number Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "DEFAULT",
                                "value": "DEFAULT"
                              },
                              {
                                "label": "IBAN",
                                "value": "IBAN"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account number type. Valid values: 'IBAN' and 'DEFAULT'",
                            "displaySize": 7,
                            "elementName": "accountNumberType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 9,
                            "subTitle": "Bank Code Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "DEFAULT",
                                "value": "DEFAULT"
                              },
                              {
                                "label": "ABARouting",
                                "value": "ABA"
                              },
                              {
                                "label": "SORT_CODE",
                                "value": "SORT_CODE"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Recipient bank account - bank code type. Valid values: 'DEFAULT', 'ABA' and 'SORT_CODE'",
                            "displaySize": 9,
                            "elementName": "bankCodeType"
                          }
                        ]
                      },
                      {
                        "groupName": "address",
                        "mandatory": false,
                        "groupLabel": "Address details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "First line of address of recipient",
                            "tabOrder": 3,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the first line of address of recipient",
                            "displaySize": 35,
                            "elementName": "addressLine1",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 50,
                            "subTitle": "Second line of address of recipient",
                            "tabOrder": 4,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the second line of address of recipient",
                            "displaySize": 35,
                            "elementName": "addressLine2",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "City of residency of recipient",
                            "tabOrder": 6,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the city of residency of recipient",
                            "displaySize": 35,
                            "elementName": "city",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 25,
                            "subTitle": "State of residency of recipient",
                            "tabOrder": 7,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the state of residency of recipient",
                            "displaySize": 25,
                            "elementName": "state",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 16,
                            "subTitle": "Postal Code of residency of recipient",
                            "tabOrder": 8,
                            "inputType": "text",
                            "mandatory": false,
                            "separator": "-",
                            "description": "Enter the Postal Code of residency of recipient",
                            "displaySize": 10,
                            "elementName": "postalCode",
                            "valueRegexp": "*"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "ISO county of residency of recipient",
                            "tabOrder": 9,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Enter the ISO county code of residency of recipient",
                            "displaySize": 3,
                            "elementName": "country",
                            "valueRegexp": "*"
                          }
                        ]
                      },
                      {
                        "groupName": "contactInfo",
                        "mandatory": true,
                        "groupLabel": "Contact Information",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 16,
                            "subTitle": "Contact Number",
                            "tabOrder": 1,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": " ",
                            "description": "Contact Number of recipient. Symbol + followed by digits, no other symbols, e.g. something like +447809713678 (note, refer ISO spec E.164)",
                            "displaySize": 16,
                            "elementName": "contactNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 210,
                            "subTitle": "Contact Email",
                            "tabOrder": 2,
                            "inputType": "text",
                            "mandatory": true,
                            "separator": "-",
                            "description": "Contact email of recipient",
                            "displaySize": 50,
                            "elementName": "contactEmail"
                          },
                          {
                            "locale": "en",
                            "maxSize": 6,
                            "subTitle": "Contact Number Type",
                            "tabOrder": 8,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "MOBILE",
                                "value": "MOBILE"
                              },
                              {
                                "label": "HOME",
                                "value": "HOME"
                              },
                              {
                                "label": "WORK",
                                "value": "WORK"
                              }
                            ],
                            "mandatory": true,
                            "separator": " ",
                            "description": "Contact Number Type can be 'MOBILE', 'WORK','HOME' ",
                            "displaySize": 6,
                            "elementName": "contactNumberType"
                          }
                        ]
                      },
                      {
                        "groupName": "identificationList",
                        "mandatory": false,
                        "groupLabel": "Identification details",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 1,
                            "subTitle": "Identification information of recipient",
                            "tabOrder": 10,
                            "inputType": "list",
                            "listItems": [
                              {
                                "label": "Passport",
                                "value": "P"
                              },
                              {
                                "label": "National ID Card",
                                "value": "N"
                              },
                              {
                                "label": "Driving License",
                                "value": "D"
                              }
                            ],
                            "mandatory": true,
                            "description": "Enter one of the identification information of recipient",
                            "displaySize": 5,
                            "elementName": "idType"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Identifier value of the document",
                            "tabOrder": 11,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the identifier value of the recipient document",
                            "displaySize": 10,
                            "elementName": "idNumber"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "ISO country of issue of the identification document",
                            "tabOrder": 12,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code of issue of the recipient identification document",
                            "displaySize": 3,
                            "elementName": "idIssueCountry"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name (e.g. : validFromDate) for the additional data",
                            "displaySize": 35,
                            "elementName": "name"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value (e.g. : validFromDate) for the additional data",
                            "displaySize": 100,
                            "elementName": "value"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name (e.g. : validToDate) for the additional data",
                            "displaySize": 35,
                            "elementName": "additionalDataKey"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 14,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value (e.g. : validToDate) for the additional data",
                            "displaySize": 100,
                            "elementName": "additionalDataValue"
                          }
                        ]
                      },
                      {
                        "groupName": "birthInfo",
                        "mandatory": false,
                        "groupLabel": "birth information of recipient",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 10,
                            "subTitle": "The date of birth of the recipient",
                            "tabOrder": 15,
                            "inputType": "date",
                            "mandatory": true,
                            "description": "Enter the date of birth of the recipient",
                            "displaySize": 10,
                            "elementName": "dateOfBirth"
                          },
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "The city of birth of the recipient",
                            "tabOrder": 16,
                            "inputType": "text",
                            "mandatory": false,
                            "description": "Enter the city of birth of the recipient",
                            "displaySize": 35,
                            "elementName": "cityOfBirth"
                          },
                          {
                            "locale": "en",
                            "maxSize": 3,
                            "subTitle": "The ISO country of birth of the recipient",
                            "tabOrder": 16,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter the ISO country code of birth of the recipient",
                            "displaySize": 3,
                            "elementName": "countryOfBirth"
                          }
                        ]
                      },
                      {
                        "groupName": "additionalData",
                        "mandatory": false,
                        "groupLabel": "Enter any additional data",
                        "identityFields": [
                          {
                            "locale": "en",
                            "maxSize": 35,
                            "subTitle": "Additional data parameter name",
                            "tabOrder": 18,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter parameter name for the additional data",
                            "displaySize": 35,
                            "elementName": "additionalDataKey"
                          },
                          {
                            "locale": "en",
                            "maxSize": 100,
                            "subTitle": "Additional data parameter value",
                            "tabOrder": 19,
                            "inputType": "text",
                            "mandatory": true,
                            "description": "Enter value for the additional data",
                            "displaySize": 100,
                            "elementName": "additionalDataValue"
                          }
                        ]
                      }
                    ]
                  },
                  "transactionDetail": {
                    "purposeOfPayment": {
                      "mandatory": true,
                      "purposeOfPaymentCodes": [
                        {
                          "code": "TAX",
                          "description": "Tax",
                          "senderIndividual": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "MOR",
                          "description": "Mortgage",
                          "senderCompany": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "MIS",
                          "description": "Miscellaneous",
                          "recipientCompany": true,
                          "senderIndividual": true
                        },
                        {
                          "code": "SAL",
                          "description": "Salary/payroll",
                          "senderCompany": true,
                          "recipientCompany": true
                        },
                        {
                          "code": "LOA",
                          "description": "Loan",
                          "senderCompany": true,
                          "recipientCompany": true
                        },
                        {
                          "code": "BUS",
                          "description": "Business/commercial payment",
                          "recipientCompany": true,
                          "senderIndividual": true
                        },
                        {
                          "code": "DEP",
                          "description": "Deposit",
                          "senderCompany": true,
                          "recipientIndividual": true
                        },
                        {
                          "code": "PEN",
                          "description": "Pension",
                          "recipientCompany": true,
                          "senderIndividual": true
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GetPostingCalendarResponse": {
        "description": "An array of PostingDate objects. \n\nEach PostingDate represents the expected posting date along with that date's cut-off time.   \n",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "postingCalendar"
              ],
              "type": "object",
              "properties": {
                "postingCalendar": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostingDate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "parameters": {},
    "examples": {},
    "requestBodies": {},
    "headers": {},
    "callbacks": {}
  },
  "x-tagGroups": [
    {
      "name": "API Reference",
      "tags": [
        "Callback API",
        "Transactional API"
      ]
    }
  ]
}